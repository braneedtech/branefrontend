{
    "sourceFile": "src/components/content-configuration/learning/VideoWithPoll.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1700657529861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700657547607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,278 @@\n+import React, { useState, useRef, useContext, useEffect } from \"react\";\r\n+import {\r\n+  Link,\r\n+  useNavigate,\r\n+  useParams,\r\n+  useOutletContext,\r\n+} from \"react-router-dom\";\r\n+import { useQuery } from \"react-query\";\r\n+import VideoPlayer from \"./Videoplayer.jsx\";\r\n+import { end_point } from \"../../../constants/urls\";\r\n+import brane_get_service from \"../../../services/brane_get_service\";\r\n+import { Subject_Chapter_Topic } from \"../../context-api/Subject_Chapter_Topic\";\r\n+import StudentDetailsCustomHook from \"../../context-api/StudentDetailsCustomHook\";\r\n+import assessmenticon from \"../../../assets/assessmenticon.svg\";\r\n+import gobackicon from \"../../../assets/gobackicon.png\";\r\n+import { Pie } from \"react-chartjs-2\";\r\n+import \"chart.js/auto\";\r\n+import \"./learning.css\";\r\n+import \"./videowithPoll.css\";\r\n+import PollQuestion from \"./PollQuestion.jsx\";\r\n+import correct from \"../../../assets/correct.gif\"\r\n+import wrong from \"../../../assets/wrong.gif\"\r\n+\r\n+function VideoWithPoll({}) {\r\n+  // State, refs, and context\r\n+  const [currentPoll, setCurrentPoll] = useState(null);\r\n+  const [shownPollIndices, setShownPollIndices] = useState([]);\r\n+  const [feedback, setFeedback] = useState(null);\r\n+  const videoRef = useRef(null);\r\n+  const navigate = useNavigate();\r\n+  const { student, updateStudent } = StudentDetailsCustomHook();\r\n+  const { subjectcontext, updateSubjectContext } = useContext(\r\n+    Subject_Chapter_Topic\r\n+  );\r\n+  const { url } = useParams();\r\n+  const decodedUrl = decodeURIComponent(url);\r\n+  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n+  const [wrongAnswers, setWrongAnswers] = useState(0);\r\n+  const [videoEnded, setVideoEnded] = useState(false);\r\n+\r\n+  const { isOffcanvasOpen } = useOutletContext();\r\n+\r\n+  let content_types = {};\r\n+  let videourl;\r\n+  let pollQuestions = [];\r\n+  let videothumbnail;\r\n+\r\n+  const resetResults = () => {\r\n+    setCurrentPoll(null);\r\n+    setShownPollIndices([]);\r\n+    setCorrectAnswers(0);\r\n+    setWrongAnswers(0);\r\n+    setFeedback(null);\r\n+    setVideoEnded(false);\r\n+  };\r\n+\r\n+  // Data fetching\r\n+  const { data, error, isLoading } = useQuery(\r\n+    [\r\n+      \"portfolio_page\",\r\n+      `${end_point}/content_configuration?curriculum=${student?.curriculum}&medium_of_instruction=${student?.medium_of_instruction}&schooling=${student.schooling}&subject=${subjectcontext.subject}&chapter=${subjectcontext.chapter}&topic=${subjectcontext.topic}`,\r\n+    ],\r\n+    brane_get_service\r\n+  );\r\n+\r\n+  if (!isLoading && error == null) {\r\n+    const { data: alias } = data;\r\n+    const { content } = alias;\r\n+    content_types = content;\r\n+    videourl = content_types[0]?.Lecture;\r\n+    videothumbnail = content_types[0]?.thumbnail;\r\n+    pollQuestions = content_types[0]?.poll;\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    const handleTimeUpdate = () => {\r\n+      const currentTime = videoRef.current.currentTime;\r\n+\r\n+      if (currentTime === 0) {\r\n+        resetResults();\r\n+      }\r\n+\r\n+      pollQuestions.forEach((poll, index) => {\r\n+        if (currentTime > poll.time && !shownPollIndices.includes(index)) {\r\n+          setCurrentPoll(poll);\r\n+          setShownPollIndices((prevIndices) => [...prevIndices, index]);\r\n+          videoRef.current.pause();\r\n+          videoRef.current.controls = false;\r\n+        }\r\n+      });\r\n+    };\r\n+    // Attach event listener if videoRef.current is not null\r\n+    if (videoRef.current) {\r\n+      videoRef.current.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n+    }\r\n+\r\n+    // Return a cleanup function\r\n+    return () => {\r\n+      // Remove event listener if videoRef.current is not null\r\n+      if (videoRef.current) {\r\n+        videoRef.current.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n+      }\r\n+    };\r\n+  }, [shownPollIndices, pollQuestions]);\r\n+\r\n+\r\n+  const handleAnswer = (answer) => {\r\n+    let isCorrect = answer === currentPoll.correctAnswer;\r\n+    if (isCorrect) {\r\n+      setCorrectAnswers((prevCount) => prevCount + 1);\r\n+      setFeedback(<img src={correct} alt=\"Correct\" />);\r\n+    } else {\r\n+      setWrongAnswers((prevCount) => prevCount + 1);\r\n+      setFeedback(<img src={wrong} alt=\"Wrong\" />);\r\n+    }\r\n+\r\n+    // Use setTimeout to hide feedback and resume the video after 1 second\r\n+    setTimeout(() => {\r\n+      setFeedback(null);\r\n+      setCurrentPoll(null); // This will hide the question as well\r\n+      if (videoRef.current) {\r\n+        videoRef.current.controls = true;\r\n+        videoRef.current.play();\r\n+      }\r\n+    }, 1000); // Timeout set to 1 second\r\n+  };\r\n+\r\n+  const start_assessment = () => {\r\n+    navigate(\"/assessments\");\r\n+  };\r\n+\r\n+  const piedata = {\r\n+    labels: [\"Correct Answers\", \"Wrong Answers\"],\r\n+    datasets: [\r\n+      {\r\n+        data: [correctAnswers, wrongAnswers],\r\n+        backgroundColor: [\"#7ce495\", \"#e73c35\"],\r\n+        borderColor: [\"rgba(75, 192, 192, 1)\", \"rgba(255, 99, 132, 1)\"],\r\n+        borderWidth: 1,\r\n+      },\r\n+    ],\r\n+  };\r\n+\r\n+  const handleVideoEnd = async () => {\r\n+    setVideoEnded(true);\r\n+\r\n+    const results = {\r\n+      correctAnswers,\r\n+      wrongAnswers,\r\n+      totalQuestions: pollQuestions.length,\r\n+      percentage: (\r\n+        (correctAnswers / (correctAnswers + wrongAnswers)) *\r\n+        100\r\n+      ).toFixed(2),\r\n+    };\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"http://localhost:5000/saveResults\",\r\n+        results\r\n+      );\r\n+    } catch (error) {\r\n+      console.error(\"Error saving results:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  // Style for the poll container\r\n+  const pollContainerStyle = {\r\n+    position: 'absolute',\r\n+    left: isOffcanvasOpen ? '48%' : '38%', // Adjust based on your offcanvas width\r\n+    width: isOffcanvasOpen ? '50%' : '55%',\r\n+    right: 0,\r\n+    top: '57%',\r\n+    zIndex: 1000, // Ensure it's above the video player\r\n+    pointerEvents: 'none',\r\n+    transition: \"left 0.3s ease-in-out\",\r\n+\r\n+    // Ensure clicks go through to the video if not clicking on poll\r\n+  };\r\n+\r\n+  // Apply pointerEvents style only where needed\r\n+  const pollQuestionStyle = {\r\n+    pointerEvents: 'auto', // Enable pointer events for the poll question itself\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <div className=\"landing__videoClassScreenContainer__TopPart\">\r\n+        <Link\r\n+          to={`/portfolio/chapters/${subjectcontext.subject}`}\r\n+          style={{ textDecoration: \"none\" }}\r\n+        >\r\n+          <div className=\"landing__videoClassScreenContainer__control-button__back-button\">\r\n+            <i\r\n+              className=\"bi bi-arrow-left-circle\"\r\n+              style={{ fontSize: \"1.5rem\" }}\r\n+            ></i>{\" \"}\r\n+            Go Back\r\n+          </div>\r\n+        </Link>\r\n+        <Link\r\n+          to={`/practice-test`}\r\n+          style={{ textDecoration: \"none\" }}\r\n+          className=\"landing__videoClassScreenContainer__practisetest-btn btn-glow\"\r\n+        >\r\n+          Practice Test\r\n+        </Link>\r\n+        <div\r\n+          className=\"landing__videoClassScreenContainer__assessment-button\"\r\n+          onClick={start_assessment}\r\n+        >\r\n+          Take Test{\" \"}\r\n+          <img\r\n+            src={assessmenticon}\r\n+            className=\"landing__videoClassScreenContainer__assessmenticon\"\r\n+            alt=\"arrow\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"landing__videoClassScreenContainer__Midpart\">\r\n+        <div className=\"video-container\">\r\n+          <VideoPlayer\r\n+            src={videourl}\r\n+            ref={videoRef}\r\n+            poster={videothumbnail}\r\n+            onEnded={handleVideoEnd}\r\n+          />\r\n+          <div className=\"poll-container\" style={pollContainerStyle}>\r\n+            {currentPoll && !feedback && (\r\n+              <div style={pollQuestionStyle}>\r\n+                <PollQuestion\r\n+                  question={currentPoll.question}\r\n+                  options={currentPoll.options}\r\n+                  onAnswer={handleAnswer}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {feedback && <div className=\"feedback-message\">{feedback}</div>}\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {/* <div className=\"results\">\r\n+          <p>Total Questions: {pollQuestions.length}</p>\r\n+          <p>Correct Answers: {correctAnswers}</p>\r\n+          <p>Wrong Answers: {wrongAnswers}</p>\r\n+          <p>\r\n+            Percentage:{\" \"}\r\n+            {correctAnswers + wrongAnswers > 0\r\n+              ? (\r\n+                  (correctAnswers / (correctAnswers + wrongAnswers)) *\r\n+                  100\r\n+                ).toFixed(2)\r\n+              : 0}\r\n+            %\r\n+          </p>\r\n+        </div> */}\r\n+\r\n+        {videoEnded && (\r\n+          <div className=\"pie-chart\">\r\n+            <Pie data={piedata} />\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+      <div className=\"landing__videoClassScreenContainer__PrevNextControls\">\r\n+        <div className=\"landing__videoClassScreenContainer__bottom-left-button__previous-topic\">\r\n+          <div className=\"prev-icon\">{\"<\"}</div>\r\n+          <div className=\"prev-title\">Previous Topic</div>\r\n+        </div>\r\n+        <div className=\"landing__videoClassScreenContainer__bottom-right-button__next-topic\">\r\n+          <div className=\"next-title\">Next Topic</div>\r\n+          <div className=\"next-icon\">{\">\"}</div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+}\r\n+\r\n+export default VideoWithPoll;\r\n+\r\n"
                }
            ],
            "date": 1700657529861,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useContext, useEffect } from \"react\";\r\nimport {\r\n  Link,\r\n  useNavigate,\r\n  useParams,\r\n  useOutletContext,\r\n} from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport VideoPlayer from \"./Videoplayer.jsx\";\r\nimport { end_point } from \"../../../constants/urls\";\r\nimport brane_get_service from \"../../../services/brane_get_service\";\r\nimport { Subject_Chapter_Topic } from \"../../context-api/Subject_Chapter_Topic\";\r\nimport StudentDetailsCustomHook from \"../../context-api/StudentDetailsCustomHook\";\r\nimport assessmenticon from \"../../../assets/assessmenticon.svg\";\r\nimport gobackicon from \"../../../assets/gobackicon.png\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport \"./learning.css\";\r\nimport \"./videowithPoll.css\";\r\nimport PollQuestion from \"./PollQuestion.jsx\";\r\nimport correct from \"../../../assets/correct.gif\"\r\nimport wrong from \"../../../assets/wrong.gif\"\r\n\r\nfunction VideoWithPoll({videoRef}) {\r\n  // State, refs, and context\r\n  const [currentPoll, setCurrentPoll] = useState(null);\r\n  const [shownPollIndices, setShownPollIndices] = useState([]);\r\n  const [feedback, setFeedback] = useState(null);\r\n  const videoRef = useRef(null);\r\n  const navigate = useNavigate();\r\n  const { student, updateStudent } = StudentDetailsCustomHook();\r\n  const { subjectcontext, updateSubjectContext } = useContext(\r\n    Subject_Chapter_Topic\r\n  );\r\n  const { url } = useParams();\r\n  const decodedUrl = decodeURIComponent(url);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [wrongAnswers, setWrongAnswers] = useState(0);\r\n  const [videoEnded, setVideoEnded] = useState(false);\r\n\r\n  const { isOffcanvasOpen } = useOutletContext();\r\n\r\n  let content_types = {};\r\n  let videourl;\r\n  let pollQuestions = [];\r\n  let videothumbnail;\r\n\r\n  const resetResults = () => {\r\n    setCurrentPoll(null);\r\n    setShownPollIndices([]);\r\n    setCorrectAnswers(0);\r\n    setWrongAnswers(0);\r\n    setFeedback(null);\r\n    setVideoEnded(false);\r\n  };\r\n\r\n  // Data fetching\r\n  const { data, error, isLoading } = useQuery(\r\n    [\r\n      \"portfolio_page\",\r\n      `${end_point}/content_configuration?curriculum=${student?.curriculum}&medium_of_instruction=${student?.medium_of_instruction}&schooling=${student.schooling}&subject=${subjectcontext.subject}&chapter=${subjectcontext.chapter}&topic=${subjectcontext.topic}`,\r\n    ],\r\n    brane_get_service\r\n  );\r\n\r\n  if (!isLoading && error == null) {\r\n    const { data: alias } = data;\r\n    const { content } = alias;\r\n    content_types = content;\r\n    videourl = content_types[0]?.Lecture;\r\n    videothumbnail = content_types[0]?.thumbnail;\r\n    pollQuestions = content_types[0]?.poll;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleTimeUpdate = () => {\r\n      const currentTime = videoRef.current.currentTime;\r\n\r\n      if (currentTime === 0) {\r\n        resetResults();\r\n      }\r\n\r\n      pollQuestions.forEach((poll, index) => {\r\n        if (currentTime > poll.time && !shownPollIndices.includes(index)) {\r\n          setCurrentPoll(poll);\r\n          setShownPollIndices((prevIndices) => [...prevIndices, index]);\r\n          videoRef.current.pause();\r\n          videoRef.current.controls = false;\r\n        }\r\n      });\r\n    };\r\n    // Attach event listener if videoRef.current is not null\r\n    if (videoRef.current) {\r\n      videoRef.current.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n    }\r\n\r\n    // Return a cleanup function\r\n    return () => {\r\n      // Remove event listener if videoRef.current is not null\r\n      if (videoRef.current) {\r\n        videoRef.current.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n      }\r\n    };\r\n  }, [shownPollIndices, pollQuestions]);\r\n\r\n\r\n  const handleAnswer = (answer) => {\r\n    let isCorrect = answer === currentPoll.correctAnswer;\r\n    if (isCorrect) {\r\n      setCorrectAnswers((prevCount) => prevCount + 1);\r\n      setFeedback(<img src={correct} alt=\"Correct\" />);\r\n    } else {\r\n      setWrongAnswers((prevCount) => prevCount + 1);\r\n      setFeedback(<img src={wrong} alt=\"Wrong\" />);\r\n    }\r\n\r\n    // Use setTimeout to hide feedback and resume the video after 1 second\r\n    setTimeout(() => {\r\n      setFeedback(null);\r\n      setCurrentPoll(null); // This will hide the question as well\r\n      if (videoRef.current) {\r\n        videoRef.current.controls = true;\r\n        videoRef.current.play();\r\n      }\r\n    }, 1000); // Timeout set to 1 second\r\n  };\r\n\r\n  const start_assessment = () => {\r\n    navigate(\"/assessments\");\r\n  };\r\n\r\n  const piedata = {\r\n    labels: [\"Correct Answers\", \"Wrong Answers\"],\r\n    datasets: [\r\n      {\r\n        data: [correctAnswers, wrongAnswers],\r\n        backgroundColor: [\"#7ce495\", \"#e73c35\"],\r\n        borderColor: [\"rgba(75, 192, 192, 1)\", \"rgba(255, 99, 132, 1)\"],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const handleVideoEnd = async () => {\r\n    setVideoEnded(true);\r\n\r\n    const results = {\r\n      correctAnswers,\r\n      wrongAnswers,\r\n      totalQuestions: pollQuestions.length,\r\n      percentage: (\r\n        (correctAnswers / (correctAnswers + wrongAnswers)) *\r\n        100\r\n      ).toFixed(2),\r\n    };\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/saveResults\",\r\n        results\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error saving results:\", error);\r\n    }\r\n  };\r\n\r\n  // Style for the poll container\r\n  const pollContainerStyle = {\r\n    position: 'absolute',\r\n    left: isOffcanvasOpen ? '48%' : '38%', // Adjust based on your offcanvas width\r\n    width: isOffcanvasOpen ? '50%' : '55%',\r\n    right: 0,\r\n    top: '57%',\r\n    zIndex: 1000, // Ensure it's above the video player\r\n    pointerEvents: 'none',\r\n    transition: \"left 0.3s ease-in-out\",\r\n\r\n    // Ensure clicks go through to the video if not clicking on poll\r\n  };\r\n\r\n  // Apply pointerEvents style only where needed\r\n  const pollQuestionStyle = {\r\n    pointerEvents: 'auto', // Enable pointer events for the poll question itself\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"landing__videoClassScreenContainer__TopPart\">\r\n        <Link\r\n          to={`/portfolio/chapters/${subjectcontext.subject}`}\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          <div className=\"landing__videoClassScreenContainer__control-button__back-button\">\r\n            <i\r\n              className=\"bi bi-arrow-left-circle\"\r\n              style={{ fontSize: \"1.5rem\" }}\r\n            ></i>{\" \"}\r\n            Go Back\r\n          </div>\r\n        </Link>\r\n        <Link\r\n          to={`/practice-test`}\r\n          style={{ textDecoration: \"none\" }}\r\n          className=\"landing__videoClassScreenContainer__practisetest-btn btn-glow\"\r\n        >\r\n          Practice Test\r\n        </Link>\r\n        <div\r\n          className=\"landing__videoClassScreenContainer__assessment-button\"\r\n          onClick={start_assessment}\r\n        >\r\n          Take Test{\" \"}\r\n          <img\r\n            src={assessmenticon}\r\n            className=\"landing__videoClassScreenContainer__assessmenticon\"\r\n            alt=\"arrow\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"landing__videoClassScreenContainer__Midpart\">\r\n        <div className=\"video-container\">\r\n          <VideoPlayer\r\n            src={videourl}\r\n            ref={videoRef}\r\n            poster={videothumbnail}\r\n            onEnded={handleVideoEnd}\r\n          />\r\n          <div className=\"poll-container\" style={pollContainerStyle}>\r\n            {currentPoll && !feedback && (\r\n              <div style={pollQuestionStyle}>\r\n                <PollQuestion\r\n                  question={currentPoll.question}\r\n                  options={currentPoll.options}\r\n                  onAnswer={handleAnswer}\r\n                />\r\n              </div>\r\n            )}\r\n            {feedback && <div className=\"feedback-message\">{feedback}</div>}\r\n          </div>\r\n        </div>\r\n\r\n        {/* <div className=\"results\">\r\n          <p>Total Questions: {pollQuestions.length}</p>\r\n          <p>Correct Answers: {correctAnswers}</p>\r\n          <p>Wrong Answers: {wrongAnswers}</p>\r\n          <p>\r\n            Percentage:{\" \"}\r\n            {correctAnswers + wrongAnswers > 0\r\n              ? (\r\n                  (correctAnswers / (correctAnswers + wrongAnswers)) *\r\n                  100\r\n                ).toFixed(2)\r\n              : 0}\r\n            %\r\n          </p>\r\n        </div> */}\r\n\r\n        {videoEnded && (\r\n          <div className=\"pie-chart\">\r\n            <Pie data={piedata} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"landing__videoClassScreenContainer__PrevNextControls\">\r\n        <div className=\"landing__videoClassScreenContainer__bottom-left-button__previous-topic\">\r\n          <div className=\"prev-icon\">{\"<\"}</div>\r\n          <div className=\"prev-title\">Previous Topic</div>\r\n        </div>\r\n        <div className=\"landing__videoClassScreenContainer__bottom-right-button__next-topic\">\r\n          <div className=\"next-title\">Next Topic</div>\r\n          <div className=\"next-icon\">{\">\"}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VideoWithPoll;\r\n\r\n"
        }
    ]
}