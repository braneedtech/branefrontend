{
    "sourceFile": "src/components/content-configuration/specialskills/InstructionsScreen.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1700831550535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1700831550535,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SpecialSkillsVideoComponent from \"./SpecialSkillsVideoComponent\";\r\nimport { Subject_Chapter_Topic } from \"../../context-api/Subject_Chapter_Topic\";\r\nimport gobackicon from \"../../../assets/gobackicon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport brane_get_service from \"../../../services/brane_get_service\";\r\nimport { end_point } from \"../../../constants/urls\";\r\nimport loader from \"../../../assets/loading/loader.gif\";\r\nimport branelogo from \"../../../assets/Branenewlogo.png\";\r\nimport StudentDetailsCustomHook from \"../../context-api/StudentDetailsCustomHook\";\r\nimport CustomPopup from \"../assessments/CustomPopup\";\r\nimport SpeakerOff from \"../../../assets/SpeakerOff.png\"\r\nimport SpeakerOn from \"../../../assets/SpeakerOn.gif\"\r\n\r\nconst InstructionsScreen = () => {\r\n  const { subjectcontext } = useContext(Subject_Chapter_Topic);\r\n  const { specialskill, level } = subjectcontext;\r\n  const [startTest, setStartTest] = useState(false);\r\n  const { student } = StudentDetailsCustomHook();\r\n  const [isSpeakOut, setIsSpeakOut] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const [elapsedTime, setElapsedTime] = useState(() => {\r\n    const storedTime = window.localStorage.getItem(\"elapsedTime\");\r\n    return storedTime ? JSON.parse(storedTime) : 0;\r\n  });\r\n\r\n  useEffect(() => {\r\n    let timerInterval;\r\n    if (!startTest) {\r\n      timerInterval = setInterval(() => {\r\n        setElapsedTime((prevTime) => prevTime + 1);\r\n      }, 1000);\r\n    }\r\n\r\n    return () => clearInterval(timerInterval);\r\n  }, [startTest]);\r\n\r\n  function formatTime(seconds) {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n\r\n    return `${padZero(minutes)}:${padZero(remainingSeconds)} ${\r\n      minutes < 1 ? \"Secs\" : \"Mins\"\r\n    }`;\r\n  }\r\n\r\n  function padZero(value) {\r\n    return value.toString().padStart(2, \"0\");\r\n  }\r\n  const handleStartTest = () => {\r\n    // Set the state to indicate that the test has started\r\n    setStartTest(true);\r\n    window.localStorage.removeItem(\"elapsedTime\");\r\n    setStartTest(true);\r\n  };\r\n  let specialskills_content_data = {};\r\n\r\n  useEffect(() => {\r\n    if (startTest) {\r\n      // Start the timer only if the test hasn't started\r\n      const timerInterval = setInterval(() => {\r\n        setElapsedTime((prevTime) => {\r\n          const newTime = prevTime + 1;\r\n          window.localStorage.setItem(\"elapsedTime\", JSON.stringify(newTime));\r\n          return newTime;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timerInterval);\r\n    }\r\n  }, [startTest]);\r\n\r\n  //   const goBack = () => {\r\n  //     setShowCustomPopup(true);\r\n  //   };\r\n\r\n  //   const handleConfirmPopup = () => {\r\n  //     // Clear local storage and navigate to the desired route\r\n  //     localStorage.clear();\r\n  //     navigate(\"/\");\r\n  //   };\r\n\r\n  //   const handleCancelPopup = () => {\r\n  //     setShowCustomPopup(false);\r\n  //   };\r\n\r\n  function formatDuration(seconds) {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const remainingSeconds = seconds % 60;\r\n\r\n    const parts = [];\r\n\r\n    if (hours > 0) {\r\n      parts.push(`${hours} ${hours === 1 ? \"hour\" : \"hours\"}`);\r\n    }\r\n\r\n    if (minutes > 0) {\r\n      parts.push(`${minutes} ${minutes === 1 ? \"minute\" : \"minutes\"}`);\r\n    }\r\n\r\n    if (remainingSeconds > 0) {\r\n      parts.push(\r\n        `${remainingSeconds} ${remainingSeconds === 1 ? \"second\" : \"seconds\"}`\r\n      );\r\n    }\r\n\r\n    return parts.join(\" \");\r\n  }\r\n  const { data, error, isLoading } = useQuery(\r\n    [\r\n      \"specialskills_content_data\",\r\n      `${end_point}/specialskills-content?skillname=${specialskill}&level=${level}`,\r\n    ],\r\n    brane_get_service\r\n  );\r\n\r\n  if (!isLoading && error == null) {\r\n    const { data: alias } = data;\r\n    specialskills_content_data = alias;\r\n  }\r\n\r\n  const getInitials = (name) => {\r\n    // Extract the first letter of each word in the name\r\n    const initials = name\r\n      .split(\" \")\r\n      .map((word) => word[0])\r\n      .join(\"\");\r\n    return initials.toUpperCase();\r\n  };\r\n\r\n  const renderProfileImage = () => {\r\n    // If there is a profile image, display it\r\n    if (student?.profile_img) {\r\n      return (\r\n        <img\r\n          src={student?.profile_img}\r\n          // className=\"landing__leftbox__portfolio__profile__userimage\"\r\n          alt=\"Profile\"\r\n        />\r\n      );\r\n    }\r\n\r\n    // If there is no profile image, display the first letter with a background color\r\n    const initials = getInitials(student?.student_name);\r\n    return (\r\n      <div\r\n        className=\"landing__leftbox__portfolio__profile__initials\"\r\n        style={{ width: \"3.25vw\", height: \"7vh\" }}\r\n      >\r\n        {initials}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const speakout = (instructions) => {\r\n    const synth = window.speechSynthesis;\r\n    if (!isSpeakOut) {\r\n      const utterance = new SpeechSynthesisUtterance();\r\n      utterance.text = instructions.join(\" \");\r\n      synth.speak(utterance);\r\n    } else {\r\n      synth.cancel(); // Stop speaking\r\n    }\r\n    setIsSpeakOut(!isSpeakOut);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoading ? (\r\n        error != null ? (\r\n          <p>{JSON.stringify(error.message)}</p>\r\n        ) : (\r\n          <div className=\"landing__Instructions\">\r\n            <div className=\"landing__Instructions__Container__nav\">\r\n              <div className=\"landing__Instructions__Container__nav__logo\">\r\n                <img src={branelogo} alt=\"Logo\" />\r\n              </div>\r\n              <div className=\"landing__Instructions__Container__nav__profileimg\">\r\n                {renderProfileImage()}{\" \"}\r\n              </div>\r\n            </div>\r\n            <div\r\n              className=\"landing__Instructions__Container\"\r\n              style={{ padding: \"1rem .5rem\" }}\r\n            >\r\n              <div className=\"landing__Instructions__Container__TopPart\">\r\n                <Link to={`/levels`} style={{ textDecoration: \"none\" }}>\r\n                  <div className=\"landing__Container__SportsScreen__control-button__back-button\">\r\n                    <i\r\n                      className=\"bi bi-arrow-left-circle\"\r\n                      style={{ fontSize: \"1.5rem\" }}\r\n                    ></i>{\" \"}\r\n                    Go Back\r\n                  </div>\r\n                </Link>\r\n                <div>\r\n                  <h2>{subjectcontext?.specialskill}</h2>\r\n                </div>\r\n                {startTest ? (\r\n                  <div className=\"timer-display\">{formatTime(elapsedTime)}</div>\r\n                ) : (\r\n                  <div style={{ visibility: \"hidden\" }}>00:00 Mins</div>\r\n                )}\r\n              </div>\r\n              {!startTest ? (\r\n                <div className=\"landing__specialskills-Instructions\">\r\n                  <div className=\"landing__specialskills-Instructions__heading\">\r\n                    <div style={{ visibility: \"hidden\" }}>lorem</div>\r\n                    <h2>Assessment Instructions</h2>\r\n                    <div\r\n                      className=\"Instructions__Container__InstructionsBox__InstructionsTitle__icon\"\r\n                      onClick={() =>\r\n                        speakout(\r\n                          specialskills_content_data[\r\n                            `specialskills_${specialskill}_${level}`\r\n                          ]?.instructions\r\n                        )\r\n                      }\r\n                    >\r\n                      {isSpeakOut ? (\r\n                        <img src={SpeakerOn} alt=\"Speaker On\" srcset=\"\" />\r\n                      ) : (\r\n                        <img src={SpeakerOff} alt=\"Speaker Off\" srcset=\"\" />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    Welcome to the assessment! Follow the instructions below to\r\n                    complete the test.\r\n                  </p>\r\n\r\n                  <ol>\r\n                    {specialskills_content_data &&\r\n                      specialskills_content_data[\r\n                        `specialskills_${specialskill}_${level}`\r\n                      ] &&\r\n                      specialskills_content_data[\r\n                        `specialskills_${specialskill}_${level}`\r\n                      ]?.instructions.map((ele, index) => (\r\n                        <li key={index}>{ele}</li>\r\n                      ))}\r\n                  </ol>\r\n\r\n                  {!startTest && (\r\n                    <button\r\n                      className=\"landing__specialskills-Instructions__startbtn\"\r\n                      onClick={handleStartTest}\r\n                    >\r\n                      Start Test\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <SpecialSkillsVideoComponent\r\n                  video={\r\n                    specialskills_content_data[\r\n                      `specialskills_${specialskill}_${level}`\r\n                    ]?.content\r\n                  }\r\n                  questions={\r\n                    specialskills_content_data[\r\n                      `specialskills_${specialskill}_${level}`\r\n                    ].questions\r\n                  }\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        )\r\n      ) : (\r\n        <>\r\n          <img\r\n            src={loader}\r\n            className=\"loader\"\r\n            alt=\"Error\"\r\n            width={200}\r\n            height={200}\r\n          ></img>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InstructionsScreen;\r\n"
        }
    ]
}