{
    "sourceFile": "src/components/homepage/Ourprojects.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1700646400182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700646563487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const Ourprojects = ({ homepage_ourprojects, isMuted, setIsMuted  }) => {\r\n   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n \r\n   const [showVideo, setShowVideo] = useState(false);\r\n-  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n \r\n   const videoRef = useRef(null);\r\n   const videoContainerRef = useRef(null);\r\n"
                },
                {
                    "date": 1700647334884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,16 @@\n // Import your custom SVG icons\r\n import muteIcon from '../../assets/mute.svg';\r\n import volumeUpIcon from '../../assets/volume-up.svg';\r\n \r\n-const Ourprojects = ({ homepage_ourprojects, isMuted, setIsMuted  }) => {\r\n+const Ourprojects = ({ homepage_ourprojects,videoRef, isMuted, setIsMuted  }) => {\r\n   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n \r\n   const [showVideo, setShowVideo] = useState(false);\r\n   // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n \r\n-  const videoRef = useRef(null);\r\n+  // const videoRef = useRef(null);\r\n   const videoContainerRef = useRef(null);\r\n \r\n   const handleVideoEnd = () => {\r\n     setShowVideo(false);\r\n"
                },
                {
                    "date": 1700651213243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n // Import your custom SVG icons\r\n import muteIcon from '../../assets/mute.svg';\r\n import volumeUpIcon from '../../assets/volume-up.svg';\r\n \r\n-const Ourprojects = ({ homepage_ourprojects,videoRef, isMuted, setIsMuted  }) => {\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n \r\n   const [showVideo, setShowVideo] = useState(false);\r\n   // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n"
                },
                {
                    "date": 1700651246692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// Import your custom SVG icons\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+\r\n+  const [showVideo, setShowVideo] = useState(false);\r\n+  // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+  const videoContainerRef = useRef(null);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    setShowVideo(false);\r\n+  };\r\n+\r\n+  const handleVideoClick = () => {\r\n+    if (showVideo) {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.pause();\r\n+      }\r\n+    } else {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }\r\n+    setShowVideo(!showVideo);\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    // Start a timer to check for mouseover duration\r\n+    const mouseOverTimer = setTimeout(() => {\r\n+      if (!showVideo) {\r\n+        handleVideoClick();\r\n+      }\r\n+    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+    setIsMouseOver(true);\r\n+\r\n+    return () => {\r\n+      // Clear the timer when the mouse leaves the element\r\n+      clearTimeout(mouseOverTimer);\r\n+      setIsMouseOver(false);\r\n+    };\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const videoElement = videoRef.current;\r\n+\r\n+    if (showVideo && videoElement) {\r\n+      videoElement.play();\r\n+      videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+      // Create an Intersection Observer\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          const [entry] = entries;\r\n+          if (entry.isIntersecting) {\r\n+            // Element is in the viewport, play the video\r\n+            videoElement.play();\r\n+          } else {\r\n+            // Element is out of the viewport, pause the video\r\n+            videoElement.pause();\r\n+          }\r\n+        },\r\n+        { threshold: 0.5 } // Adjust the threshold as needed\r\n+      );\r\n+\r\n+      // Start observing the video container\r\n+      observer.observe(videoContainerRef.current);\r\n+\r\n+      // Cleanup the observer when the component is unmounted\r\n+      return () => {\r\n+        observer.disconnect();\r\n+      };\r\n+    }\r\n+  }, [showVideo]);\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  const videoRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={() => setIsMouseOver(false)}\r\n+    >\r\n+      {showVideo ? (\r\n+        <div className=\"video-container\" ref={videoContainerRef}>\r\n+          <video\r\n+            id=\"videoPlayer\"\r\n+            ref={videoRef}\r\n+            style={{ width: '99vw' }}\r\n+            onClick={handleVideoClick}\r\n+            muted={isMuted} // Set muted attribute based on state\r\n+          >\r\n+            <source src={longvideo} type=\"video/mp4\" />\r\n+            Your browser does not support the video tag.\r\n+          </video>\r\n+          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+            {isMuted ? (\r\n+              <img src={muteIcon} alt=\"Mute\" />\r\n+            ) : (\r\n+              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      ) : (\r\n+        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+          <p className=\"overlay-text\">{title}</p>\r\n+          <p className=\"overlay-text-desc\">{description}</p>\r\n+          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n"
                },
                {
                    "date": 1700651289612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,135 +137,4 @@\n   );\r\n };\r\n \r\n export default Ourprojects;\r\n-import React, { useState, useEffect, useRef } from 'react';\r\n-\r\n-// Import your custom SVG icons\r\n-import muteIcon from '../../assets/mute.svg';\r\n-import volumeUpIcon from '../../assets/volume-up.svg';\r\n-\r\n-const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n-  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-\r\n-  const [showVideo, setShowVideo] = useState(false);\r\n-  // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n-  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n-\r\n-  // const videoRef = useRef(null);\r\n-  const videoContainerRef = useRef(null);\r\n-\r\n-  const handleVideoEnd = () => {\r\n-    setShowVideo(false);\r\n-  };\r\n-\r\n-  const handleVideoClick = () => {\r\n-    if (showVideo) {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.pause();\r\n-      }\r\n-    } else {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.play();\r\n-      }\r\n-    }\r\n-    setShowVideo(!showVideo);\r\n-  };\r\n-\r\n-  const handleMuteToggle = () => {\r\n-    if (videoRef.current) {\r\n-      videoRef.current.muted = !videoRef.current.muted;\r\n-      setIsMuted(videoRef.current.muted);\r\n-    }\r\n-  };\r\n-\r\n-  const handleMouseEnter = () => {\r\n-    // Start a timer to check for mouseover duration\r\n-    const mouseOverTimer = setTimeout(() => {\r\n-      if (!showVideo) {\r\n-        handleVideoClick();\r\n-      }\r\n-    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n-\r\n-    setIsMouseOver(true);\r\n-\r\n-    return () => {\r\n-      // Clear the timer when the mouse leaves the element\r\n-      clearTimeout(mouseOverTimer);\r\n-      setIsMouseOver(false);\r\n-    };\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const videoElement = videoRef.current;\r\n-\r\n-    if (showVideo && videoElement) {\r\n-      videoElement.play();\r\n-      videoElement.addEventListener('ended', handleVideoEnd);\r\n-\r\n-      // Create an Intersection Observer\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          const [entry] = entries;\r\n-          if (entry.isIntersecting) {\r\n-            // Element is in the viewport, play the video\r\n-            videoElement.play();\r\n-          } else {\r\n-            // Element is out of the viewport, pause the video\r\n-            videoElement.pause();\r\n-          }\r\n-        },\r\n-        { threshold: 0.5 } // Adjust the threshold as needed\r\n-      );\r\n-\r\n-      // Start observing the video container\r\n-      observer.observe(videoContainerRef.current);\r\n-\r\n-      // Cleanup the observer when the component is unmounted\r\n-      return () => {\r\n-        observer.disconnect();\r\n-      };\r\n-    }\r\n-  }, [showVideo]);\r\n-\r\n-  const { description, thumbnail, title, longvideo } = feature1;\r\n-\r\n-  return (\r\n-    <div\r\n-      className=\"homepage__ourprojects\"\r\n-      onMouseEnter={handleMouseEnter}\r\n-      onMouseLeave={() => setIsMouseOver(false)}\r\n-    >\r\n-      {showVideo ? (\r\n-        <div className=\"video-container\" ref={videoContainerRef}>\r\n-          <video\r\n-            id=\"videoPlayer\"\r\n-            ref={videoRef}\r\n-            style={{ width: '99vw' }}\r\n-            onClick={handleVideoClick}\r\n-            muted={isMuted} // Set muted attribute based on state\r\n-          >\r\n-            <source src={longvideo} type=\"video/mp4\" />\r\n-            Your browser does not support the video tag.\r\n-          </video>\r\n-          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-            {isMuted ? (\r\n-              <img src={muteIcon} alt=\"Mute\" />\r\n-            ) : (\r\n-              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      ) : (\r\n-        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n-          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-          <p className=\"overlay-text\">{title}</p>\r\n-          <p className=\"overlay-text-desc\">{description}</p>\r\n-          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n-          \r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Ourprojects;\r\n"
                },
                {
                    "date": 1700651869299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n             id=\"videoPlayer\"\r\n             ref={videoRef}\r\n             style={{ width: '99vw' }}\r\n             onClick={handleVideoClick}\r\n-            muted={isMuted} // Set muted attribute based on state\r\n+            // muted={isMuted} // Set muted attribute based on state\r\n           >\r\n             <source src={longvideo} type=\"video/mp4\" />\r\n             Your browser does not support the video tag.\r\n           </video>\r\n"
                },
                {
                    "date": 1700651877616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// Import your custom SVG icons\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+\r\n+  const [showVideo, setShowVideo] = useState(false);\r\n+  // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+  const videoContainerRef = useRef(null);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    setShowVideo(false);\r\n+  };\r\n+\r\n+  const handleVideoClick = () => {\r\n+    if (showVideo) {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.pause();\r\n+      }\r\n+    } else {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }\r\n+    setShowVideo(!showVideo);\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    // Start a timer to check for mouseover duration\r\n+    const mouseOverTimer = setTimeout(() => {\r\n+      if (!showVideo) {\r\n+        handleVideoClick();\r\n+      }\r\n+    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+    setIsMouseOver(true);\r\n+\r\n+    return () => {\r\n+      // Clear the timer when the mouse leaves the element\r\n+      clearTimeout(mouseOverTimer);\r\n+      setIsMouseOver(false);\r\n+    };\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const videoElement = videoRef.current;\r\n+\r\n+    if (showVideo && videoElement) {\r\n+      videoElement.play();\r\n+      videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+      // Create an Intersection Observer\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          const [entry] = entries;\r\n+          if (entry.isIntersecting) {\r\n+            // Element is in the viewport, play the video\r\n+            videoElement.play();\r\n+          } else {\r\n+            // Element is out of the viewport, pause the video\r\n+            videoElement.pause();\r\n+          }\r\n+        },\r\n+        { threshold: 0.5 } // Adjust the threshold as needed\r\n+      );\r\n+\r\n+      // Start observing the video container\r\n+      observer.observe(videoContainerRef.current);\r\n+\r\n+      // Cleanup the observer when the component is unmounted\r\n+      return () => {\r\n+        observer.disconnect();\r\n+      };\r\n+    }\r\n+  }, [showVideo]);\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  const videoRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={() => setIsMouseOver(false)}\r\n+    >\r\n+      {showVideo ? (\r\n+        <div className=\"video-container\" ref={videoContainerRef}>\r\n+          <video\r\n+            id=\"videoPlayer\"\r\n+            ref={videoRef}\r\n+            style={{ width: '99vw' }}\r\n+            onClick={handleVideoClick}\r\n+            muted={isMuted} // Set muted attribute based on state\r\n+          >\r\n+            <source src={longvideo} type=\"video/mp4\" />\r\n+            Your browser does not support the video tag.\r\n+          </video>\r\n+          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+            {isMuted ? (\r\n+              <img src={muteIcon} alt=\"Mute\" />\r\n+            ) : (\r\n+              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      ) : (\r\n+        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+          <p className=\"overlay-text\">{title}</p>\r\n+          <p className=\"overlay-text-desc\">{description}</p>\r\n+          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n"
                },
                {
                    "date": 1700718527204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n \r\n   const [showVideo, setShowVideo] = useState(false);\r\n-  // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n \r\n   const videoContainerRef = useRef(null);\r\n \r\n@@ -107,9 +107,9 @@\n       {showVideo ? (\r\n         <div className=\"video-container\" ref={videoContainerRef}>\r\n           <video\r\n             id=\"videoPlayer\"\r\n-            ref={videoRef}\r\n+            ref={el => videoRefs.current.set('ourProjectsVideo', el)}\r\n             style={{ width: '99vw' }}\r\n             onClick={handleVideoClick}\r\n             muted={isMuted} // Set muted attribute based on state\r\n           >\r\n@@ -137,144 +137,4 @@\n   );\r\n };\r\n \r\n export default Ourprojects;\r\n-import React, { useState, useEffect, useRef } from 'react';\r\n-\r\n-// Import your custom SVG icons\r\n-import muteIcon from '../../assets/mute.svg';\r\n-import volumeUpIcon from '../../assets/volume-up.svg';\r\n-\r\n-const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n-  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-\r\n-  const [showVideo, setShowVideo] = useState(false);\r\n-  // const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n-  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n-\r\n-  const videoContainerRef = useRef(null);\r\n-\r\n-  const handleVideoEnd = () => {\r\n-    setShowVideo(false);\r\n-  };\r\n-\r\n-  const handleVideoClick = () => {\r\n-    if (showVideo) {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.pause();\r\n-      }\r\n-    } else {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.play();\r\n-      }\r\n-    }\r\n-    setShowVideo(!showVideo);\r\n-  };\r\n-\r\n-  const handleMuteToggle = () => {\r\n-    if (videoRef.current) {\r\n-      videoRef.current.muted = !videoRef.current.muted;\r\n-      setIsMuted(videoRef.current.muted);\r\n-    }\r\n-  };\r\n-\r\n-  const handleMouseEnter = () => {\r\n-    // Start a timer to check for mouseover duration\r\n-    const mouseOverTimer = setTimeout(() => {\r\n-      if (!showVideo) {\r\n-        handleVideoClick();\r\n-      }\r\n-    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n-\r\n-    setIsMouseOver(true);\r\n-\r\n-    return () => {\r\n-      // Clear the timer when the mouse leaves the element\r\n-      clearTimeout(mouseOverTimer);\r\n-      setIsMouseOver(false);\r\n-    };\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const videoElement = videoRef.current;\r\n-\r\n-    if (showVideo && videoElement) {\r\n-      videoElement.play();\r\n-      videoElement.addEventListener('ended', handleVideoEnd);\r\n-\r\n-      // Create an Intersection Observer\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          const [entry] = entries;\r\n-          if (entry.isIntersecting) {\r\n-            // Element is in the viewport, play the video\r\n-            videoElement.play();\r\n-          } else {\r\n-            // Element is out of the viewport, pause the video\r\n-            videoElement.pause();\r\n-          }\r\n-        },\r\n-        { threshold: 0.5 } // Adjust the threshold as needed\r\n-      );\r\n-\r\n-      // Start observing the video container\r\n-      observer.observe(videoContainerRef.current);\r\n-\r\n-      // Cleanup the observer when the component is unmounted\r\n-      return () => {\r\n-        observer.disconnect();\r\n-      };\r\n-    }\r\n-  }, [showVideo]);\r\n-\r\n-  const { description, thumbnail, title, longvideo } = feature1;\r\n-\r\n-  const videoRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    updateVideoRef('ourProjectsVideo', videoRef);\r\n-\r\n-    return () => {\r\n-      updateVideoRef('ourProjectsVideo', null);\r\n-    };\r\n-  }, [updateVideoRef]);\r\n-\r\n-  return (\r\n-    <div\r\n-      className=\"homepage__ourprojects\"\r\n-      onMouseEnter={handleMouseEnter}\r\n-      onMouseLeave={() => setIsMouseOver(false)}\r\n-    >\r\n-      {showVideo ? (\r\n-        <div className=\"video-container\" ref={videoContainerRef}>\r\n-          <video\r\n-            id=\"videoPlayer\"\r\n-            ref={videoRef}\r\n-            style={{ width: '99vw' }}\r\n-            onClick={handleVideoClick}\r\n-            // muted={isMuted} // Set muted attribute based on state\r\n-          >\r\n-            <source src={longvideo} type=\"video/mp4\" />\r\n-            Your browser does not support the video tag.\r\n-          </video>\r\n-          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-            {isMuted ? (\r\n-              <img src={muteIcon} alt=\"Mute\" />\r\n-            ) : (\r\n-              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      ) : (\r\n-        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n-          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-          <p className=\"overlay-text\">{title}</p>\r\n-          <p className=\"overlay-text-desc\">{description}</p>\r\n-          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n-          \r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Ourprojects;\r\n"
                },
                {
                    "date": 1700718581380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// Import your custom SVG icons\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+  const videoRefs = useRef([]);\r\n+  const [showVideo, setShowVideo] = useState(false);\r\n+  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+  const videoContainerRef = useRef(null);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    setShowVideo(false);\r\n+  };\r\n+\r\n+  const handleVideoClick = () => {\r\n+    if (showVideo) {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.pause();\r\n+      }\r\n+    } else {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }\r\n+    setShowVideo(!showVideo);\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    // Start a timer to check for mouseover duration\r\n+    const mouseOverTimer = setTimeout(() => {\r\n+      if (!showVideo) {\r\n+        handleVideoClick();\r\n+      }\r\n+    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+    setIsMouseOver(true);\r\n+\r\n+    return () => {\r\n+      // Clear the timer when the mouse leaves the element\r\n+      clearTimeout(mouseOverTimer);\r\n+      setIsMouseOver(false);\r\n+    };\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const videoElement = videoRef.current;\r\n+\r\n+    if (showVideo && videoElement) {\r\n+      videoElement.play();\r\n+      videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+      // Create an Intersection Observer\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          const [entry] = entries;\r\n+          if (entry.isIntersecting) {\r\n+            // Element is in the viewport, play the video\r\n+            videoElement.play();\r\n+          } else {\r\n+            // Element is out of the viewport, pause the video\r\n+            videoElement.pause();\r\n+          }\r\n+        },\r\n+        { threshold: 0.5 } // Adjust the threshold as needed\r\n+      );\r\n+\r\n+      // Start observing the video container\r\n+      observer.observe(videoContainerRef.current);\r\n+\r\n+      // Cleanup the observer when the component is unmounted\r\n+      return () => {\r\n+        observer.disconnect();\r\n+      };\r\n+    }\r\n+  }, [showVideo]);\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  const videoRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={() => setIsMouseOver(false)}\r\n+    >\r\n+      {showVideo ? (\r\n+        <div className=\"video-container\" ref={videoContainerRef}>\r\n+          <video\r\n+            id=\"videoPlayer\"\r\n+            ref={el => videoRefs.current.set('ourProjectsVideo', el)}\r\n+            style={{ width: '99vw' }}\r\n+            onClick={handleVideoClick}\r\n+            muted={isMuted} // Set muted attribute based on state\r\n+          >\r\n+            <source src={longvideo} type=\"video/mp4\" />\r\n+            Your browser does not support the video tag.\r\n+          </video>\r\n+          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+            {isMuted ? (\r\n+              <img src={muteIcon} alt=\"Mute\" />\r\n+            ) : (\r\n+              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      ) : (\r\n+        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+          <p className=\"overlay-text\">{title}</p>\r\n+          <p className=\"overlay-text-desc\">{description}</p>\r\n+          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n"
                },
                {
                    "date": 1700718768625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,258 +1,199 @@\n-import React, { useState, useEffect, useRef } from 'react';\r\n+// import React, { useState, useEffect, useRef } from 'react';\r\n \r\n-// Import your custom SVG icons\r\n-import muteIcon from '../../assets/mute.svg';\r\n-import volumeUpIcon from '../../assets/volume-up.svg';\r\n+// // Import your custom SVG icons\r\n+// import muteIcon from '../../assets/mute.svg';\r\n+// import volumeUpIcon from '../../assets/volume-up.svg';\r\n \r\n-const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n-  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-  const videoRefs = useRef([]);\r\n-  const [showVideo, setShowVideo] = useState(false);\r\n-  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n-  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+// const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+//   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n \r\n-  const videoContainerRef = useRef(null);\r\n+//   const [showVideo, setShowVideo] = useState(false);\r\n+//   const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+//   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n \r\n-  const handleVideoEnd = () => {\r\n-    setShowVideo(false);\r\n-  };\r\n+//   const videoContainerRef = useRef(null);\r\n \r\n-  const handleVideoClick = () => {\r\n-    if (showVideo) {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.pause();\r\n-      }\r\n-    } else {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.play();\r\n-      }\r\n-    }\r\n-    setShowVideo(!showVideo);\r\n-  };\r\n+//   const handleVideoEnd = () => {\r\n+//     setShowVideo(false);\r\n+//   };\r\n \r\n-  const handleMuteToggle = () => {\r\n-    if (videoRef.current) {\r\n-      videoRef.current.muted = !videoRef.current.muted;\r\n-      setIsMuted(videoRef.current.muted);\r\n-    }\r\n-  };\r\n+//   const handleVideoClick = () => {\r\n+//     if (showVideo) {\r\n+//       if (videoRef.current) {\r\n+//         videoRef.current.pause();\r\n+//       }\r\n+//     } else {\r\n+//       if (videoRef.current) {\r\n+//         videoRef.current.play();\r\n+//       }\r\n+//     }\r\n+//     setShowVideo(!showVideo);\r\n+//   };\r\n \r\n-  const handleMouseEnter = () => {\r\n-    // Start a timer to check for mouseover duration\r\n-    const mouseOverTimer = setTimeout(() => {\r\n-      if (!showVideo) {\r\n-        handleVideoClick();\r\n-      }\r\n-    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+//   const handleMuteToggle = () => {\r\n+//     if (videoRef.current) {\r\n+//       videoRef.current.muted = !videoRef.current.muted;\r\n+//       setIsMuted(videoRef.current.muted);\r\n+//     }\r\n+//   };\r\n \r\n-    setIsMouseOver(true);\r\n+//   const handleMouseEnter = () => {\r\n+//     // Start a timer to check for mouseover duration\r\n+//     const mouseOverTimer = setTimeout(() => {\r\n+//       if (!showVideo) {\r\n+//         handleVideoClick();\r\n+//       }\r\n+//     }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n \r\n-    return () => {\r\n-      // Clear the timer when the mouse leaves the element\r\n-      clearTimeout(mouseOverTimer);\r\n-      setIsMouseOver(false);\r\n-    };\r\n-  };\r\n+//     setIsMouseOver(true);\r\n \r\n-  useEffect(() => {\r\n-    const videoElement = videoRef.current;\r\n+//     return () => {\r\n+//       // Clear the timer when the mouse leaves the element\r\n+//       clearTimeout(mouseOverTimer);\r\n+//       setIsMouseOver(false);\r\n+//     };\r\n+//   };\r\n \r\n-    if (showVideo && videoElement) {\r\n-      videoElement.play();\r\n-      videoElement.addEventListener('ended', handleVideoEnd);\r\n+//   useEffect(() => {\r\n+//     const videoElement = videoRef.current;\r\n \r\n-      // Create an Intersection Observer\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          const [entry] = entries;\r\n-          if (entry.isIntersecting) {\r\n-            // Element is in the viewport, play the video\r\n-            videoElement.play();\r\n-          } else {\r\n-            // Element is out of the viewport, pause the video\r\n-            videoElement.pause();\r\n-          }\r\n-        },\r\n-        { threshold: 0.5 } // Adjust the threshold as needed\r\n-      );\r\n+//     if (showVideo && videoElement) {\r\n+//       videoElement.play();\r\n+//       videoElement.addEventListener('ended', handleVideoEnd);\r\n \r\n-      // Start observing the video container\r\n-      observer.observe(videoContainerRef.current);\r\n+//       // Create an Intersection Observer\r\n+//       const observer = new IntersectionObserver(\r\n+//         (entries) => {\r\n+//           const [entry] = entries;\r\n+//           if (entry.isIntersecting) {\r\n+//             // Element is in the viewport, play the video\r\n+//             videoElement.play();\r\n+//           } else {\r\n+//             // Element is out of the viewport, pause the video\r\n+//             videoElement.pause();\r\n+//           }\r\n+//         },\r\n+//         { threshold: 0.5 } // Adjust the threshold as needed\r\n+//       );\r\n \r\n-      // Cleanup the observer when the component is unmounted\r\n-      return () => {\r\n-        observer.disconnect();\r\n-      };\r\n-    }\r\n-  }, [showVideo]);\r\n+//       // Start observing the video container\r\n+//       observer.observe(videoContainerRef.current);\r\n \r\n-  const { description, thumbnail, title, longvideo } = feature1;\r\n+//       // Cleanup the observer when the component is unmounted\r\n+//       return () => {\r\n+//         observer.disconnect();\r\n+//       };\r\n+//     }\r\n+//   }, [showVideo]);\r\n \r\n-  const videoRef = useRef(null);\r\n+//   const { description, thumbnail, title, longvideo } = feature1;\r\n \r\n-  useEffect(() => {\r\n-    updateVideoRef('ourProjectsVideo', videoRef);\r\n+//   const videoRef = useRef(null);\r\n \r\n-    return () => {\r\n-      updateVideoRef('ourProjectsVideo', null);\r\n-    };\r\n-  }, [updateVideoRef]);\r\n+//   useEffect(() => {\r\n+//     updateVideoRef('ourProjectsVideo', videoRef);\r\n \r\n-  return (\r\n-    <div\r\n-      className=\"homepage__ourprojects\"\r\n-      onMouseEnter={handleMouseEnter}\r\n-      onMouseLeave={() => setIsMouseOver(false)}\r\n-    >\r\n-      {showVideo ? (\r\n-        <div className=\"video-container\" ref={videoContainerRef}>\r\n-          <video\r\n-            id=\"videoPlayer\"\r\n-            ref={el => videoRefs.current.set('ourProjectsVideo', el)}\r\n-            style={{ width: '99vw' }}\r\n-            onClick={handleVideoClick}\r\n-            muted={isMuted} // Set muted attribute based on state\r\n-          >\r\n-            <source src={longvideo} type=\"video/mp4\" />\r\n-            Your browser does not support the video tag.\r\n-          </video>\r\n-          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-            {isMuted ? (\r\n-              <img src={muteIcon} alt=\"Mute\" />\r\n-            ) : (\r\n-              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      ) : (\r\n-        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n-          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-          <p className=\"overlay-text\">{title}</p>\r\n-          <p className=\"overlay-text-desc\">{description}</p>\r\n-          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+//     return () => {\r\n+//       updateVideoRef('ourProjectsVideo', null);\r\n+//     };\r\n+//   }, [updateVideoRef]);\r\n+\r\n+//   return (\r\n+//     <div\r\n+//       className=\"homepage__ourprojects\"\r\n+//       onMouseEnter={handleMouseEnter}\r\n+//       onMouseLeave={() => setIsMouseOver(false)}\r\n+//     >\r\n+//       {showVideo ? (\r\n+//         <div className=\"video-container\" ref={videoContainerRef}>\r\n+//           <video\r\n+//             id=\"videoPlayer\"\r\n+//             ref={videoRef}\r\n+//             style={{ width: '99vw' }}\r\n+//             onClick={handleVideoClick}\r\n+//             muted={isMuted} // Set muted attribute based on state\r\n+//           >\r\n+//             <source src={longvideo} type=\"video/mp4\" />\r\n+//             Your browser does not support the video tag.\r\n+//           </video>\r\n+//           <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+//             {isMuted ? (\r\n+//               <img src={muteIcon} alt=\"Mute\" />\r\n+//             ) : (\r\n+//               <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+//             )}\r\n+//           </div>\r\n+//         </div>\r\n+//       ) : (\r\n+//         <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+//           <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+//           <p className=\"overlay-text\">{title}</p>\r\n+//           <p className=\"overlay-text-desc\">{description}</p>\r\n+//           {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n           \r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n+//         </div>\r\n+//       )}\r\n+//     </div>\r\n+//   );\r\n+// };\r\n \r\n-export default Ourprojects;\r\n+// export default Ourprojects;\r\n+\r\n+\r\n import React, { useState, useEffect, useRef } from 'react';\r\n-\r\n-// Import your custom SVG icons\r\n import muteIcon from '../../assets/mute.svg';\r\n import volumeUpIcon from '../../assets/volume-up.svg';\r\n \r\n-const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects }) => {\r\n   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-\r\n+  const videoRefs = useRef(new Map());\r\n   const [showVideo, setShowVideo] = useState(false);\r\n-  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n-  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+  const [isMuted, setIsMuted] = useState(true);\r\n+  const videoRef = useRef(null);\r\n \r\n-  const videoContainerRef = useRef(null);\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef.current);\r\n \r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n   const handleVideoEnd = () => {\r\n     setShowVideo(false);\r\n   };\r\n \r\n   const handleVideoClick = () => {\r\n-    if (showVideo) {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.pause();\r\n-      }\r\n-    } else {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.play();\r\n-      }\r\n+    const videoElement = videoRef.current;\r\n+    if (showVideo && videoElement) {\r\n+      videoElement.pause();\r\n+    } else if (videoElement) {\r\n+      videoElement.play();\r\n     }\r\n     setShowVideo(!showVideo);\r\n   };\r\n \r\n   const handleMuteToggle = () => {\r\n-    if (videoRef.current) {\r\n-      videoRef.current.muted = !videoRef.current.muted;\r\n-      setIsMuted(videoRef.current.muted);\r\n+    const videoElement = videoRef.current;\r\n+    if (videoElement) {\r\n+      videoElement.muted = !videoElement.muted;\r\n+      setIsMuted(videoElement.muted);\r\n     }\r\n   };\r\n \r\n-  const handleMouseEnter = () => {\r\n-    // Start a timer to check for mouseover duration\r\n-    const mouseOverTimer = setTimeout(() => {\r\n-      if (!showVideo) {\r\n-        handleVideoClick();\r\n-      }\r\n-    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n-\r\n-    setIsMouseOver(true);\r\n-\r\n-    return () => {\r\n-      // Clear the timer when the mouse leaves the element\r\n-      clearTimeout(mouseOverTimer);\r\n-      setIsMouseOver(false);\r\n-    };\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const videoElement = videoRef.current;\r\n-\r\n-    if (showVideo && videoElement) {\r\n-      videoElement.play();\r\n-      videoElement.addEventListener('ended', handleVideoEnd);\r\n-\r\n-      // Create an Intersection Observer\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          const [entry] = entries;\r\n-          if (entry.isIntersecting) {\r\n-            // Element is in the viewport, play the video\r\n-            videoElement.play();\r\n-          } else {\r\n-            // Element is out of the viewport, pause the video\r\n-            videoElement.pause();\r\n-          }\r\n-        },\r\n-        { threshold: 0.5 } // Adjust the threshold as needed\r\n-      );\r\n-\r\n-      // Start observing the video container\r\n-      observer.observe(videoContainerRef.current);\r\n-\r\n-      // Cleanup the observer when the component is unmounted\r\n-      return () => {\r\n-        observer.disconnect();\r\n-      };\r\n-    }\r\n-  }, [showVideo]);\r\n-\r\n   const { description, thumbnail, title, longvideo } = feature1;\r\n \r\n-  const videoRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    updateVideoRef('ourProjectsVideo', videoRef);\r\n-\r\n-    return () => {\r\n-      updateVideoRef('ourProjectsVideo', null);\r\n-    };\r\n-  }, [updateVideoRef]);\r\n-\r\n   return (\r\n-    <div\r\n-      className=\"homepage__ourprojects\"\r\n-      onMouseEnter={handleMouseEnter}\r\n-      onMouseLeave={() => setIsMouseOver(false)}\r\n-    >\r\n+    <div className=\"homepage__ourprojects\" onMouseEnter={handleVideoClick} onMouseLeave={handleVideoClick}>\r\n       {showVideo ? (\r\n-        <div className=\"video-container\" ref={videoContainerRef}>\r\n+        <div>\r\n           <video\r\n-            id=\"videoPlayer\"\r\n-            ref={el => videoRefs.current.set('ourProjectsVideo', el)}\r\n+            ref={videoRef}\r\n             style={{ width: '99vw' }}\r\n             onClick={handleVideoClick}\r\n-            muted={isMuted} // Set muted attribute based on state\r\n+            onEnded={handleVideoEnd}\r\n+            muted={isMuted}\r\n           >\r\n             <source src={longvideo} type=\"video/mp4\" />\r\n             Your browser does not support the video tag.\r\n           </video>\r\n@@ -268,10 +209,8 @@\n         <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n           <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n           <p className=\"overlay-text\">{title}</p>\r\n           <p className=\"overlay-text-desc\">{description}</p>\r\n-          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n-          \r\n         </div>\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1700719055549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+// import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// // Import your custom SVG icons\r\n+// import muteIcon from '../../assets/mute.svg';\r\n+// import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+// const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+//   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+\r\n+//   const [showVideo, setShowVideo] = useState(false);\r\n+//   const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+//   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+//   const videoContainerRef = useRef(null);\r\n+\r\n+//   const handleVideoEnd = () => {\r\n+//     setShowVideo(false);\r\n+//   };\r\n+\r\n+//   const handleVideoClick = () => {\r\n+//     if (showVideo) {\r\n+//       if (videoRef.current) {\r\n+//         videoRef.current.pause();\r\n+//       }\r\n+//     } else {\r\n+//       if (videoRef.current) {\r\n+//         videoRef.current.play();\r\n+//       }\r\n+//     }\r\n+//     setShowVideo(!showVideo);\r\n+//   };\r\n+\r\n+//   const handleMuteToggle = () => {\r\n+//     if (videoRef.current) {\r\n+//       videoRef.current.muted = !videoRef.current.muted;\r\n+//       setIsMuted(videoRef.current.muted);\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handleMouseEnter = () => {\r\n+//     // Start a timer to check for mouseover duration\r\n+//     const mouseOverTimer = setTimeout(() => {\r\n+//       if (!showVideo) {\r\n+//         handleVideoClick();\r\n+//       }\r\n+//     }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+//     setIsMouseOver(true);\r\n+\r\n+//     return () => {\r\n+//       // Clear the timer when the mouse leaves the element\r\n+//       clearTimeout(mouseOverTimer);\r\n+//       setIsMouseOver(false);\r\n+//     };\r\n+//   };\r\n+\r\n+//   useEffect(() => {\r\n+//     const videoElement = videoRef.current;\r\n+\r\n+//     if (showVideo && videoElement) {\r\n+//       videoElement.play();\r\n+//       videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+//       // Create an Intersection Observer\r\n+//       const observer = new IntersectionObserver(\r\n+//         (entries) => {\r\n+//           const [entry] = entries;\r\n+//           if (entry.isIntersecting) {\r\n+//             // Element is in the viewport, play the video\r\n+//             videoElement.play();\r\n+//           } else {\r\n+//             // Element is out of the viewport, pause the video\r\n+//             videoElement.pause();\r\n+//           }\r\n+//         },\r\n+//         { threshold: 0.5 } // Adjust the threshold as needed\r\n+//       );\r\n+\r\n+//       // Start observing the video container\r\n+//       observer.observe(videoContainerRef.current);\r\n+\r\n+//       // Cleanup the observer when the component is unmounted\r\n+//       return () => {\r\n+//         observer.disconnect();\r\n+//       };\r\n+//     }\r\n+//   }, [showVideo]);\r\n+\r\n+//   const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+//   const videoRef = useRef(null);\r\n+\r\n+//   useEffect(() => {\r\n+//     updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+//     return () => {\r\n+//       updateVideoRef('ourProjectsVideo', null);\r\n+//     };\r\n+//   }, [updateVideoRef]);\r\n+\r\n+//   return (\r\n+//     <div\r\n+//       className=\"homepage__ourprojects\"\r\n+//       onMouseEnter={handleMouseEnter}\r\n+//       onMouseLeave={() => setIsMouseOver(false)}\r\n+//     >\r\n+//       {showVideo ? (\r\n+//         <div className=\"video-container\" ref={videoContainerRef}>\r\n+//           <video\r\n+//             id=\"videoPlayer\"\r\n+//             ref={videoRef}\r\n+//             style={{ width: '99vw' }}\r\n+//             onClick={handleVideoClick}\r\n+//             muted={isMuted} // Set muted attribute based on state\r\n+//           >\r\n+//             <source src={longvideo} type=\"video/mp4\" />\r\n+//             Your browser does not support the video tag.\r\n+//           </video>\r\n+//           <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+//             {isMuted ? (\r\n+//               <img src={muteIcon} alt=\"Mute\" />\r\n+//             ) : (\r\n+//               <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+//             )}\r\n+//           </div>\r\n+//         </div>\r\n+//       ) : (\r\n+//         <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+//           <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+//           <p className=\"overlay-text\">{title}</p>\r\n+//           <p className=\"overlay-text-desc\">{description}</p>\r\n+//           {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+//         </div>\r\n+//       )}\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// export default Ourprojects;\r\n+\r\n+\r\n+import React, { useState, useEffect, useRef } from 'react';\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects }) => {\r\n+  const [feature1] = homepage_ourprojects;\r\n+  const videoRef = useRef(null);\r\n+  const mouseOverTimer = useRef(null); // Timer for hover delay\r\n+  const [isMuted, setIsMuted] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef.current);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    clearTimeout(mouseOverTimer.current); // Clear any existing timer\r\n+\r\n+    mouseOverTimer.current = setTimeout(() => {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }, 4000); // 4 seconds delay before playing the video\r\n+  };\r\n+\r\n+  const handleMouseLeave = () => {\r\n+    clearTimeout(mouseOverTimer.current); // Clear the timer\r\n+    if (videoRef.current) {\r\n+      videoRef.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={handleMouseLeave}\r\n+    >\r\n+      <div className=\"video-container\">\r\n+        <video\r\n+          ref={videoRef}\r\n+          style={{ width: '99vw' }}\r\n+          onEnded={handleVideoEnd}\r\n+          muted={isMuted}\r\n+        >\r\n+          <source src={longvideo} type=\"video/mp4\" />\r\n+          Your browser does not support the video tag.\r\n+        </video>\r\n+        <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+          {isMuted ? (\r\n+            <img src={muteIcon} alt=\"Mute\" />\r\n+          ) : (\r\n+            <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+          )}\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"banner-image-container\">\r\n+        <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+        <p className=\"overlay-text\">{title}</p>\r\n+        <p className=\"overlay-text-desc\">{description}</p>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n"
                },
                {
                    "date": 1700719062456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+// import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// // Import your custom SVG icons\r\n+// import muteIcon from '../../assets/mute.svg';\r\n+// import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+// const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+//   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+\r\n+//   const [showVideo, setShowVideo] = useState(false);\r\n+//   const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+//   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+//   const videoContainerRef = useRef(null);\r\n+\r\n+//   const handleVideoEnd = () => {\r\n+//     setShowVideo(false);\r\n+//   };\r\n+\r\n+//   const handleVideoClick = () => {\r\n+//     if (showVideo) {\r\n+//       if (videoRef.current) {\r\n+//         videoRef.current.pause();\r\n+//       }\r\n+//     } else {\r\n+//       if (videoRef.current) {\r\n+//         videoRef.current.play();\r\n+//       }\r\n+//     }\r\n+//     setShowVideo(!showVideo);\r\n+//   };\r\n+\r\n+//   const handleMuteToggle = () => {\r\n+//     if (videoRef.current) {\r\n+//       videoRef.current.muted = !videoRef.current.muted;\r\n+//       setIsMuted(videoRef.current.muted);\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handleMouseEnter = () => {\r\n+//     // Start a timer to check for mouseover duration\r\n+//     const mouseOverTimer = setTimeout(() => {\r\n+//       if (!showVideo) {\r\n+//         handleVideoClick();\r\n+//       }\r\n+//     }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+//     setIsMouseOver(true);\r\n+\r\n+//     return () => {\r\n+//       // Clear the timer when the mouse leaves the element\r\n+//       clearTimeout(mouseOverTimer);\r\n+//       setIsMouseOver(false);\r\n+//     };\r\n+//   };\r\n+\r\n+//   useEffect(() => {\r\n+//     const videoElement = videoRef.current;\r\n+\r\n+//     if (showVideo && videoElement) {\r\n+//       videoElement.play();\r\n+//       videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+//       // Create an Intersection Observer\r\n+//       const observer = new IntersectionObserver(\r\n+//         (entries) => {\r\n+//           const [entry] = entries;\r\n+//           if (entry.isIntersecting) {\r\n+//             // Element is in the viewport, play the video\r\n+//             videoElement.play();\r\n+//           } else {\r\n+//             // Element is out of the viewport, pause the video\r\n+//             videoElement.pause();\r\n+//           }\r\n+//         },\r\n+//         { threshold: 0.5 } // Adjust the threshold as needed\r\n+//       );\r\n+\r\n+//       // Start observing the video container\r\n+//       observer.observe(videoContainerRef.current);\r\n+\r\n+//       // Cleanup the observer when the component is unmounted\r\n+//       return () => {\r\n+//         observer.disconnect();\r\n+//       };\r\n+//     }\r\n+//   }, [showVideo]);\r\n+\r\n+//   const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+//   const videoRef = useRef(null);\r\n+\r\n+//   useEffect(() => {\r\n+//     updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+//     return () => {\r\n+//       updateVideoRef('ourProjectsVideo', null);\r\n+//     };\r\n+//   }, [updateVideoRef]);\r\n+\r\n+//   return (\r\n+//     <div\r\n+//       className=\"homepage__ourprojects\"\r\n+//       onMouseEnter={handleMouseEnter}\r\n+//       onMouseLeave={() => setIsMouseOver(false)}\r\n+//     >\r\n+//       {showVideo ? (\r\n+//         <div className=\"video-container\" ref={videoContainerRef}>\r\n+//           <video\r\n+//             id=\"videoPlayer\"\r\n+//             ref={videoRef}\r\n+//             style={{ width: '99vw' }}\r\n+//             onClick={handleVideoClick}\r\n+//             muted={isMuted} // Set muted attribute based on state\r\n+//           >\r\n+//             <source src={longvideo} type=\"video/mp4\" />\r\n+//             Your browser does not support the video tag.\r\n+//           </video>\r\n+//           <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+//             {isMuted ? (\r\n+//               <img src={muteIcon} alt=\"Mute\" />\r\n+//             ) : (\r\n+//               <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+//             )}\r\n+//           </div>\r\n+//         </div>\r\n+//       ) : (\r\n+//         <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+//           <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+//           <p className=\"overlay-text\">{title}</p>\r\n+//           <p className=\"overlay-text-desc\">{description}</p>\r\n+//           {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+//         </div>\r\n+//       )}\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// export default Ourprojects;\r\n+\r\n+\r\n+import React, { useState, useEffect, useRef } from 'react';\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects }) => {\r\n+  const [feature1] = homepage_ourprojects;\r\n+  const videoRef = useRef(null);\r\n+  const mouseOverTimer = useRef(null); // Timer for hover delay\r\n+  const [isMuted, setIsMuted] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef.current);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    clearTimeout(mouseOverTimer.current); // Clear any existing timer\r\n+\r\n+    mouseOverTimer.current = setTimeout(() => {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }, 4000); // 4 seconds delay before playing the video\r\n+  };\r\n+\r\n+  const handleMouseLeave = () => {\r\n+    clearTimeout(mouseOverTimer.current); // Clear the timer\r\n+    if (videoRef.current) {\r\n+      videoRef.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={handleMouseLeave}\r\n+    >\r\n+      <div className=\"video-container\">\r\n+        <video\r\n+          ref={videoRef}\r\n+          style={{ width: '99vw' }}\r\n+          onEnded={handleVideoEnd}\r\n+          muted={isMuted}\r\n+        >\r\n+          <source src={longvideo} type=\"video/mp4\" />\r\n+          Your browser does not support the video tag.\r\n+        </video>\r\n+        <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+          {isMuted ? (\r\n+            <img src={muteIcon} alt=\"Mute\" />\r\n+          ) : (\r\n+            <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+          )}\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"banner-image-container\">\r\n+        <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+        <p className=\"overlay-text\">{title}</p>\r\n+        <p className=\"overlay-text-desc\">{description}</p>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n"
                },
                {
                    "date": 1700719104132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// Import your custom SVG icons\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+\r\n+  const [showVideo, setShowVideo] = useState(false);\r\n+  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+  const videoContainerRef = useRef(null);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    setShowVideo(false);\r\n+  };\r\n+\r\n+  const handleVideoClick = () => {\r\n+    if (showVideo) {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.pause();\r\n+      }\r\n+    } else {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }\r\n+    setShowVideo(!showVideo);\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    // Start a timer to check for mouseover duration\r\n+    const mouseOverTimer = setTimeout(() => {\r\n+      if (!showVideo) {\r\n+        handleVideoClick();\r\n+      }\r\n+    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+    setIsMouseOver(true);\r\n+\r\n+    return () => {\r\n+      // Clear the timer when the mouse leaves the element\r\n+      clearTimeout(mouseOverTimer);\r\n+      setIsMouseOver(false);\r\n+    };\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const videoElement = videoRef.current;\r\n+\r\n+    if (showVideo && videoElement) {\r\n+      videoElement.play();\r\n+      videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+      // Create an Intersection Observer\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          const [entry] = entries;\r\n+          if (entry.isIntersecting) {\r\n+            // Element is in the viewport, play the video\r\n+            videoElement.play();\r\n+          } else {\r\n+            // Element is out of the viewport, pause the video\r\n+            videoElement.pause();\r\n+          }\r\n+        },\r\n+        { threshold: 0.5 } // Adjust the threshold as needed\r\n+      );\r\n+\r\n+      // Start observing the video container\r\n+      observer.observe(videoContainerRef.current);\r\n+\r\n+      // Cleanup the observer when the component is unmounted\r\n+      return () => {\r\n+        observer.disconnect();\r\n+      };\r\n+    }\r\n+  }, [showVideo]);\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  const videoRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={() => setIsMouseOver(false)}\r\n+    >\r\n+      {showVideo ? (\r\n+        <div className=\"video-container\" ref={videoContainerRef}>\r\n+          <video\r\n+            id=\"videoPlayer\"\r\n+            ref={videoRef}\r\n+            style={{ width: '99vw' }}\r\n+            onClick={handleVideoClick}\r\n+            muted={isMuted} // Set muted attribute based on state\r\n+          >\r\n+            <source src={longvideo} type=\"video/mp4\" />\r\n+            Your browser does not support the video tag.\r\n+          </video>\r\n+          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+            {isMuted ? (\r\n+              <img src={muteIcon} alt=\"Mute\" />\r\n+            ) : (\r\n+              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      ) : (\r\n+        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+          <p className=\"overlay-text\">{title}</p>\r\n+          <p className=\"overlay-text-desc\">{description}</p>\r\n+          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n+\r\n+\r\n"
                },
                {
                    "date": 1700719358132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,146 +1,4 @@\n-import React, { useState, useEffect, useRef } from 'react';\r\n-\r\n-// Import your custom SVG icons\r\n-import muteIcon from '../../assets/mute.svg';\r\n-import volumeUpIcon from '../../assets/volume-up.svg';\r\n-\r\n-const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n-  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-\r\n-  const [showVideo, setShowVideo] = useState(false);\r\n-  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n-  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n-\r\n-  const videoContainerRef = useRef(null);\r\n-\r\n-  const handleVideoEnd = () => {\r\n-    setShowVideo(false);\r\n-  };\r\n-\r\n-  const handleVideoClick = () => {\r\n-    if (showVideo) {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.pause();\r\n-      }\r\n-    } else {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.play();\r\n-      }\r\n-    }\r\n-    setShowVideo(!showVideo);\r\n-  };\r\n-\r\n-  const handleMuteToggle = () => {\r\n-    if (videoRef.current) {\r\n-      videoRef.current.muted = !videoRef.current.muted;\r\n-      setIsMuted(videoRef.current.muted);\r\n-    }\r\n-  };\r\n-\r\n-  const handleMouseEnter = () => {\r\n-    // Start a timer to check for mouseover duration\r\n-    const mouseOverTimer = setTimeout(() => {\r\n-      if (!showVideo) {\r\n-        handleVideoClick();\r\n-      }\r\n-    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n-\r\n-    setIsMouseOver(true);\r\n-\r\n-    return () => {\r\n-      // Clear the timer when the mouse leaves the element\r\n-      clearTimeout(mouseOverTimer);\r\n-      setIsMouseOver(false);\r\n-    };\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const videoElement = videoRef.current;\r\n-\r\n-    if (showVideo && videoElement) {\r\n-      videoElement.play();\r\n-      videoElement.addEventListener('ended', handleVideoEnd);\r\n-\r\n-      // Create an Intersection Observer\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          const [entry] = entries;\r\n-          if (entry.isIntersecting) {\r\n-            // Element is in the viewport, play the video\r\n-            videoElement.play();\r\n-          } else {\r\n-            // Element is out of the viewport, pause the video\r\n-            videoElement.pause();\r\n-          }\r\n-        },\r\n-        { threshold: 0.5 } // Adjust the threshold as needed\r\n-      );\r\n-\r\n-      // Start observing the video container\r\n-      observer.observe(videoContainerRef.current);\r\n-\r\n-      // Cleanup the observer when the component is unmounted\r\n-      return () => {\r\n-        observer.disconnect();\r\n-      };\r\n-    }\r\n-  }, [showVideo]);\r\n-\r\n-  const { description, thumbnail, title, longvideo } = feature1;\r\n-\r\n-  const videoRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    updateVideoRef('ourProjectsVideo', videoRef);\r\n-\r\n-    return () => {\r\n-      updateVideoRef('ourProjectsVideo', null);\r\n-    };\r\n-  }, [updateVideoRef]);\r\n-\r\n-  return (\r\n-    <div\r\n-      className=\"homepage__ourprojects\"\r\n-      onMouseEnter={handleMouseEnter}\r\n-      onMouseLeave={() => setIsMouseOver(false)}\r\n-    >\r\n-      {showVideo ? (\r\n-        <div className=\"video-container\" ref={videoContainerRef}>\r\n-          <video\r\n-            id=\"videoPlayer\"\r\n-            ref={videoRef}\r\n-            style={{ width: '99vw' }}\r\n-            onClick={handleVideoClick}\r\n-            muted={isMuted} // Set muted attribute based on state\r\n-          >\r\n-            <source src={longvideo} type=\"video/mp4\" />\r\n-            Your browser does not support the video tag.\r\n-          </video>\r\n-          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-            {isMuted ? (\r\n-              <img src={muteIcon} alt=\"Mute\" />\r\n-            ) : (\r\n-              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      ) : (\r\n-        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n-          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-          <p className=\"overlay-text\">{title}</p>\r\n-          <p className=\"overlay-text-desc\">{description}</p>\r\n-          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n-          \r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Ourprojects;\r\n-\r\n-\r\n // import React, { useState, useEffect, useRef } from 'react';\r\n \r\n // // Import your custom SVG icons\r\n // import muteIcon from '../../assets/mute.svg';\r\n@@ -288,249 +146,45 @@\n \r\n const Ourprojects = ({ updateVideoRef, homepage_ourprojects }) => {\r\n   const [feature1] = homepage_ourprojects;\r\n   const videoRef = useRef(null);\r\n-  const mouseOverTimer = useRef(null); // Timer for hover delay\r\n+  const [showVideo, setShowVideo] = useState(false);\r\n   const [isMuted, setIsMuted] = useState(true);\r\n \r\n-  useEffect(() => {\r\n-    updateVideoRef('ourProjectsVideo', videoRef.current);\r\n-\r\n-    return () => {\r\n-      updateVideoRef('ourProjectsVideo', null);\r\n-    };\r\n-  }, [updateVideoRef]);\r\n-\r\n-  const handleVideoEnd = () => {\r\n+  const toggleVideoPlayback = (shouldPlay) => {\r\n     if (videoRef.current) {\r\n-      videoRef.current.pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleMuteToggle = () => {\r\n-    if (videoRef.current) {\r\n-      videoRef.current.muted = !videoRef.current.muted;\r\n-      setIsMuted(videoRef.current.muted);\r\n-    }\r\n-  };\r\n-\r\n-  const handleMouseEnter = () => {\r\n-    clearTimeout(mouseOverTimer.current); // Clear any existing timer\r\n-\r\n-    mouseOverTimer.current = setTimeout(() => {\r\n-      if (videoRef.current) {\r\n+      if (shouldPlay) {\r\n         videoRef.current.play();\r\n+        setShowVideo(true);\r\n+      } else {\r\n+        videoRef.current.pause();\r\n+        setShowVideo(false);\r\n       }\r\n-    }, 4000); // 4 seconds delay before playing the video\r\n+    }\r\n   };\r\n \r\n-  const handleMouseLeave = () => {\r\n-    clearTimeout(mouseOverTimer.current); // Clear the timer\r\n-    if (videoRef.current) {\r\n-      videoRef.current.pause();\r\n+  // Function to handle external play/pause commands (e.g., from a voice command)\r\n+  const handleExternalCommand = (command) => {\r\n+    if (command === 'play') {\r\n+      toggleVideoPlayback(true);\r\n+    } else if (command === 'pause') {\r\n+      toggleVideoPlayback(false);\r\n     }\r\n   };\r\n \r\n-  const { description, thumbnail, title, longvideo } = feature1;\r\n-\r\n-  return (\r\n-    <div\r\n-      className=\"homepage__ourprojects\"\r\n-      onMouseEnter={handleMouseEnter}\r\n-      onMouseLeave={handleMouseLeave}\r\n-    >\r\n-      <div className=\"video-container\">\r\n-        <video\r\n-          ref={videoRef}\r\n-          style={{ width: '99vw' }}\r\n-          onEnded={handleVideoEnd}\r\n-          muted={isMuted}\r\n-        >\r\n-          <source src={longvideo} type=\"video/mp4\" />\r\n-          Your browser does not support the video tag.\r\n-        </video>\r\n-        <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-          {isMuted ? (\r\n-            <img src={muteIcon} alt=\"Mute\" />\r\n-          ) : (\r\n-            <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-          )}\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"banner-image-container\">\r\n-        <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-        <p className=\"overlay-text\">{title}</p>\r\n-        <p className=\"overlay-text-desc\">{description}</p>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Ourprojects;\r\n-// import React, { useState, useEffect, useRef } from 'react';\r\n-\r\n-// // Import your custom SVG icons\r\n-// import muteIcon from '../../assets/mute.svg';\r\n-// import volumeUpIcon from '../../assets/volume-up.svg';\r\n-\r\n-// const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n-//   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-\r\n-//   const [showVideo, setShowVideo] = useState(false);\r\n-//   const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n-//   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n-\r\n-//   const videoContainerRef = useRef(null);\r\n-\r\n-//   const handleVideoEnd = () => {\r\n-//     setShowVideo(false);\r\n-//   };\r\n-\r\n-//   const handleVideoClick = () => {\r\n-//     if (showVideo) {\r\n-//       if (videoRef.current) {\r\n-//         videoRef.current.pause();\r\n-//       }\r\n-//     } else {\r\n-//       if (videoRef.current) {\r\n-//         videoRef.current.play();\r\n-//       }\r\n-//     }\r\n-//     setShowVideo(!showVideo);\r\n-//   };\r\n-\r\n-//   const handleMuteToggle = () => {\r\n-//     if (videoRef.current) {\r\n-//       videoRef.current.muted = !videoRef.current.muted;\r\n-//       setIsMuted(videoRef.current.muted);\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handleMouseEnter = () => {\r\n-//     // Start a timer to check for mouseover duration\r\n-//     const mouseOverTimer = setTimeout(() => {\r\n-//       if (!showVideo) {\r\n-//         handleVideoClick();\r\n-//       }\r\n-//     }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n-\r\n-//     setIsMouseOver(true);\r\n-\r\n-//     return () => {\r\n-//       // Clear the timer when the mouse leaves the element\r\n-//       clearTimeout(mouseOverTimer);\r\n-//       setIsMouseOver(false);\r\n-//     };\r\n-//   };\r\n-\r\n-//   useEffect(() => {\r\n-//     const videoElement = videoRef.current;\r\n-\r\n-//     if (showVideo && videoElement) {\r\n-//       videoElement.play();\r\n-//       videoElement.addEventListener('ended', handleVideoEnd);\r\n-\r\n-//       // Create an Intersection Observer\r\n-//       const observer = new IntersectionObserver(\r\n-//         (entries) => {\r\n-//           const [entry] = entries;\r\n-//           if (entry.isIntersecting) {\r\n-//             // Element is in the viewport, play the video\r\n-//             videoElement.play();\r\n-//           } else {\r\n-//             // Element is out of the viewport, pause the video\r\n-//             videoElement.pause();\r\n-//           }\r\n-//         },\r\n-//         { threshold: 0.5 } // Adjust the threshold as needed\r\n-//       );\r\n-\r\n-//       // Start observing the video container\r\n-//       observer.observe(videoContainerRef.current);\r\n-\r\n-//       // Cleanup the observer when the component is unmounted\r\n-//       return () => {\r\n-//         observer.disconnect();\r\n-//       };\r\n-//     }\r\n-//   }, [showVideo]);\r\n-\r\n-//   const { description, thumbnail, title, longvideo } = feature1;\r\n-\r\n-//   const videoRef = useRef(null);\r\n-\r\n-//   useEffect(() => {\r\n-//     updateVideoRef('ourProjectsVideo', videoRef);\r\n-\r\n-//     return () => {\r\n-//       updateVideoRef('ourProjectsVideo', null);\r\n-//     };\r\n-//   }, [updateVideoRef]);\r\n-\r\n-//   return (\r\n-//     <div\r\n-//       className=\"homepage__ourprojects\"\r\n-//       onMouseEnter={handleMouseEnter}\r\n-//       onMouseLeave={() => setIsMouseOver(false)}\r\n-//     >\r\n-//       {showVideo ? (\r\n-//         <div className=\"video-container\" ref={videoContainerRef}>\r\n-//           <video\r\n-//             id=\"videoPlayer\"\r\n-//             ref={videoRef}\r\n-//             style={{ width: '99vw' }}\r\n-//             onClick={handleVideoClick}\r\n-//             muted={isMuted} // Set muted attribute based on state\r\n-//           >\r\n-//             <source src={longvideo} type=\"video/mp4\" />\r\n-//             Your browser does not support the video tag.\r\n-//           </video>\r\n-//           <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-//             {isMuted ? (\r\n-//               <img src={muteIcon} alt=\"Mute\" />\r\n-//             ) : (\r\n-//               <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-//             )}\r\n-//           </div>\r\n-//         </div>\r\n-//       ) : (\r\n-//         <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n-//           <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-//           <p className=\"overlay-text\">{title}</p>\r\n-//           <p className=\"overlay-text-desc\">{description}</p>\r\n-//           {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n-          \r\n-//         </div>\r\n-//       )}\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// export default Ourprojects;\r\n-\r\n-\r\n-import React, { useState, useEffect, useRef } from 'react';\r\n-import muteIcon from '../../assets/mute.svg';\r\n-import volumeUpIcon from '../../assets/volume-up.svg';\r\n-\r\n-const Ourprojects = ({ updateVideoRef, homepage_ourprojects }) => {\r\n-  const [feature1] = homepage_ourprojects;\r\n-  const videoRef = useRef(null);\r\n-  const mouseOverTimer = useRef(null); // Timer for hover delay\r\n-  const [isMuted, setIsMuted] = useState(true);\r\n-\r\n   useEffect(() => {\r\n-    updateVideoRef('ourProjectsVideo', videoRef.current);\r\n+    // Listen for external commands to control video playback\r\n+    window.addEventListener('externalPlayCommand', () => handleExternalCommand('play'));\r\n+    window.addEventListener('externalPauseCommand', () => handleExternalCommand('pause'));\r\n \r\n     return () => {\r\n-      updateVideoRef('ourProjectsVideo', null);\r\n+      window.removeEventListener('externalPlayCommand', () => handleExternalCommand('play'));\r\n+      window.removeEventListener('externalPauseCommand', () => handleExternalCommand('pause'));\r\n     };\r\n-  }, [updateVideoRef]);\r\n+  }, []);\r\n \r\n   const handleVideoEnd = () => {\r\n-    if (videoRef.current) {\r\n-      videoRef.current.pause();\r\n-    }\r\n+    setShowVideo(false);\r\n   };\r\n \r\n   const handleMuteToggle = () => {\r\n     if (videoRef.current) {\r\n@@ -538,254 +192,25 @@\n       setIsMuted(videoRef.current.muted);\r\n     }\r\n   };\r\n \r\n-  const handleMouseEnter = () => {\r\n-    clearTimeout(mouseOverTimer.current); // Clear any existing timer\r\n-\r\n-    mouseOverTimer.current = setTimeout(() => {\r\n-      if (videoRef.current) {\r\n-        videoRef.current.play();\r\n-      }\r\n-    }, 4000); // 4 seconds delay before playing the video\r\n-  };\r\n-\r\n-  const handleMouseLeave = () => {\r\n-    clearTimeout(mouseOverTimer.current); // Clear the timer\r\n-    if (videoRef.current) {\r\n-      videoRef.current.pause();\r\n-    }\r\n-  };\r\n-\r\n   const { description, thumbnail, title, longvideo } = feature1;\r\n \r\n-  return (\r\n-    <div\r\n-      className=\"homepage__ourprojects\"\r\n-      onMouseEnter={handleMouseEnter}\r\n-      onMouseLeave={handleMouseLeave}\r\n-    >\r\n-      <div className=\"video-container\">\r\n-        <video\r\n-          ref={videoRef}\r\n-          style={{ width: '99vw' }}\r\n-          onEnded={handleVideoEnd}\r\n-          muted={isMuted}\r\n-        >\r\n-          <source src={longvideo} type=\"video/mp4\" />\r\n-          Your browser does not support the video tag.\r\n-        </video>\r\n-        <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-          {isMuted ? (\r\n-            <img src={muteIcon} alt=\"Mute\" />\r\n-          ) : (\r\n-            <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-          )}\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"banner-image-container\">\r\n-        <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-        <p className=\"overlay-text\">{title}</p>\r\n-        <p className=\"overlay-text-desc\">{description}</p>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Ourprojects;\r\n-// import React, { useState, useEffect, useRef } from 'react';\r\n-\r\n-// // Import your custom SVG icons\r\n-// import muteIcon from '../../assets/mute.svg';\r\n-// import volumeUpIcon from '../../assets/volume-up.svg';\r\n-\r\n-// const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n-//   const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-\r\n-//   const [showVideo, setShowVideo] = useState(false);\r\n-//   const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n-//   const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n-\r\n-//   const videoContainerRef = useRef(null);\r\n-\r\n-//   const handleVideoEnd = () => {\r\n-//     setShowVideo(false);\r\n-//   };\r\n-\r\n-//   const handleVideoClick = () => {\r\n-//     if (showVideo) {\r\n-//       if (videoRef.current) {\r\n-//         videoRef.current.pause();\r\n-//       }\r\n-//     } else {\r\n-//       if (videoRef.current) {\r\n-//         videoRef.current.play();\r\n-//       }\r\n-//     }\r\n-//     setShowVideo(!showVideo);\r\n-//   };\r\n-\r\n-//   const handleMuteToggle = () => {\r\n-//     if (videoRef.current) {\r\n-//       videoRef.current.muted = !videoRef.current.muted;\r\n-//       setIsMuted(videoRef.current.muted);\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handleMouseEnter = () => {\r\n-//     // Start a timer to check for mouseover duration\r\n-//     const mouseOverTimer = setTimeout(() => {\r\n-//       if (!showVideo) {\r\n-//         handleVideoClick();\r\n-//       }\r\n-//     }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n-\r\n-//     setIsMouseOver(true);\r\n-\r\n-//     return () => {\r\n-//       // Clear the timer when the mouse leaves the element\r\n-//       clearTimeout(mouseOverTimer);\r\n-//       setIsMouseOver(false);\r\n-//     };\r\n-//   };\r\n-\r\n-//   useEffect(() => {\r\n-//     const videoElement = videoRef.current;\r\n-\r\n-//     if (showVideo && videoElement) {\r\n-//       videoElement.play();\r\n-//       videoElement.addEventListener('ended', handleVideoEnd);\r\n-\r\n-//       // Create an Intersection Observer\r\n-//       const observer = new IntersectionObserver(\r\n-//         (entries) => {\r\n-//           const [entry] = entries;\r\n-//           if (entry.isIntersecting) {\r\n-//             // Element is in the viewport, play the video\r\n-//             videoElement.play();\r\n-//           } else {\r\n-//             // Element is out of the viewport, pause the video\r\n-//             videoElement.pause();\r\n-//           }\r\n-//         },\r\n-//         { threshold: 0.5 } // Adjust the threshold as needed\r\n-//       );\r\n-\r\n-//       // Start observing the video container\r\n-//       observer.observe(videoContainerRef.current);\r\n-\r\n-//       // Cleanup the observer when the component is unmounted\r\n-//       return () => {\r\n-//         observer.disconnect();\r\n-//       };\r\n-//     }\r\n-//   }, [showVideo]);\r\n-\r\n-//   const { description, thumbnail, title, longvideo } = feature1;\r\n-\r\n-//   const videoRef = useRef(null);\r\n-\r\n-//   useEffect(() => {\r\n-//     updateVideoRef('ourProjectsVideo', videoRef);\r\n-\r\n-//     return () => {\r\n-//       updateVideoRef('ourProjectsVideo', null);\r\n-//     };\r\n-//   }, [updateVideoRef]);\r\n-\r\n-//   return (\r\n-//     <div\r\n-//       className=\"homepage__ourprojects\"\r\n-//       onMouseEnter={handleMouseEnter}\r\n-//       onMouseLeave={() => setIsMouseOver(false)}\r\n-//     >\r\n-//       {showVideo ? (\r\n-//         <div className=\"video-container\" ref={videoContainerRef}>\r\n-//           <video\r\n-//             id=\"videoPlayer\"\r\n-//             ref={videoRef}\r\n-//             style={{ width: '99vw' }}\r\n-//             onClick={handleVideoClick}\r\n-//             muted={isMuted} // Set muted attribute based on state\r\n-//           >\r\n-//             <source src={longvideo} type=\"video/mp4\" />\r\n-//             Your browser does not support the video tag.\r\n-//           </video>\r\n-//           <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n-//             {isMuted ? (\r\n-//               <img src={muteIcon} alt=\"Mute\" />\r\n-//             ) : (\r\n-//               <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n-//             )}\r\n-//           </div>\r\n-//         </div>\r\n-//       ) : (\r\n-//         <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n-//           <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n-//           <p className=\"overlay-text\">{title}</p>\r\n-//           <p className=\"overlay-text-desc\">{description}</p>\r\n-//           {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n-          \r\n-//         </div>\r\n-//       )}\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// export default Ourprojects;\r\n-\r\n-\r\n-import React, { useState, useEffect, useRef } from 'react';\r\n-import muteIcon from '../../assets/mute.svg';\r\n-import volumeUpIcon from '../../assets/volume-up.svg';\r\n-\r\n-const Ourprojects = ({ updateVideoRef, homepage_ourprojects }) => {\r\n-  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n-  const videoRefs = useRef(new Map());\r\n-  const [showVideo, setShowVideo] = useState(false);\r\n-  const [isMuted, setIsMuted] = useState(true);\r\n-  const videoRef = useRef(null);\r\n-\r\n   useEffect(() => {\r\n     updateVideoRef('ourProjectsVideo', videoRef.current);\r\n \r\n     return () => {\r\n       updateVideoRef('ourProjectsVideo', null);\r\n     };\r\n   }, [updateVideoRef]);\r\n \r\n-  const handleVideoEnd = () => {\r\n-    setShowVideo(false);\r\n-  };\r\n-\r\n-  const handleVideoClick = () => {\r\n-    const videoElement = videoRef.current;\r\n-    if (showVideo && videoElement) {\r\n-      videoElement.pause();\r\n-    } else if (videoElement) {\r\n-      videoElement.play();\r\n-    }\r\n-    setShowVideo(!showVideo);\r\n-  };\r\n-\r\n-  const handleMuteToggle = () => {\r\n-    const videoElement = videoRef.current;\r\n-    if (videoElement) {\r\n-      videoElement.muted = !videoElement.muted;\r\n-      setIsMuted(videoElement.muted);\r\n-    }\r\n-  };\r\n-\r\n-  const { description, thumbnail, title, longvideo } = feature1;\r\n-\r\n   return (\r\n-    <div className=\"homepage__ourprojects\" onMouseEnter={handleVideoClick} onMouseLeave={handleVideoClick}>\r\n+    <div className=\"homepage__ourprojects\">\r\n       {showVideo ? (\r\n         <div>\r\n           <video\r\n             ref={videoRef}\r\n             style={{ width: '99vw' }}\r\n-            onClick={handleVideoClick}\r\n             onEnded={handleVideoEnd}\r\n             muted={isMuted}\r\n           >\r\n             <source src={longvideo} type=\"video/mp4\" />\r\n@@ -799,9 +224,9 @@\n             )}\r\n           </div>\r\n         </div>\r\n       ) : (\r\n-        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+        <div className=\"banner-image-container\">\r\n           <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n           <p className=\"overlay-text\">{title}</p>\r\n           <p className=\"overlay-text-desc\">{description}</p>\r\n         </div>\r\n"
                },
                {
                    "date": 1700719397641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// Import your custom SVG icons\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+\r\n+  const [showVideo, setShowVideo] = useState(false);\r\n+  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+  const videoContainerRef = useRef(null);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    setShowVideo(false);\r\n+  };\r\n+\r\n+  const handleVideoClick = () => {\r\n+    if (showVideo) {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.pause();\r\n+      }\r\n+    } else {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }\r\n+    setShowVideo(!showVideo);\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    // Start a timer to check for mouseover duration\r\n+    const mouseOverTimer = setTimeout(() => {\r\n+      if (!showVideo) {\r\n+        handleVideoClick();\r\n+      }\r\n+    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+    setIsMouseOver(true);\r\n+\r\n+    return () => {\r\n+      // Clear the timer when the mouse leaves the element\r\n+      clearTimeout(mouseOverTimer);\r\n+      setIsMouseOver(false);\r\n+    };\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const videoElement = videoRef.current;\r\n+\r\n+    if (showVideo && videoElement) {\r\n+      videoElement.play();\r\n+      videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+      // Create an Intersection Observer\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          const [entry] = entries;\r\n+          if (entry.isIntersecting) {\r\n+            // Element is in the viewport, play the video\r\n+            videoElement.play();\r\n+          } else {\r\n+            // Element is out of the viewport, pause the video\r\n+            videoElement.pause();\r\n+          }\r\n+        },\r\n+        { threshold: 0.5 } // Adjust the threshold as needed\r\n+      );\r\n+\r\n+      // Start observing the video container\r\n+      observer.observe(videoContainerRef.current);\r\n+\r\n+      // Cleanup the observer when the component is unmounted\r\n+      return () => {\r\n+        observer.disconnect();\r\n+      };\r\n+    }\r\n+  }, [showVideo]);\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  const videoRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={() => setIsMouseOver(false)}\r\n+    >\r\n+      {showVideo ? (\r\n+        <div className=\"video-container\" ref={videoContainerRef}>\r\n+          <video\r\n+            id=\"videoPlayer\"\r\n+            ref={videoRef}\r\n+            style={{ width: '99vw' }}\r\n+            onClick={handleVideoClick}\r\n+            muted={isMuted} // Set muted attribute based on state\r\n+          >\r\n+            <source src={longvideo} type=\"video/mp4\" />\r\n+            Your browser does not support the video tag.\r\n+          </video>\r\n+          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+            {isMuted ? (\r\n+              <img src={muteIcon} alt=\"Mute\" />\r\n+            ) : (\r\n+              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      ) : (\r\n+        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+          <p className=\"overlay-text\">{title}</p>\r\n+          <p className=\"overlay-text-desc\">{description}</p>\r\n+          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n+\r\n+\r\n"
                },
                {
                    "date": 1700733132928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+\r\n+// Import your custom SVG icons\r\n+import muteIcon from '../../assets/mute.svg';\r\n+import volumeUpIcon from '../../assets/volume-up.svg';\r\n+\r\n+const Ourprojects = ({ updateVideoRef, homepage_ourprojects  }) => {\r\n+  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n+\r\n+  const [showVideo, setShowVideo] = useState(false);\r\n+  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n+  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n+\r\n+  const videoContainerRef = useRef(null);\r\n+\r\n+  const handleVideoEnd = () => {\r\n+    setShowVideo(false);\r\n+  };\r\n+\r\n+  const handleVideoClick = () => {\r\n+    if (showVideo) {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.pause();\r\n+      }\r\n+    } else {\r\n+      if (videoRef.current) {\r\n+        videoRef.current.play();\r\n+      }\r\n+    }\r\n+    setShowVideo(!showVideo);\r\n+  };\r\n+\r\n+  const handleMuteToggle = () => {\r\n+    if (videoRef.current) {\r\n+      videoRef.current.muted = !videoRef.current.muted;\r\n+      setIsMuted(videoRef.current.muted);\r\n+    }\r\n+  };\r\n+\r\n+  const handleMouseEnter = () => {\r\n+    // Start a timer to check for mouseover duration\r\n+    const mouseOverTimer = setTimeout(() => {\r\n+      if (!showVideo) {\r\n+        handleVideoClick();\r\n+      }\r\n+    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n+\r\n+    setIsMouseOver(true);\r\n+\r\n+    return () => {\r\n+      // Clear the timer when the mouse leaves the element\r\n+      clearTimeout(mouseOverTimer);\r\n+      setIsMouseOver(false);\r\n+    };\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const videoElement = videoRef.current;\r\n+\r\n+    if (showVideo && videoElement) {\r\n+      videoElement.play();\r\n+      videoElement.addEventListener('ended', handleVideoEnd);\r\n+\r\n+      // Create an Intersection Observer\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          const [entry] = entries;\r\n+          if (entry.isIntersecting) {\r\n+            // Element is in the viewport, play the video\r\n+            videoElement.play();\r\n+          } else {\r\n+            // Element is out of the viewport, pause the video\r\n+            videoElement.pause();\r\n+          }\r\n+        },\r\n+        { threshold: 0.5 } // Adjust the threshold as needed\r\n+      );\r\n+\r\n+      // Start observing the video container\r\n+      observer.observe(videoContainerRef.current);\r\n+\r\n+      // Cleanup the observer when the component is unmounted\r\n+      return () => {\r\n+        observer.disconnect();\r\n+      };\r\n+    }\r\n+  }, [showVideo]);\r\n+\r\n+  const { description, thumbnail, title, longvideo } = feature1;\r\n+\r\n+  const videoRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    updateVideoRef('ourProjectsVideo', videoRef);\r\n+\r\n+    return () => {\r\n+      updateVideoRef('ourProjectsVideo', null);\r\n+    };\r\n+  }, [updateVideoRef]);\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"homepage__ourprojects\"\r\n+      onMouseEnter={handleMouseEnter}\r\n+      onMouseLeave={() => setIsMouseOver(false)}\r\n+    >\r\n+      {showVideo ? (\r\n+        <div className=\"video-container\" ref={videoContainerRef}>\r\n+          <video\r\n+            id=\"videoPlayer\"\r\n+            ref={videoRef}\r\n+            style={{ width: '99vw' }}\r\n+            onClick={handleVideoClick}\r\n+            muted={isMuted} // Set muted attribute based on state\r\n+          >\r\n+            <source src={longvideo} type=\"video/mp4\" />\r\n+            Your browser does not support the video tag.\r\n+          </video>\r\n+          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n+            {isMuted ? (\r\n+              <img src={muteIcon} alt=\"Mute\" />\r\n+            ) : (\r\n+              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      ) : (\r\n+        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n+          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n+          <p className=\"overlay-text\">{title}</p>\r\n+          <p className=\"overlay-text-desc\">{description}</p>\r\n+          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n+          \r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Ourprojects;\r\n"
                }
            ],
            "date": 1700646400182,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Import your custom SVG icons\r\nimport muteIcon from '../../assets/mute.svg';\r\nimport volumeUpIcon from '../../assets/volume-up.svg';\r\n\r\nconst Ourprojects = ({ homepage_ourprojects, isMuted, setIsMuted  }) => {\r\n  const [feature1, feature2, feature3, feature4, feature5, feature6] = homepage_ourprojects;\r\n\r\n  const [showVideo, setShowVideo] = useState(false);\r\n  const [isMuted, setIsMuted] = useState(true); // Start as muted\r\n  const [isMouseOver, setIsMouseOver] = useState(false); // Add this state\r\n\r\n  const videoRef = useRef(null);\r\n  const videoContainerRef = useRef(null);\r\n\r\n  const handleVideoEnd = () => {\r\n    setShowVideo(false);\r\n  };\r\n\r\n  const handleVideoClick = () => {\r\n    if (showVideo) {\r\n      if (videoRef.current) {\r\n        videoRef.current.pause();\r\n      }\r\n    } else {\r\n      if (videoRef.current) {\r\n        videoRef.current.play();\r\n      }\r\n    }\r\n    setShowVideo(!showVideo);\r\n  };\r\n\r\n  const handleMuteToggle = () => {\r\n    if (videoRef.current) {\r\n      videoRef.current.muted = !videoRef.current.muted;\r\n      setIsMuted(videoRef.current.muted);\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = () => {\r\n    // Start a timer to check for mouseover duration\r\n    const mouseOverTimer = setTimeout(() => {\r\n      if (!showVideo) {\r\n        handleVideoClick();\r\n      }\r\n    }, 4000); // Adjust the duration as needed (4 seconds in this case)\r\n\r\n    setIsMouseOver(true);\r\n\r\n    return () => {\r\n      // Clear the timer when the mouse leaves the element\r\n      clearTimeout(mouseOverTimer);\r\n      setIsMouseOver(false);\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const videoElement = videoRef.current;\r\n\r\n    if (showVideo && videoElement) {\r\n      videoElement.play();\r\n      videoElement.addEventListener('ended', handleVideoEnd);\r\n\r\n      // Create an Intersection Observer\r\n      const observer = new IntersectionObserver(\r\n        (entries) => {\r\n          const [entry] = entries;\r\n          if (entry.isIntersecting) {\r\n            // Element is in the viewport, play the video\r\n            videoElement.play();\r\n          } else {\r\n            // Element is out of the viewport, pause the video\r\n            videoElement.pause();\r\n          }\r\n        },\r\n        { threshold: 0.5 } // Adjust the threshold as needed\r\n      );\r\n\r\n      // Start observing the video container\r\n      observer.observe(videoContainerRef.current);\r\n\r\n      // Cleanup the observer when the component is unmounted\r\n      return () => {\r\n        observer.disconnect();\r\n      };\r\n    }\r\n  }, [showVideo]);\r\n\r\n  const { description, thumbnail, title, longvideo } = feature1;\r\n\r\n  return (\r\n    <div\r\n      className=\"homepage__ourprojects\"\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={() => setIsMouseOver(false)}\r\n    >\r\n      {showVideo ? (\r\n        <div className=\"video-container\" ref={videoContainerRef}>\r\n          <video\r\n            id=\"videoPlayer\"\r\n            ref={videoRef}\r\n            style={{ width: '99vw' }}\r\n            onClick={handleVideoClick}\r\n            muted={isMuted} // Set muted attribute based on state\r\n          >\r\n            <source src={longvideo} type=\"video/mp4\" />\r\n            Your browser does not support the video tag.\r\n          </video>\r\n          <div className=\"mute-toggle\" onClick={handleMuteToggle}>\r\n            {isMuted ? (\r\n              <img src={muteIcon} alt=\"Mute\" />\r\n            ) : (\r\n              <img src={volumeUpIcon} alt=\"Volume Up\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div onClick={handleVideoClick} className=\"banner-image-container\">\r\n          <img className=\"banner-image\" src={thumbnail} alt=\"Banner\" />\r\n          <p className=\"overlay-text\">{title}</p>\r\n          <p className=\"overlay-text-desc\">{description}</p>\r\n          {isMouseOver && <p>Hover over for 4 seconds to play video</p>}\r\n          \r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ourprojects;\r\n"
        }
    ]
}