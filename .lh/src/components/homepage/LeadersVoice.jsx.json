{
    "sourceFile": "src/components/homepage/LeadersVoice.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1700655744317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700655970513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     </div>\r\n   );\r\n };\r\n \r\n-function LeadersVoice({ homepage_leaders_voice }) {\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n   const [currentSlide, setCurrentSlide] = useState(0);\r\n   const videoRefs = useRef([]);\r\n   const sliderRef = useRef(null);\r\n   const autoplayManager = useRef(null);\r\n"
                },
                {
                    "date": 1700656001783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    // Set the rotation state to true for the current slide\r\n+    setActiveSlide(current);\r\n+     // Update the video reference for the active slide\r\n+     updateVideoRef('leadersVoiceVideo', videoRefs.current[current]);\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true; // Only the current slide will have the rotation state true\r\n+    setRotation(newRotation);\r\n+  };\r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Initialize the autoplay manager\r\n+    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(' ').map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: 'inline-block',\r\n+            opacity: 0,\r\n+            filter: 'blur(4px)',\r\n+            marginRight: '1px', // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{' '} {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n+                  <div className=\"videopart\">\r\n+                    <video\r\n+                      ref={(el) => (videoRefs.current[index] = el)}\r\n+                      controls\r\n+                      poster={slide.content.thumbnail}\r\n+                    >\r\n+                      <source src={slide.content.video} type=\"video/mp4\" />\r\n+                    </video>\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+                \r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700656221766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,15 +165,20 @@\n               <section className=\"content\">\r\n                 <div className=\"slide\">\r\n                   <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n                   <div className=\"videopart\">\r\n-                    <video\r\n-                      ref={(el) => (videoRefs.current[index] = el)}\r\n-                      controls\r\n-                      poster={slide.content.thumbnail}\r\n-                    >\r\n-                      <source src={slide.content.video} type=\"video/mp4\" />\r\n-                    </video>\r\n+                  <video\r\n+                    ref={(el) => {\r\n+                      videoRefs.current[index] = el; // Associate each video element with its ref\r\n+                      if (index === currentSlide) {\r\n+                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n+                      }\r\n+                    }}\r\n+                    controls\r\n+                    poster={slide.content.thumbnail}\r\n+                  >\r\n+                    <source src={slide.content.video} type=\"video/mp4\" />\r\n+                  </video>\r\n                     <p className=\"caption\">{slide.content.caption}</p>\r\n \r\n                   </div>\r\n                   {/* <img\r\n@@ -199,206 +204,5 @@\n     </div>\r\n   );\r\n }\r\n \r\n-export default LeadersVoice;\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import Slider from \"react-slick\";\r\n-import \"slick-carousel/slick/slick.css\";\r\n-import \"slick-carousel/slick/slick-theme.css\";\r\n-import braneback from \"../../assets/swril-blue-thick.svg\";\r\n-import arrow from \"../../assets/uparrow.svg\";\r\n-\r\n-// Custom arrow components\r\n-const PrevArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-prev-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Previous\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const NextArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-next-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Next\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n-  const [currentSlide, setCurrentSlide] = useState(0);\r\n-  const videoRefs = useRef([]);\r\n-  const sliderRef = useRef(null);\r\n-  const autoplayManager = useRef(null);\r\n-  const [activeSlide, setActiveSlide] = useState(0);\r\n-  const [rotation, setRotation] = useState(\r\n-    Array(homepage_leaders_voice.length).fill(false)\r\n-  );\r\n-  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n-\r\n-  const handleSlideChange = (index) => {\r\n-    setCurrentSlide(index);\r\n-  };\r\n-\r\n-  const handleBeforeChange = (oldIndex, newIndex) => {\r\n-    // Check if the slider is transitioning from the last slide to the first slide\r\n-    const isWrappingToStart =\r\n-      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n-    // Check if the slider is transitioning from the first slide to the last slide\r\n-    const isWrappingToEnd =\r\n-      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n-\r\n-    // Determine the direction of the slide change with wrap-around logic\r\n-    if (isWrappingToStart) {\r\n-      setDirection(\"up\");\r\n-    } else if (isWrappingToEnd) {\r\n-      setDirection(\"down\");\r\n-    } else {\r\n-      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n-    }\r\n-\r\n-    // Pause the video in the old slide when changing slides\r\n-    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n-      videoRefs.current[oldIndex].pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleAfterChange = (current) => {\r\n-    // Set the rotation state to true for the current slide\r\n-    setActiveSlide(current);\r\n-    const newRotation = [...rotation];\r\n-    newRotation[current] = true; // Only the current slide will have the rotation state true\r\n-    setRotation(newRotation);\r\n-  };\r\n-\r\n-  const handleVideoPlay = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleVideoPause = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.play();\r\n-    }\r\n-  };\r\n-\r\n-  const sliderSettings = {\r\n-    autoplay: true,\r\n-    autoplaySpeed: 6000,\r\n-    infinite: true,\r\n-    speed: 1500,\r\n-    slidesToShow: 1,\r\n-    slidesToScroll: 1,\r\n-    vertical: true,\r\n-    verticalSwiping: true,\r\n-    centerPadding: \"0\",\r\n-    beforeChange: (oldIndex, newIndex) => {\r\n-      handleBeforeChange(oldIndex, newIndex);\r\n-      handleSlideChange(newIndex);\r\n-    },\r\n-    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n-    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n-    afterChange: handleAfterChange, // Use the new handler here\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Initialize the autoplay manager\r\n-    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n-\r\n-    // Add event listeners to each video element\r\n-    videoRefs.current.forEach((video) => {\r\n-      video.addEventListener(\"play\", handleVideoPlay);\r\n-      video.addEventListener(\"pause\", handleVideoPause);\r\n-    });\r\n-\r\n-    // Cleanup: remove event listeners when component unmounts\r\n-    return () => {\r\n-      videoRefs.current.forEach((video) => {\r\n-        if (video) {\r\n-          video.removeEventListener(\"play\", handleVideoPlay);\r\n-          video.removeEventListener(\"pause\", handleVideoPause);\r\n-        }\r\n-      });\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Function to split the quote into words and wrap each word with a span\r\n-  const renderQuote = (quote, slideIndex) => {\r\n-    // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(' ').map((word, index) => (\r\n-      <React.Fragment key={`${slideIndex}-${index}`}>\r\n-        <span\r\n-          style={{\r\n-            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: 'inline-block',\r\n-            opacity: 0,\r\n-            filter: 'blur(4px)',\r\n-            marginRight: '1px', // Add some space to the right of each word\r\n-          }}\r\n-        >\r\n-          {word}\r\n-        </span>{' '} {/* This space is important to keep words separate */}\r\n-      </React.Fragment>\r\n-    ));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className=\"homepage__leadersvoice\">\r\n-      <div>\r\n-        <h1 className=\"heading\">Leader's Voice</h1>\r\n-      </div>\r\n-      <div className=\"leader-carousel-container\">\r\n-        <Slider ref={sliderRef} {...sliderSettings}>\r\n-          {homepage_leaders_voice.map((slide, index) => (\r\n-            <div key={slide.key}>\r\n-              <section className=\"content\">\r\n-                <div className=\"slide\">\r\n-                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n-                  <div className=\"videopart\">\r\n-                    <video\r\n-                      ref={(el) => (videoRefs.current[index] = el)}\r\n-                      controls\r\n-                      poster={slide.content.thumbnail}\r\n-                    >\r\n-                      <source src={slide.content.video} type=\"video/mp4\" />\r\n-                    </video>\r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n-\r\n-                  </div>\r\n-                  {/* <img\r\n-                    src={braneback}\r\n-                    className={`vertical-swirlblue \r\n-                      ${\r\n-                        index === currentSlide\r\n-                          ? `vertical-swirlblue-animate-${direction}`\r\n-                          : rotation[index]\r\n-                          ? \"vertical-swirlblue-rotated\"\r\n-                          : \"\"\r\n-                      }`\r\n-                    }\r\n-                    alt=\"swirl\"\r\n-                  /> */}\r\n-                </div>\r\n-                \r\n-              </section>\r\n-            </div>\r\n-          ))}\r\n-        </Slider>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n export default LeadersVoice;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700656351003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n \r\n   const handleAfterChange = (current) => {\r\n     // Set the rotation state to true for the current slide\r\n     setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n      // Update the video reference for the active slide\r\n      updateVideoRef('leadersVoiceVideo', videoRefs.current[current]);\r\n     const newRotation = [...rotation];\r\n     newRotation[current] = true; // Only the current slide will have the rotation state true\r\n"
                },
                {
                    "date": 1700716942733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,21 @@\n     newRotation[current] = true; // Only the current slide will have the rotation state true\r\n     setRotation(newRotation);\r\n   };\r\n \r\n+  useEffect(() => {\r\n+    // Update the video reference for the current slide\r\n+    const currentVideoRef = videoRefs.current[currentSlide];\r\n+    if (currentVideoRef) {\r\n+      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n+    }\r\n+\r\n+    return () => {\r\n+      // Clean up: remove the video reference when the component unmounts or slide changes\r\n+      updateVideoRef('leadersVoiceVideo', null);\r\n+    };\r\n+  }, [currentSlide, updateVideoRef]);\r\n+\r\n   const handleVideoPlay = () => {\r\n     if (autoplayManager.current) {\r\n       autoplayManager.current.pause();\r\n     }\r\n"
                },
                {
                    "date": 1700716970607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     // Set the rotation state to true for the current slide\r\n     setActiveSlide(current);\r\n     setCurrentSlide(current);\r\n      // Update the video reference for the active slide\r\n-     updateVideoRef('leadersVoiceVideo', videoRefs.current[current]);\r\n+    //  updateVideoRef('leadersVoiceVideo', videoRefs.current[current]);\r\n     const newRotation = [...rotation];\r\n     newRotation[current] = true; // Only the current slide will have the rotation state true\r\n     setRotation(newRotation);\r\n   };\r\n"
                },
                {
                    "date": 1700717100694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n+\r\n+    // Update the video reference for the active slide\r\n+    const currentVideoRef = videoRefs.current[current];\r\n+    if (currentVideoRef) {\r\n+      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n+    } else {\r\n+      updateVideoRef('leadersVoiceVideo', null);\r\n+    }\r\n+\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true;\r\n+    setRotation(newRotation);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Update the video reference for the current slide\r\n+    const currentVideoRef = videoRefs.current[currentSlide];\r\n+    if (currentVideoRef) {\r\n+      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n+    }\r\n+\r\n+    return () => {\r\n+      // Clean up: remove the video reference when the component unmounts or slide changes\r\n+      updateVideoRef('leadersVoiceVideo', null);\r\n+    };\r\n+  }, [currentSlide, updateVideoRef]);\r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Initialize the autoplay manager\r\n+    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(' ').map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: 'inline-block',\r\n+            opacity: 0,\r\n+            filter: 'blur(4px)',\r\n+            marginRight: '1px', // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{' '} {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n+                  <div className=\"videopart\">\r\n+                  <video\r\n+                    ref={(el) => {\r\n+                      videoRefs.current[index] = el; // Associate each video element with its ref\r\n+                      if (index === currentSlide) {\r\n+                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n+                      }\r\n+                    }}\r\n+                    controls\r\n+                    poster={slide.content.thumbnail}\r\n+                  >\r\n+                    <source src={slide.content.video} type=\"video/mp4\" />\r\n+                  </video>\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+                \r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700717128816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,21 +86,8 @@\n     newRotation[current] = true;\r\n     setRotation(newRotation);\r\n   };\r\n \r\n-  useEffect(() => {\r\n-    // Update the video reference for the current slide\r\n-    const currentVideoRef = videoRefs.current[currentSlide];\r\n-    if (currentVideoRef) {\r\n-      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n-    }\r\n-\r\n-    return () => {\r\n-      // Clean up: remove the video reference when the component unmounts or slide changes\r\n-      updateVideoRef('leadersVoiceVideo', null);\r\n-    };\r\n-  }, [currentSlide, updateVideoRef]);\r\n-\r\n   const handleVideoPlay = () => {\r\n     if (autoplayManager.current) {\r\n       autoplayManager.current.pause();\r\n     }\r\n@@ -224,227 +211,5 @@\n     </div>\r\n   );\r\n }\r\n \r\n-export default LeadersVoice;\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import Slider from \"react-slick\";\r\n-import \"slick-carousel/slick/slick.css\";\r\n-import \"slick-carousel/slick/slick-theme.css\";\r\n-import braneback from \"../../assets/swril-blue-thick.svg\";\r\n-import arrow from \"../../assets/uparrow.svg\";\r\n-\r\n-// Custom arrow components\r\n-const PrevArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-prev-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Previous\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const NextArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-next-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Next\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n-  const [currentSlide, setCurrentSlide] = useState(0);\r\n-  const videoRefs = useRef([]);\r\n-  const sliderRef = useRef(null);\r\n-  const autoplayManager = useRef(null);\r\n-  const [activeSlide, setActiveSlide] = useState(0);\r\n-  const [rotation, setRotation] = useState(\r\n-    Array(homepage_leaders_voice.length).fill(false)\r\n-  );\r\n-  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n-\r\n-  const handleSlideChange = (index) => {\r\n-    setCurrentSlide(index);\r\n-  };\r\n-\r\n-  const handleBeforeChange = (oldIndex, newIndex) => {\r\n-    // Check if the slider is transitioning from the last slide to the first slide\r\n-    const isWrappingToStart =\r\n-      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n-    // Check if the slider is transitioning from the first slide to the last slide\r\n-    const isWrappingToEnd =\r\n-      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n-\r\n-    // Determine the direction of the slide change with wrap-around logic\r\n-    if (isWrappingToStart) {\r\n-      setDirection(\"up\");\r\n-    } else if (isWrappingToEnd) {\r\n-      setDirection(\"down\");\r\n-    } else {\r\n-      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n-    }\r\n-\r\n-    // Pause the video in the old slide when changing slides\r\n-    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n-      videoRefs.current[oldIndex].pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleAfterChange = (current) => {\r\n-    // Set the rotation state to true for the current slide\r\n-    setActiveSlide(current);\r\n-    setCurrentSlide(current);\r\n-     // Update the video reference for the active slide\r\n-    //  updateVideoRef('leadersVoiceVideo', videoRefs.current[current]);\r\n-    const newRotation = [...rotation];\r\n-    newRotation[current] = true; // Only the current slide will have the rotation state true\r\n-    setRotation(newRotation);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Update the video reference for the current slide\r\n-    const currentVideoRef = videoRefs.current[currentSlide];\r\n-    if (currentVideoRef) {\r\n-      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n-    }\r\n-\r\n-    return () => {\r\n-      // Clean up: remove the video reference when the component unmounts or slide changes\r\n-      updateVideoRef('leadersVoiceVideo', null);\r\n-    };\r\n-  }, [currentSlide, updateVideoRef]);\r\n-\r\n-  const handleVideoPlay = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleVideoPause = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.play();\r\n-    }\r\n-  };\r\n-\r\n-  const sliderSettings = {\r\n-    autoplay: true,\r\n-    autoplaySpeed: 6000,\r\n-    infinite: true,\r\n-    speed: 1500,\r\n-    slidesToShow: 1,\r\n-    slidesToScroll: 1,\r\n-    vertical: true,\r\n-    verticalSwiping: true,\r\n-    centerPadding: \"0\",\r\n-    beforeChange: (oldIndex, newIndex) => {\r\n-      handleBeforeChange(oldIndex, newIndex);\r\n-      handleSlideChange(newIndex);\r\n-    },\r\n-    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n-    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n-    afterChange: handleAfterChange, // Use the new handler here\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Initialize the autoplay manager\r\n-    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n-\r\n-    // Add event listeners to each video element\r\n-    videoRefs.current.forEach((video) => {\r\n-      video.addEventListener(\"play\", handleVideoPlay);\r\n-      video.addEventListener(\"pause\", handleVideoPause);\r\n-    });\r\n-\r\n-    // Cleanup: remove event listeners when component unmounts\r\n-    return () => {\r\n-      videoRefs.current.forEach((video) => {\r\n-        if (video) {\r\n-          video.removeEventListener(\"play\", handleVideoPlay);\r\n-          video.removeEventListener(\"pause\", handleVideoPause);\r\n-        }\r\n-      });\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Function to split the quote into words and wrap each word with a span\r\n-  const renderQuote = (quote, slideIndex) => {\r\n-    // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(' ').map((word, index) => (\r\n-      <React.Fragment key={`${slideIndex}-${index}`}>\r\n-        <span\r\n-          style={{\r\n-            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: 'inline-block',\r\n-            opacity: 0,\r\n-            filter: 'blur(4px)',\r\n-            marginRight: '1px', // Add some space to the right of each word\r\n-          }}\r\n-        >\r\n-          {word}\r\n-        </span>{' '} {/* This space is important to keep words separate */}\r\n-      </React.Fragment>\r\n-    ));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className=\"homepage__leadersvoice\">\r\n-      <div>\r\n-        <h1 className=\"heading\">Leader's Voice</h1>\r\n-      </div>\r\n-      <div className=\"leader-carousel-container\">\r\n-        <Slider ref={sliderRef} {...sliderSettings}>\r\n-          {homepage_leaders_voice.map((slide, index) => (\r\n-            <div key={slide.key}>\r\n-              <section className=\"content\">\r\n-                <div className=\"slide\">\r\n-                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n-                  <div className=\"videopart\">\r\n-                  <video\r\n-                    ref={(el) => {\r\n-                      videoRefs.current[index] = el; // Associate each video element with its ref\r\n-                      if (index === currentSlide) {\r\n-                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n-                      }\r\n-                    }}\r\n-                    controls\r\n-                    poster={slide.content.thumbnail}\r\n-                  >\r\n-                    <source src={slide.content.video} type=\"video/mp4\" />\r\n-                  </video>\r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n-\r\n-                  </div>\r\n-                  {/* <img\r\n-                    src={braneback}\r\n-                    className={`vertical-swirlblue \r\n-                      ${\r\n-                        index === currentSlide\r\n-                          ? `vertical-swirlblue-animate-${direction}`\r\n-                          : rotation[index]\r\n-                          ? \"vertical-swirlblue-rotated\"\r\n-                          : \"\"\r\n-                      }`\r\n-                    }\r\n-                    alt=\"swirl\"\r\n-                  /> */}\r\n-                </div>\r\n-                \r\n-              </section>\r\n-            </div>\r\n-          ))}\r\n-        </Slider>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n export default LeadersVoice;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700717486096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,16 @@\n     newRotation[current] = true;\r\n     setRotation(newRotation);\r\n   };\r\n \r\n+  useEffect(() => {\r\n+    // Update the video reference for the initial slide\r\n+    if (videoRefs.current[0]) {\r\n+      updateVideoRef('leadersVoiceVideo', videoRefs.current[0]);\r\n+    }\r\n+  }, []); // Run only once on component mount\r\n+\r\n+\r\n   const handleVideoPlay = () => {\r\n     if (autoplayManager.current) {\r\n       autoplayManager.current.pause();\r\n     }\r\n"
                },
                {
                    "date": 1700717515701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n+\r\n+    // Update the video reference for the active slide\r\n+    const currentVideoRef = videoRefs.current[current];\r\n+    if (currentVideoRef) {\r\n+      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n+    } else {\r\n+      updateVideoRef('leadersVoiceVideo', null);\r\n+    }\r\n+\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true;\r\n+    setRotation(newRotation);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Update the video reference for the initial slide\r\n+    if (videoRefs.current[0]) {\r\n+      updateVideoRef('leadersVoiceVideo', videoRefs.current[0]);\r\n+    }\r\n+  }, []); // Run only once on component mount\r\n+\r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Initialize the autoplay manager\r\n+    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(' ').map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: 'inline-block',\r\n+            opacity: 0,\r\n+            filter: 'blur(4px)',\r\n+            marginRight: '1px', // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{' '} {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n+                  <div className=\"videopart\">\r\n+                  <video\r\n+                    ref={(el) => {\r\n+                      videoRefs.current[index] = el; // Update the video ref array\r\n+                      if (index === currentSlide) {\r\n+                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n+                      }\r\n+                    }}\r\n+                    controls\r\n+                    poster={slide.content.thumbnail}\r\n+                  >\r\n+                    <source src={slide.content.video} type=\"video/mp4\" />\r\n+                  </video>\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+                \r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700717524999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n+\r\n+    // Update the video reference for the active slide\r\n+    const currentVideoRef = videoRefs.current[current];\r\n+    if (currentVideoRef) {\r\n+      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n+    } else {\r\n+      updateVideoRef('leadersVoiceVideo', null);\r\n+    }\r\n+\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true;\r\n+    setRotation(newRotation);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Update the video reference for the initial slide\r\n+    if (videoRefs.current[0]) {\r\n+      updateVideoRef('leadersVoiceVideo', videoRefs.current[0]);\r\n+    }\r\n+  }, []); // Run only once on component mount\r\n+\r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Initialize the autoplay manager\r\n+    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(' ').map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: 'inline-block',\r\n+            opacity: 0,\r\n+            filter: 'blur(4px)',\r\n+            marginRight: '1px', // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{' '} {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n+                  <div className=\"videopart\">\r\n+                  <video\r\n+                    ref={(el) => {\r\n+                      videoRefs.current[index] = el; // Update the video ref array\r\n+                      if (index === currentSlide) {\r\n+                        updateVideoRef('leadersVoiceVideo', el); // Update the global ref\r\n+                      }\r\n+                    }}\r\n+                    controls\r\n+                    poster={slide.content.thumbnail}\r\n+                  >\r\n+                    <source src={slide.content.video} type=\"video/mp4\" />\r\n+                  </video>\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+                \r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700728906056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,11 @@\n \r\n     // Update the video reference for the active slide\r\n     const currentVideoRef = videoRefs.current[current];\r\n     if (currentVideoRef) {\r\n-      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n+      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n     } else {\r\n-      updateVideoRef('leadersVoiceVideo', null);\r\n+      updateVideoRef(\"leadersVoiceVideo\", null);\r\n     }\r\n \r\n     const newRotation = [...rotation];\r\n     newRotation[current] = true;\r\n@@ -89,13 +89,12 @@\n \r\n   useEffect(() => {\r\n     // Update the video reference for the initial slide\r\n     if (videoRefs.current[0]) {\r\n-      updateVideoRef('leadersVoiceVideo', videoRefs.current[0]);\r\n+      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n     }\r\n   }, []); // Run only once on component mount\r\n \r\n-\r\n   const handleVideoPlay = () => {\r\n     if (autoplayManager.current) {\r\n       autoplayManager.current.pause();\r\n     }\r\n@@ -149,26 +148,28 @@\n \r\n   // Function to split the quote into words and wrap each word with a span\r\n   const renderQuote = (quote, slideIndex) => {\r\n     // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(' ').map((word, index) => (\r\n+    return quote.split(\" \").map((word, index) => (\r\n       <React.Fragment key={`${slideIndex}-${index}`}>\r\n         <span\r\n           style={{\r\n-            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: 'inline-block',\r\n+            animation: `fade-in 0.8s ${\r\n+              0.1 * (index + 1)\r\n+            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: \"inline-block\",\r\n             opacity: 0,\r\n-            filter: 'blur(4px)',\r\n-            marginRight: '1px', // Add some space to the right of each word\r\n+            filter: \"blur(4px)\",\r\n+            marginRight: \"1px\", // Add some space to the right of each word\r\n           }}\r\n         >\r\n           {word}\r\n-        </span>{' '} {/* This space is important to keep words separate */}\r\n+        </span>{\" \"}\r\n+        {/* This space is important to keep words separate */}\r\n       </React.Fragment>\r\n     ));\r\n   };\r\n \r\n-\r\n   return (\r\n     <div className=\"homepage__leadersvoice\">\r\n       <div>\r\n         <h1 className=\"heading\">Leader's Voice</h1>\r\n@@ -178,247 +179,28 @@\n           {homepage_leaders_voice.map((slide, index) => (\r\n             <div key={slide.key}>\r\n               <section className=\"content\">\r\n                 <div className=\"slide\">\r\n-                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n+                  <h2 className=\"text\">\r\n+                    {\" \"}\r\n+                    {renderQuote(slide.content.quote, currentSlide)}\r\n+                  </h2>\r\n                   <div className=\"videopart\">\r\n-                  <video\r\n-                    ref={(el) => {\r\n-                      videoRefs.current[index] = el; // Update the video ref array\r\n-                      if (index === currentSlide) {\r\n-                        updateVideoRef('leadersVoiceVideo', el); // Update the global ref\r\n-                      }\r\n-                    }}\r\n-                    controls\r\n-                    poster={slide.content.thumbnail}\r\n-                  >\r\n-                    <source src={slide.content.video} type=\"video/mp4\" />\r\n-                  </video>\r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n+                    <video\r\n+                      ref={(el) => {\r\n+                        videoRefs.current[index] = el;\r\n+                        if (index === currentSlide) {\r\n+                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n+                        }\r\n+                      }}\r\n+                      controls\r\n+                      preload=\"auto\" // Added preload attribute\r\n+                      // Removed poster attribute to ensure the video is visible\r\n+                    >\r\n+                      <source src={slide.content.video} type=\"video/mp4\" />\r\n+                    </video>\r\n \r\n-                  </div>\r\n-                  {/* <img\r\n-                    src={braneback}\r\n-                    className={`vertical-swirlblue \r\n-                      ${\r\n-                        index === currentSlide\r\n-                          ? `vertical-swirlblue-animate-${direction}`\r\n-                          : rotation[index]\r\n-                          ? \"vertical-swirlblue-rotated\"\r\n-                          : \"\"\r\n-                      }`\r\n-                    }\r\n-                    alt=\"swirl\"\r\n-                  /> */}\r\n-                </div>\r\n-                \r\n-              </section>\r\n-            </div>\r\n-          ))}\r\n-        </Slider>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default LeadersVoice;\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import Slider from \"react-slick\";\r\n-import \"slick-carousel/slick/slick.css\";\r\n-import \"slick-carousel/slick/slick-theme.css\";\r\n-import braneback from \"../../assets/swril-blue-thick.svg\";\r\n-import arrow from \"../../assets/uparrow.svg\";\r\n-\r\n-// Custom arrow components\r\n-const PrevArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-prev-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Previous\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const NextArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-next-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Next\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n-  const [currentSlide, setCurrentSlide] = useState(0);\r\n-  const videoRefs = useRef([]);\r\n-  const sliderRef = useRef(null);\r\n-  const autoplayManager = useRef(null);\r\n-  const [activeSlide, setActiveSlide] = useState(0);\r\n-  const [rotation, setRotation] = useState(\r\n-    Array(homepage_leaders_voice.length).fill(false)\r\n-  );\r\n-  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n-\r\n-  const handleSlideChange = (index) => {\r\n-    setCurrentSlide(index);\r\n-  };\r\n-\r\n-  const handleBeforeChange = (oldIndex, newIndex) => {\r\n-    // Check if the slider is transitioning from the last slide to the first slide\r\n-    const isWrappingToStart =\r\n-      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n-    // Check if the slider is transitioning from the first slide to the last slide\r\n-    const isWrappingToEnd =\r\n-      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n-\r\n-    // Determine the direction of the slide change with wrap-around logic\r\n-    if (isWrappingToStart) {\r\n-      setDirection(\"up\");\r\n-    } else if (isWrappingToEnd) {\r\n-      setDirection(\"down\");\r\n-    } else {\r\n-      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n-    }\r\n-\r\n-    // Pause the video in the old slide when changing slides\r\n-    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n-      videoRefs.current[oldIndex].pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleAfterChange = (current) => {\r\n-    setActiveSlide(current);\r\n-    setCurrentSlide(current);\r\n-\r\n-    // Update the video reference for the active slide\r\n-    const currentVideoRef = videoRefs.current[current];\r\n-    if (currentVideoRef) {\r\n-      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n-    } else {\r\n-      updateVideoRef('leadersVoiceVideo', null);\r\n-    }\r\n-\r\n-    const newRotation = [...rotation];\r\n-    newRotation[current] = true;\r\n-    setRotation(newRotation);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Update the video reference for the initial slide\r\n-    if (videoRefs.current[0]) {\r\n-      updateVideoRef('leadersVoiceVideo', videoRefs.current[0]);\r\n-    }\r\n-  }, []); // Run only once on component mount\r\n-\r\n-\r\n-  const handleVideoPlay = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleVideoPause = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.play();\r\n-    }\r\n-  };\r\n-\r\n-  const sliderSettings = {\r\n-    autoplay: true,\r\n-    autoplaySpeed: 6000,\r\n-    infinite: true,\r\n-    speed: 1500,\r\n-    slidesToShow: 1,\r\n-    slidesToScroll: 1,\r\n-    vertical: true,\r\n-    verticalSwiping: true,\r\n-    centerPadding: \"0\",\r\n-    beforeChange: (oldIndex, newIndex) => {\r\n-      handleBeforeChange(oldIndex, newIndex);\r\n-      handleSlideChange(newIndex);\r\n-    },\r\n-    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n-    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n-    afterChange: handleAfterChange, // Use the new handler here\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Initialize the autoplay manager\r\n-    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n-\r\n-    // Add event listeners to each video element\r\n-    videoRefs.current.forEach((video) => {\r\n-      video.addEventListener(\"play\", handleVideoPlay);\r\n-      video.addEventListener(\"pause\", handleVideoPause);\r\n-    });\r\n-\r\n-    // Cleanup: remove event listeners when component unmounts\r\n-    return () => {\r\n-      videoRefs.current.forEach((video) => {\r\n-        if (video) {\r\n-          video.removeEventListener(\"play\", handleVideoPlay);\r\n-          video.removeEventListener(\"pause\", handleVideoPause);\r\n-        }\r\n-      });\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Function to split the quote into words and wrap each word with a span\r\n-  const renderQuote = (quote, slideIndex) => {\r\n-    // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(' ').map((word, index) => (\r\n-      <React.Fragment key={`${slideIndex}-${index}`}>\r\n-        <span\r\n-          style={{\r\n-            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: 'inline-block',\r\n-            opacity: 0,\r\n-            filter: 'blur(4px)',\r\n-            marginRight: '1px', // Add some space to the right of each word\r\n-          }}\r\n-        >\r\n-          {word}\r\n-        </span>{' '} {/* This space is important to keep words separate */}\r\n-      </React.Fragment>\r\n-    ));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className=\"homepage__leadersvoice\">\r\n-      <div>\r\n-        <h1 className=\"heading\">Leader's Voice</h1>\r\n-      </div>\r\n-      <div className=\"leader-carousel-container\">\r\n-        <Slider ref={sliderRef} {...sliderSettings}>\r\n-          {homepage_leaders_voice.map((slide, index) => (\r\n-            <div key={slide.key}>\r\n-              <section className=\"content\">\r\n-                <div className=\"slide\">\r\n-                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n-                  <div className=\"videopart\">\r\n-                  <video\r\n-                    ref={(el) => {\r\n-                      videoRefs.current[index] = el; // Update the video ref array\r\n-                      if (index === currentSlide) {\r\n-                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n-                      }\r\n-                    }}\r\n-                    controls\r\n-                    poster={slide.content.thumbnail}\r\n-                  >\r\n-                    <source src={slide.content.video} type=\"video/mp4\" />\r\n-                  </video>\r\n                     <p className=\"caption\">{slide.content.caption}</p>\r\n-\r\n                   </div>\r\n                   {/* <img\r\n                     src={braneback}\r\n                     className={`vertical-swirlblue \r\n@@ -432,9 +214,8 @@\n                     }\r\n                     alt=\"swirl\"\r\n                   /> */}\r\n                 </div>\r\n-                \r\n               </section>\r\n             </div>\r\n           ))}\r\n         </Slider>\r\n@@ -442,228 +223,5 @@\n     </div>\r\n   );\r\n }\r\n \r\n-export default LeadersVoice;\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import Slider from \"react-slick\";\r\n-import \"slick-carousel/slick/slick.css\";\r\n-import \"slick-carousel/slick/slick-theme.css\";\r\n-import braneback from \"../../assets/swril-blue-thick.svg\";\r\n-import arrow from \"../../assets/uparrow.svg\";\r\n-\r\n-// Custom arrow components\r\n-const PrevArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-prev-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Previous\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const NextArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-next-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Next\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n-  const [currentSlide, setCurrentSlide] = useState(0);\r\n-  const videoRefs = useRef([]);\r\n-  const sliderRef = useRef(null);\r\n-  const autoplayManager = useRef(null);\r\n-  const [activeSlide, setActiveSlide] = useState(0);\r\n-  const [rotation, setRotation] = useState(\r\n-    Array(homepage_leaders_voice.length).fill(false)\r\n-  );\r\n-  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n-\r\n-  const handleSlideChange = (index) => {\r\n-    setCurrentSlide(index);\r\n-  };\r\n-\r\n-  const handleBeforeChange = (oldIndex, newIndex) => {\r\n-    // Check if the slider is transitioning from the last slide to the first slide\r\n-    const isWrappingToStart =\r\n-      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n-    // Check if the slider is transitioning from the first slide to the last slide\r\n-    const isWrappingToEnd =\r\n-      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n-\r\n-    // Determine the direction of the slide change with wrap-around logic\r\n-    if (isWrappingToStart) {\r\n-      setDirection(\"up\");\r\n-    } else if (isWrappingToEnd) {\r\n-      setDirection(\"down\");\r\n-    } else {\r\n-      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n-    }\r\n-\r\n-    // Pause the video in the old slide when changing slides\r\n-    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n-      videoRefs.current[oldIndex].pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleAfterChange = (current) => {\r\n-    setActiveSlide(current);\r\n-    setCurrentSlide(current);\r\n-\r\n-    // Update the video reference for the active slide\r\n-    const currentVideoRef = videoRefs.current[current];\r\n-    if (currentVideoRef) {\r\n-      updateVideoRef('leadersVoiceVideo', currentVideoRef);\r\n-    } else {\r\n-      updateVideoRef('leadersVoiceVideo', null);\r\n-    }\r\n-\r\n-    const newRotation = [...rotation];\r\n-    newRotation[current] = true;\r\n-    setRotation(newRotation);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Update the video reference for the initial slide\r\n-    if (videoRefs.current[0]) {\r\n-      updateVideoRef('leadersVoiceVideo', videoRefs.current[0]);\r\n-    }\r\n-  }, []); // Run only once on component mount\r\n-\r\n-\r\n-  const handleVideoPlay = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleVideoPause = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.play();\r\n-    }\r\n-  };\r\n-\r\n-  const sliderSettings = {\r\n-    autoplay: true,\r\n-    autoplaySpeed: 6000,\r\n-    infinite: true,\r\n-    speed: 1500,\r\n-    slidesToShow: 1,\r\n-    slidesToScroll: 1,\r\n-    vertical: true,\r\n-    verticalSwiping: true,\r\n-    centerPadding: \"0\",\r\n-    beforeChange: (oldIndex, newIndex) => {\r\n-      handleBeforeChange(oldIndex, newIndex);\r\n-      handleSlideChange(newIndex);\r\n-    },\r\n-    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n-    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n-    afterChange: handleAfterChange, // Use the new handler here\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Initialize the autoplay manager\r\n-    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n-\r\n-    // Add event listeners to each video element\r\n-    videoRefs.current.forEach((video) => {\r\n-      video.addEventListener(\"play\", handleVideoPlay);\r\n-      video.addEventListener(\"pause\", handleVideoPause);\r\n-    });\r\n-\r\n-    // Cleanup: remove event listeners when component unmounts\r\n-    return () => {\r\n-      videoRefs.current.forEach((video) => {\r\n-        if (video) {\r\n-          video.removeEventListener(\"play\", handleVideoPlay);\r\n-          video.removeEventListener(\"pause\", handleVideoPause);\r\n-        }\r\n-      });\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Function to split the quote into words and wrap each word with a span\r\n-  const renderQuote = (quote, slideIndex) => {\r\n-    // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(' ').map((word, index) => (\r\n-      <React.Fragment key={`${slideIndex}-${index}`}>\r\n-        <span\r\n-          style={{\r\n-            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: 'inline-block',\r\n-            opacity: 0,\r\n-            filter: 'blur(4px)',\r\n-            marginRight: '1px', // Add some space to the right of each word\r\n-          }}\r\n-        >\r\n-          {word}\r\n-        </span>{' '} {/* This space is important to keep words separate */}\r\n-      </React.Fragment>\r\n-    ));\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className=\"homepage__leadersvoice\">\r\n-      <div>\r\n-        <h1 className=\"heading\">Leader's Voice</h1>\r\n-      </div>\r\n-      <div className=\"leader-carousel-container\">\r\n-        <Slider ref={sliderRef} {...sliderSettings}>\r\n-          {homepage_leaders_voice.map((slide, index) => (\r\n-            <div key={slide.key}>\r\n-              <section className=\"content\">\r\n-                <div className=\"slide\">\r\n-                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n-                  <div className=\"videopart\">\r\n-                  <video\r\n-                    ref={(el) => {\r\n-                      videoRefs.current[index] = el; // Associate each video element with its ref\r\n-                      if (index === currentSlide) {\r\n-                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n-                      }\r\n-                    }}\r\n-                    controls\r\n-                    poster={slide.content.thumbnail}\r\n-                  >\r\n-                    <source src={slide.content.video} type=\"video/mp4\" />\r\n-                  </video>\r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n-\r\n-                  </div>\r\n-                  {/* <img\r\n-                    src={braneback}\r\n-                    className={`vertical-swirlblue \r\n-                      ${\r\n-                        index === currentSlide\r\n-                          ? `vertical-swirlblue-animate-${direction}`\r\n-                          : rotation[index]\r\n-                          ? \"vertical-swirlblue-rotated\"\r\n-                          : \"\"\r\n-                      }`\r\n-                    }\r\n-                    alt=\"swirl\"\r\n-                  /> */}\r\n-                </div>\r\n-                \r\n-              </section>\r\n-            </div>\r\n-          ))}\r\n-        </Slider>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default LeadersVoice;\n\\ No newline at end of file\n+export default LeadersVoice;\r\n"
                },
                {
                    "date": 1700728996407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,13 @@\n     afterChange: handleAfterChange, // Use the new handler here\r\n   };\r\n \r\n   useEffect(() => {\r\n-    // Initialize the autoplay manager\r\n-    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n+    // Assuming sliderRef is a ref to your Slider component\r\n+    autoplayManager.current = sliderRef.current.slickPause ? {\r\n+      pause: () => sliderRef.current.slickPause(),\r\n+      play: () => sliderRef.current.slickPlay()\r\n+  } : null;\r\n \r\n     // Add event listeners to each video element\r\n     videoRefs.current.forEach((video) => {\r\n       video.addEventListener(\"play\", handleVideoPlay);\r\n"
                },
                {
                    "date": 1700729026784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,18 +95,19 @@\n   }, []); // Run only once on component mount\r\n \r\n   const handleVideoPlay = () => {\r\n     if (autoplayManager.current) {\r\n-      autoplayManager.current.pause();\r\n+        autoplayManager.current.pause();\r\n     }\r\n-  };\r\n+};\r\n \r\n-  const handleVideoPause = () => {\r\n+const handleVideoPause = () => {\r\n     if (autoplayManager.current) {\r\n-      autoplayManager.current.play();\r\n+        autoplayManager.current.play();\r\n     }\r\n-  };\r\n+};\r\n \r\n+\r\n   const sliderSettings = {\r\n     autoplay: true,\r\n     autoplaySpeed: 6000,\r\n     infinite: true,\r\n"
                },
                {
                    "date": 1700729441448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,232 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n+\r\n+    // Update the video reference for the active slide\r\n+    const currentVideoRef = videoRefs.current[current];\r\n+    if (currentVideoRef) {\r\n+      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n+    } else {\r\n+      updateVideoRef(\"leadersVoiceVideo\", null);\r\n+    }\r\n+\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true;\r\n+    setRotation(newRotation);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Update the video reference for the initial slide\r\n+    if (videoRefs.current[0]) {\r\n+      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n+    }\r\n+  }, []); // Run only once on component mount\r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Assuming sliderRef is a ref to your Slider component\r\n+    autoplayManager.current = sliderRef.current.slickPause\r\n+      ? {\r\n+          pause: () => sliderRef.current.slickPause(),\r\n+          play: () => sliderRef.current.slickPlay(),\r\n+        }\r\n+      : null;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(\" \").map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${\r\n+              0.1 * (index + 1)\r\n+            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: \"inline-block\",\r\n+            opacity: 0,\r\n+            filter: \"blur(4px)\",\r\n+            marginRight: \"1px\", // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{\" \"}\r\n+        {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\">\r\n+                    {\" \"}\r\n+                    {renderQuote(slide.content.quote, currentSlide)}\r\n+                  </h2>\r\n+                  <div className=\"videopart\">\r\n+                    <video\r\n+                      key={slide.key} // Add a unique key to force remount on slide change\r\n+                      ref={(el) => {\r\n+                        videoRefs.current[index] = el;\r\n+                        if (index === currentSlide) {\r\n+                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n+                        }\r\n+                      }}\r\n+                      controls\r\n+                      preload=\"auto\"\r\n+                    >\r\n+                      <source src={slide.content.video} type=\"video/mp4\" />\r\n+                    </video>\r\n+\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\r\n"
                },
                {
                    "date": 1700729496293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,241 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n+\r\n+    // Update the video reference for the active slide\r\n+    const currentVideoRef = videoRefs.current[current];\r\n+    if (currentVideoRef) {\r\n+      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n+    } else {\r\n+      updateVideoRef(\"leadersVoiceVideo\", null);\r\n+    }\r\n+\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true;\r\n+    setRotation(newRotation);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Update the video reference for the initial slide\r\n+    if (videoRefs.current[0]) {\r\n+      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n+    }\r\n+  }, []); // Run only once on component mount\r\n+\r\n+  useEffect(() => {\r\n+    // Play the video of the initial active slide\r\n+    const initialVideo = videoRefs.current[0];\r\n+    if (initialVideo) {\r\n+      initialVideo.play().catch(e => console.error(\"Error playing video:\", e));\r\n+    }\r\n+  }, []);\r\n+  \r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Assuming sliderRef is a ref to your Slider component\r\n+    autoplayManager.current = sliderRef.current.slickPause\r\n+      ? {\r\n+          pause: () => sliderRef.current.slickPause(),\r\n+          play: () => sliderRef.current.slickPlay(),\r\n+        }\r\n+      : null;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(\" \").map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${\r\n+              0.1 * (index + 1)\r\n+            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: \"inline-block\",\r\n+            opacity: 0,\r\n+            filter: \"blur(4px)\",\r\n+            marginRight: \"1px\", // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{\" \"}\r\n+        {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\">\r\n+                    {\" \"}\r\n+                    {renderQuote(slide.content.quote, currentSlide)}\r\n+                  </h2>\r\n+                  <div className=\"videopart\">\r\n+                    <video\r\n+                      key={slide.key} // Add a unique key to force remount on slide change\r\n+                      ref={(el) => {\r\n+                        videoRefs.current[index] = el;\r\n+                        if (index === currentSlide) {\r\n+                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n+                        }\r\n+                      }}\r\n+                      controls\r\n+                      preload=\"auto\"\r\n+                    >\r\n+                      <source src={slide.content.video} type=\"video/mp4\" />\r\n+                    </video>\r\n+\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\r\n"
                },
                {
                    "date": 1700729522794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,238 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n+  \r\n+    const currentVideoRef = videoRefs.current[current];\r\n+    if (currentVideoRef) {\r\n+      currentVideoRef.play().catch(e => console.error(\"Error playing video:\", e));\r\n+      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n+    } else {\r\n+      updateVideoRef(\"leadersVoiceVideo\", null);\r\n+    }\r\n+  };\r\n+  \r\n+\r\n+  useEffect(() => {\r\n+    // Update the video reference for the initial slide\r\n+    if (videoRefs.current[0]) {\r\n+      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n+    }\r\n+  }, []); // Run only once on component mount\r\n+\r\n+  useEffect(() => {\r\n+    // Play the video of the initial active slide\r\n+    const initialVideo = videoRefs.current[0];\r\n+    if (initialVideo) {\r\n+      initialVideo.play().catch(e => console.error(\"Error playing video:\", e));\r\n+    }\r\n+  }, []);\r\n+  \r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Assuming sliderRef is a ref to your Slider component\r\n+    autoplayManager.current = sliderRef.current.slickPause\r\n+      ? {\r\n+          pause: () => sliderRef.current.slickPause(),\r\n+          play: () => sliderRef.current.slickPlay(),\r\n+        }\r\n+      : null;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(\" \").map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${\r\n+              0.1 * (index + 1)\r\n+            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: \"inline-block\",\r\n+            opacity: 0,\r\n+            filter: \"blur(4px)\",\r\n+            marginRight: \"1px\", // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{\" \"}\r\n+        {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\">\r\n+                    {\" \"}\r\n+                    {renderQuote(slide.content.quote, currentSlide)}\r\n+                  </h2>\r\n+                  <div className=\"videopart\">\r\n+                    <video\r\n+                      key={slide.key} // Add a unique key to force remount on slide change\r\n+                      ref={(el) => {\r\n+                        videoRefs.current[index] = el;\r\n+                        if (index === currentSlide) {\r\n+                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n+                        }\r\n+                      }}\r\n+                      controls\r\n+                      preload=\"auto\"\r\n+                    >\r\n+                      <source src={slide.content.video} type=\"video/mp4\" />\r\n+                    </video>\r\n+\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\r\n"
                },
                {
                    "date": 1700729562995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,10 @@\n       updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n     } else {\r\n       updateVideoRef(\"leadersVoiceVideo\", null);\r\n     }\r\n+    console.log(`Current video element: `, videoRefs.current[current]);\r\n+\r\n   };\r\n   \r\n \r\n   useEffect(() => {\r\n@@ -235,708 +237,4 @@\n   );\r\n }\r\n \r\n export default LeadersVoice;\r\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import Slider from \"react-slick\";\r\n-import \"slick-carousel/slick/slick.css\";\r\n-import \"slick-carousel/slick/slick-theme.css\";\r\n-import braneback from \"../../assets/swril-blue-thick.svg\";\r\n-import arrow from \"../../assets/uparrow.svg\";\r\n-\r\n-// Custom arrow components\r\n-const PrevArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-prev-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Previous\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const NextArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-next-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Next\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n-  const [currentSlide, setCurrentSlide] = useState(0);\r\n-  const videoRefs = useRef([]);\r\n-  const sliderRef = useRef(null);\r\n-  const autoplayManager = useRef(null);\r\n-  const [activeSlide, setActiveSlide] = useState(0);\r\n-  const [rotation, setRotation] = useState(\r\n-    Array(homepage_leaders_voice.length).fill(false)\r\n-  );\r\n-  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n-\r\n-  const handleSlideChange = (index) => {\r\n-    setCurrentSlide(index);\r\n-  };\r\n-\r\n-  const handleBeforeChange = (oldIndex, newIndex) => {\r\n-    // Check if the slider is transitioning from the last slide to the first slide\r\n-    const isWrappingToStart =\r\n-      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n-    // Check if the slider is transitioning from the first slide to the last slide\r\n-    const isWrappingToEnd =\r\n-      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n-\r\n-    // Determine the direction of the slide change with wrap-around logic\r\n-    if (isWrappingToStart) {\r\n-      setDirection(\"up\");\r\n-    } else if (isWrappingToEnd) {\r\n-      setDirection(\"down\");\r\n-    } else {\r\n-      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n-    }\r\n-\r\n-    // Pause the video in the old slide when changing slides\r\n-    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n-      videoRefs.current[oldIndex].pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleAfterChange = (current) => {\r\n-    setActiveSlide(current);\r\n-    setCurrentSlide(current);\r\n-\r\n-    // Update the video reference for the active slide\r\n-    const currentVideoRef = videoRefs.current[current];\r\n-    if (currentVideoRef) {\r\n-      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n-    } else {\r\n-      updateVideoRef(\"leadersVoiceVideo\", null);\r\n-    }\r\n-\r\n-    const newRotation = [...rotation];\r\n-    newRotation[current] = true;\r\n-    setRotation(newRotation);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Update the video reference for the initial slide\r\n-    if (videoRefs.current[0]) {\r\n-      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n-    }\r\n-  }, []); // Run only once on component mount\r\n-\r\n-  useEffect(() => {\r\n-    // Play the video of the initial active slide\r\n-    const initialVideo = videoRefs.current[0];\r\n-    if (initialVideo) {\r\n-      initialVideo.play().catch(e => console.error(\"Error playing video:\", e));\r\n-    }\r\n-  }, []);\r\n-  \r\n-\r\n-  const handleVideoPlay = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleVideoPause = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.play();\r\n-    }\r\n-  };\r\n-\r\n-  const sliderSettings = {\r\n-    autoplay: true,\r\n-    autoplaySpeed: 6000,\r\n-    infinite: true,\r\n-    speed: 1500,\r\n-    slidesToShow: 1,\r\n-    slidesToScroll: 1,\r\n-    vertical: true,\r\n-    verticalSwiping: true,\r\n-    centerPadding: \"0\",\r\n-    beforeChange: (oldIndex, newIndex) => {\r\n-      handleBeforeChange(oldIndex, newIndex);\r\n-      handleSlideChange(newIndex);\r\n-    },\r\n-    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n-    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n-    afterChange: handleAfterChange, // Use the new handler here\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Assuming sliderRef is a ref to your Slider component\r\n-    autoplayManager.current = sliderRef.current.slickPause\r\n-      ? {\r\n-          pause: () => sliderRef.current.slickPause(),\r\n-          play: () => sliderRef.current.slickPlay(),\r\n-        }\r\n-      : null;\r\n-\r\n-    // Add event listeners to each video element\r\n-    videoRefs.current.forEach((video) => {\r\n-      video.addEventListener(\"play\", handleVideoPlay);\r\n-      video.addEventListener(\"pause\", handleVideoPause);\r\n-    });\r\n-\r\n-    // Cleanup: remove event listeners when component unmounts\r\n-    return () => {\r\n-      videoRefs.current.forEach((video) => {\r\n-        if (video) {\r\n-          video.removeEventListener(\"play\", handleVideoPlay);\r\n-          video.removeEventListener(\"pause\", handleVideoPause);\r\n-        }\r\n-      });\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Function to split the quote into words and wrap each word with a span\r\n-  const renderQuote = (quote, slideIndex) => {\r\n-    // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(\" \").map((word, index) => (\r\n-      <React.Fragment key={`${slideIndex}-${index}`}>\r\n-        <span\r\n-          style={{\r\n-            animation: `fade-in 0.8s ${\r\n-              0.1 * (index + 1)\r\n-            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: \"inline-block\",\r\n-            opacity: 0,\r\n-            filter: \"blur(4px)\",\r\n-            marginRight: \"1px\", // Add some space to the right of each word\r\n-          }}\r\n-        >\r\n-          {word}\r\n-        </span>{\" \"}\r\n-        {/* This space is important to keep words separate */}\r\n-      </React.Fragment>\r\n-    ));\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"homepage__leadersvoice\">\r\n-      <div>\r\n-        <h1 className=\"heading\">Leader's Voice</h1>\r\n-      </div>\r\n-      <div className=\"leader-carousel-container\">\r\n-        <Slider ref={sliderRef} {...sliderSettings}>\r\n-          {homepage_leaders_voice.map((slide, index) => (\r\n-            <div key={slide.key}>\r\n-              <section className=\"content\">\r\n-                <div className=\"slide\">\r\n-                  <h2 className=\"text\">\r\n-                    {\" \"}\r\n-                    {renderQuote(slide.content.quote, currentSlide)}\r\n-                  </h2>\r\n-                  <div className=\"videopart\">\r\n-                    <video\r\n-                      key={slide.key} // Add a unique key to force remount on slide change\r\n-                      ref={(el) => {\r\n-                        videoRefs.current[index] = el;\r\n-                        if (index === currentSlide) {\r\n-                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n-                        }\r\n-                      }}\r\n-                      controls\r\n-                      preload=\"auto\"\r\n-                    >\r\n-                      <source src={slide.content.video} type=\"video/mp4\" />\r\n-                    </video>\r\n-\r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n-                  </div>\r\n-                  {/* <img\r\n-                    src={braneback}\r\n-                    className={`vertical-swirlblue \r\n-                      ${\r\n-                        index === currentSlide\r\n-                          ? `vertical-swirlblue-animate-${direction}`\r\n-                          : rotation[index]\r\n-                          ? \"vertical-swirlblue-rotated\"\r\n-                          : \"\"\r\n-                      }`\r\n-                    }\r\n-                    alt=\"swirl\"\r\n-                  /> */}\r\n-                </div>\r\n-              </section>\r\n-            </div>\r\n-          ))}\r\n-        </Slider>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default LeadersVoice;\r\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import Slider from \"react-slick\";\r\n-import \"slick-carousel/slick/slick.css\";\r\n-import \"slick-carousel/slick/slick-theme.css\";\r\n-import braneback from \"../../assets/swril-blue-thick.svg\";\r\n-import arrow from \"../../assets/uparrow.svg\";\r\n-\r\n-// Custom arrow components\r\n-const PrevArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-prev-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Previous\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const NextArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-next-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Next\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n-  const [currentSlide, setCurrentSlide] = useState(0);\r\n-  const videoRefs = useRef([]);\r\n-  const sliderRef = useRef(null);\r\n-  const autoplayManager = useRef(null);\r\n-  const [activeSlide, setActiveSlide] = useState(0);\r\n-  const [rotation, setRotation] = useState(\r\n-    Array(homepage_leaders_voice.length).fill(false)\r\n-  );\r\n-  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n-\r\n-  const handleSlideChange = (index) => {\r\n-    setCurrentSlide(index);\r\n-  };\r\n-\r\n-  const handleBeforeChange = (oldIndex, newIndex) => {\r\n-    // Check if the slider is transitioning from the last slide to the first slide\r\n-    const isWrappingToStart =\r\n-      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n-    // Check if the slider is transitioning from the first slide to the last slide\r\n-    const isWrappingToEnd =\r\n-      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n-\r\n-    // Determine the direction of the slide change with wrap-around logic\r\n-    if (isWrappingToStart) {\r\n-      setDirection(\"up\");\r\n-    } else if (isWrappingToEnd) {\r\n-      setDirection(\"down\");\r\n-    } else {\r\n-      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n-    }\r\n-\r\n-    // Pause the video in the old slide when changing slides\r\n-    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n-      videoRefs.current[oldIndex].pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleAfterChange = (current) => {\r\n-    setActiveSlide(current);\r\n-    setCurrentSlide(current);\r\n-\r\n-    // Update the video reference for the active slide\r\n-    const currentVideoRef = videoRefs.current[current];\r\n-    if (currentVideoRef) {\r\n-      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n-    } else {\r\n-      updateVideoRef(\"leadersVoiceVideo\", null);\r\n-    }\r\n-\r\n-    const newRotation = [...rotation];\r\n-    newRotation[current] = true;\r\n-    setRotation(newRotation);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Update the video reference for the initial slide\r\n-    if (videoRefs.current[0]) {\r\n-      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n-    }\r\n-  }, []); // Run only once on component mount\r\n-\r\n-  const handleVideoPlay = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleVideoPause = () => {\r\n-    if (autoplayManager.current) {\r\n-      autoplayManager.current.play();\r\n-    }\r\n-  };\r\n-\r\n-  const sliderSettings = {\r\n-    autoplay: true,\r\n-    autoplaySpeed: 6000,\r\n-    infinite: true,\r\n-    speed: 1500,\r\n-    slidesToShow: 1,\r\n-    slidesToScroll: 1,\r\n-    vertical: true,\r\n-    verticalSwiping: true,\r\n-    centerPadding: \"0\",\r\n-    beforeChange: (oldIndex, newIndex) => {\r\n-      handleBeforeChange(oldIndex, newIndex);\r\n-      handleSlideChange(newIndex);\r\n-    },\r\n-    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n-    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n-    afterChange: handleAfterChange, // Use the new handler here\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Assuming sliderRef is a ref to your Slider component\r\n-    autoplayManager.current = sliderRef.current.slickPause\r\n-      ? {\r\n-          pause: () => sliderRef.current.slickPause(),\r\n-          play: () => sliderRef.current.slickPlay(),\r\n-        }\r\n-      : null;\r\n-\r\n-    // Add event listeners to each video element\r\n-    videoRefs.current.forEach((video) => {\r\n-      video.addEventListener(\"play\", handleVideoPlay);\r\n-      video.addEventListener(\"pause\", handleVideoPause);\r\n-    });\r\n-\r\n-    // Cleanup: remove event listeners when component unmounts\r\n-    return () => {\r\n-      videoRefs.current.forEach((video) => {\r\n-        if (video) {\r\n-          video.removeEventListener(\"play\", handleVideoPlay);\r\n-          video.removeEventListener(\"pause\", handleVideoPause);\r\n-        }\r\n-      });\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Function to split the quote into words and wrap each word with a span\r\n-  const renderQuote = (quote, slideIndex) => {\r\n-    // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(\" \").map((word, index) => (\r\n-      <React.Fragment key={`${slideIndex}-${index}`}>\r\n-        <span\r\n-          style={{\r\n-            animation: `fade-in 0.8s ${\r\n-              0.1 * (index + 1)\r\n-            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: \"inline-block\",\r\n-            opacity: 0,\r\n-            filter: \"blur(4px)\",\r\n-            marginRight: \"1px\", // Add some space to the right of each word\r\n-          }}\r\n-        >\r\n-          {word}\r\n-        </span>{\" \"}\r\n-        {/* This space is important to keep words separate */}\r\n-      </React.Fragment>\r\n-    ));\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"homepage__leadersvoice\">\r\n-      <div>\r\n-        <h1 className=\"heading\">Leader's Voice</h1>\r\n-      </div>\r\n-      <div className=\"leader-carousel-container\">\r\n-        <Slider ref={sliderRef} {...sliderSettings}>\r\n-          {homepage_leaders_voice.map((slide, index) => (\r\n-            <div key={slide.key}>\r\n-              <section className=\"content\">\r\n-                <div className=\"slide\">\r\n-                  <h2 className=\"text\">\r\n-                    {\" \"}\r\n-                    {renderQuote(slide.content.quote, currentSlide)}\r\n-                  </h2>\r\n-                  <div className=\"videopart\">\r\n-                    <video\r\n-                      key={slide.key} // Add a unique key to force remount on slide change\r\n-                      ref={(el) => {\r\n-                        videoRefs.current[index] = el;\r\n-                        if (index === currentSlide) {\r\n-                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n-                        }\r\n-                      }}\r\n-                      controls\r\n-                      preload=\"auto\"\r\n-                    >\r\n-                      <source src={slide.content.video} type=\"video/mp4\" />\r\n-                    </video>\r\n-\r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n-                  </div>\r\n-                  {/* <img\r\n-                    src={braneback}\r\n-                    className={`vertical-swirlblue \r\n-                      ${\r\n-                        index === currentSlide\r\n-                          ? `vertical-swirlblue-animate-${direction}`\r\n-                          : rotation[index]\r\n-                          ? \"vertical-swirlblue-rotated\"\r\n-                          : \"\"\r\n-                      }`\r\n-                    }\r\n-                    alt=\"swirl\"\r\n-                  /> */}\r\n-                </div>\r\n-              </section>\r\n-            </div>\r\n-          ))}\r\n-        </Slider>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default LeadersVoice;\r\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import Slider from \"react-slick\";\r\n-import \"slick-carousel/slick/slick.css\";\r\n-import \"slick-carousel/slick/slick-theme.css\";\r\n-import braneback from \"../../assets/swril-blue-thick.svg\";\r\n-import arrow from \"../../assets/uparrow.svg\";\r\n-\r\n-// Custom arrow components\r\n-const PrevArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-prev-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Previous\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const NextArrow = (props) => {\r\n-  const { className, style, onClick } = props;\r\n-  return (\r\n-    <div\r\n-      className={`${className} custom-arrow custom-next-arrow`}\r\n-      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n-      onClick={onClick}\r\n-    >\r\n-      <img src={arrow} alt=\"Next\" />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n-  const [currentSlide, setCurrentSlide] = useState(0);\r\n-  const videoRefs = useRef([]);\r\n-  const sliderRef = useRef(null);\r\n-  const autoplayManager = useRef(null);\r\n-  const [activeSlide, setActiveSlide] = useState(0);\r\n-  const [rotation, setRotation] = useState(\r\n-    Array(homepage_leaders_voice.length).fill(false)\r\n-  );\r\n-  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n-\r\n-  const handleSlideChange = (index) => {\r\n-    setCurrentSlide(index);\r\n-  };\r\n-\r\n-  const handleBeforeChange = (oldIndex, newIndex) => {\r\n-    // Check if the slider is transitioning from the last slide to the first slide\r\n-    const isWrappingToStart =\r\n-      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n-    // Check if the slider is transitioning from the first slide to the last slide\r\n-    const isWrappingToEnd =\r\n-      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n-\r\n-    // Determine the direction of the slide change with wrap-around logic\r\n-    if (isWrappingToStart) {\r\n-      setDirection(\"up\");\r\n-    } else if (isWrappingToEnd) {\r\n-      setDirection(\"down\");\r\n-    } else {\r\n-      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n-    }\r\n-\r\n-    // Pause the video in the old slide when changing slides\r\n-    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n-      videoRefs.current[oldIndex].pause();\r\n-    }\r\n-  };\r\n-\r\n-  const handleAfterChange = (current) => {\r\n-    setActiveSlide(current);\r\n-    setCurrentSlide(current);\r\n-\r\n-    // Update the video reference for the active slide\r\n-    const currentVideoRef = videoRefs.current[current];\r\n-    if (currentVideoRef) {\r\n-      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n-    } else {\r\n-      updateVideoRef(\"leadersVoiceVideo\", null);\r\n-    }\r\n-\r\n-    const newRotation = [...rotation];\r\n-    newRotation[current] = true;\r\n-    setRotation(newRotation);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Update the video reference for the initial slide\r\n-    if (videoRefs.current[0]) {\r\n-      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n-    }\r\n-  }, []); // Run only once on component mount\r\n-\r\n-  const handleVideoPlay = () => {\r\n-    if (autoplayManager.current) {\r\n-        autoplayManager.current.pause();\r\n-    }\r\n-};\r\n-\r\n-const handleVideoPause = () => {\r\n-    if (autoplayManager.current) {\r\n-        autoplayManager.current.play();\r\n-    }\r\n-};\r\n-\r\n-\r\n-  const sliderSettings = {\r\n-    autoplay: true,\r\n-    autoplaySpeed: 6000,\r\n-    infinite: true,\r\n-    speed: 1500,\r\n-    slidesToShow: 1,\r\n-    slidesToScroll: 1,\r\n-    vertical: true,\r\n-    verticalSwiping: true,\r\n-    centerPadding: \"0\",\r\n-    beforeChange: (oldIndex, newIndex) => {\r\n-      handleBeforeChange(oldIndex, newIndex);\r\n-      handleSlideChange(newIndex);\r\n-    },\r\n-    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n-    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n-    afterChange: handleAfterChange, // Use the new handler here\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    // Assuming sliderRef is a ref to your Slider component\r\n-    autoplayManager.current = sliderRef.current.slickPause ? {\r\n-      pause: () => sliderRef.current.slickPause(),\r\n-      play: () => sliderRef.current.slickPlay()\r\n-  } : null;\r\n-\r\n-    // Add event listeners to each video element\r\n-    videoRefs.current.forEach((video) => {\r\n-      video.addEventListener(\"play\", handleVideoPlay);\r\n-      video.addEventListener(\"pause\", handleVideoPause);\r\n-    });\r\n-\r\n-    // Cleanup: remove event listeners when component unmounts\r\n-    return () => {\r\n-      videoRefs.current.forEach((video) => {\r\n-        if (video) {\r\n-          video.removeEventListener(\"play\", handleVideoPlay);\r\n-          video.removeEventListener(\"pause\", handleVideoPause);\r\n-        }\r\n-      });\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Function to split the quote into words and wrap each word with a span\r\n-  const renderQuote = (quote, slideIndex) => {\r\n-    // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(\" \").map((word, index) => (\r\n-      <React.Fragment key={`${slideIndex}-${index}`}>\r\n-        <span\r\n-          style={{\r\n-            animation: `fade-in 0.8s ${\r\n-              0.1 * (index + 1)\r\n-            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: \"inline-block\",\r\n-            opacity: 0,\r\n-            filter: \"blur(4px)\",\r\n-            marginRight: \"1px\", // Add some space to the right of each word\r\n-          }}\r\n-        >\r\n-          {word}\r\n-        </span>{\" \"}\r\n-        {/* This space is important to keep words separate */}\r\n-      </React.Fragment>\r\n-    ));\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"homepage__leadersvoice\">\r\n-      <div>\r\n-        <h1 className=\"heading\">Leader's Voice</h1>\r\n-      </div>\r\n-      <div className=\"leader-carousel-container\">\r\n-        <Slider ref={sliderRef} {...sliderSettings}>\r\n-          {homepage_leaders_voice.map((slide, index) => (\r\n-            <div key={slide.key}>\r\n-              <section className=\"content\">\r\n-                <div className=\"slide\">\r\n-                  <h2 className=\"text\">\r\n-                    {\" \"}\r\n-                    {renderQuote(slide.content.quote, currentSlide)}\r\n-                  </h2>\r\n-                  <div className=\"videopart\">\r\n-                    <video\r\n-                      ref={(el) => {\r\n-                        videoRefs.current[index] = el;\r\n-                        if (index === currentSlide) {\r\n-                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n-                        }\r\n-                      }}\r\n-                      controls\r\n-                      preload=\"auto\" // Added preload attribute\r\n-                      // Removed poster attribute to ensure the video is visible\r\n-                    >\r\n-                      <source src={slide.content.video} type=\"video/mp4\" />\r\n-                    </video>\r\n-\r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n-                  </div>\r\n-                  {/* <img\r\n-                    src={braneback}\r\n-                    className={`vertical-swirlblue \r\n-                      ${\r\n-                        index === currentSlide\r\n-                          ? `vertical-swirlblue-animate-${direction}`\r\n-                          : rotation[index]\r\n-                          ? \"vertical-swirlblue-rotated\"\r\n-                          : \"\"\r\n-                      }`\r\n-                    }\r\n-                    alt=\"swirl\"\r\n-                  /> */}\r\n-                </div>\r\n-              </section>\r\n-            </div>\r\n-          ))}\r\n-        </Slider>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default LeadersVoice;\r\n"
                },
                {
                    "date": 1700733020558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,39 +70,18 @@\n     }\r\n   };\r\n \r\n   const handleAfterChange = (current) => {\r\n+    // Set the rotation state to true for the current slide\r\n     setActiveSlide(current);\r\n     setCurrentSlide(current);\r\n-  \r\n-    const currentVideoRef = videoRefs.current[current];\r\n-    if (currentVideoRef) {\r\n-      currentVideoRef.play().catch(e => console.error(\"Error playing video:\", e));\r\n-      updateVideoRef(\"leadersVoiceVideo\", currentVideoRef);\r\n-    } else {\r\n-      updateVideoRef(\"leadersVoiceVideo\", null);\r\n-    }\r\n-    console.log(`Current video element: `, videoRefs.current[current]);\r\n-\r\n+     // Update the video reference for the active slide\r\n+     updateVideoRef('leadersVoiceVideo', videoRefs.current[current]);\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true; // Only the current slide will have the rotation state true\r\n+    setRotation(newRotation);\r\n   };\r\n-  \r\n \r\n-  useEffect(() => {\r\n-    // Update the video reference for the initial slide\r\n-    if (videoRefs.current[0]) {\r\n-      updateVideoRef(\"leadersVoiceVideo\", videoRefs.current[0]);\r\n-    }\r\n-  }, []); // Run only once on component mount\r\n-\r\n-  useEffect(() => {\r\n-    // Play the video of the initial active slide\r\n-    const initialVideo = videoRefs.current[0];\r\n-    if (initialVideo) {\r\n-      initialVideo.play().catch(e => console.error(\"Error playing video:\", e));\r\n-    }\r\n-  }, []);\r\n-  \r\n-\r\n   const handleVideoPlay = () => {\r\n     if (autoplayManager.current) {\r\n       autoplayManager.current.pause();\r\n     }\r\n@@ -133,15 +112,10 @@\n     afterChange: handleAfterChange, // Use the new handler here\r\n   };\r\n \r\n   useEffect(() => {\r\n-    // Assuming sliderRef is a ref to your Slider component\r\n-    autoplayManager.current = sliderRef.current.slickPause\r\n-      ? {\r\n-          pause: () => sliderRef.current.slickPause(),\r\n-          play: () => sliderRef.current.slickPlay(),\r\n-        }\r\n-      : null;\r\n+    // Initialize the autoplay manager\r\n+    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n \r\n     // Add event listeners to each video element\r\n     videoRefs.current.forEach((video) => {\r\n       video.addEventListener(\"play\", handleVideoPlay);\r\n@@ -161,28 +135,26 @@\n \r\n   // Function to split the quote into words and wrap each word with a span\r\n   const renderQuote = (quote, slideIndex) => {\r\n     // Split the quote into words and map over it to return an array of spans\r\n-    return quote.split(\" \").map((word, index) => (\r\n+    return quote.split(' ').map((word, index) => (\r\n       <React.Fragment key={`${slideIndex}-${index}`}>\r\n         <span\r\n           style={{\r\n-            animation: `fade-in 0.8s ${\r\n-              0.1 * (index + 1)\r\n-            }s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n-            display: \"inline-block\",\r\n+            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: 'inline-block',\r\n             opacity: 0,\r\n-            filter: \"blur(4px)\",\r\n-            marginRight: \"1px\", // Add some space to the right of each word\r\n+            filter: 'blur(4px)',\r\n+            marginRight: '1px', // Add some space to the right of each word\r\n           }}\r\n         >\r\n           {word}\r\n-        </span>{\" \"}\r\n-        {/* This space is important to keep words separate */}\r\n+        </span>{' '} {/* This space is important to keep words separate */}\r\n       </React.Fragment>\r\n     ));\r\n   };\r\n \r\n+\r\n   return (\r\n     <div className=\"homepage__leadersvoice\">\r\n       <div>\r\n         <h1 className=\"heading\">Leader's Voice</h1>\r\n@@ -192,28 +164,24 @@\n           {homepage_leaders_voice.map((slide, index) => (\r\n             <div key={slide.key}>\r\n               <section className=\"content\">\r\n                 <div className=\"slide\">\r\n-                  <h2 className=\"text\">\r\n-                    {\" \"}\r\n-                    {renderQuote(slide.content.quote, currentSlide)}\r\n-                  </h2>\r\n+                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n                   <div className=\"videopart\">\r\n-                    <video\r\n-                      key={slide.key} // Add a unique key to force remount on slide change\r\n-                      ref={(el) => {\r\n-                        videoRefs.current[index] = el;\r\n-                        if (index === currentSlide) {\r\n-                          updateVideoRef(\"leadersVoiceVideo\", el);\r\n-                        }\r\n-                      }}\r\n-                      controls\r\n-                      preload=\"auto\"\r\n-                    >\r\n-                      <source src={slide.content.video} type=\"video/mp4\" />\r\n-                    </video>\r\n+                  <video\r\n+                    ref={(el) => {\r\n+                      videoRefs.current[index] = el; // Associate each video element with its ref\r\n+                      if (index === currentSlide) {\r\n+                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n+                      }\r\n+                    }}\r\n+                    controls\r\n+                    poster={slide.content.thumbnail}\r\n+                  >\r\n+                    <source src={slide.content.video} type=\"video/mp4\" />\r\n+                  </video>\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n \r\n-                    <p className=\"caption\">{slide.content.caption}</p>\r\n                   </div>\r\n                   {/* <img\r\n                     src={braneback}\r\n                     className={`vertical-swirlblue \r\n@@ -227,8 +195,9 @@\n                     }\r\n                     alt=\"swirl\"\r\n                   /> */}\r\n                 </div>\r\n+                \r\n               </section>\r\n             </div>\r\n           ))}\r\n         </Slider>\r\n@@ -236,5 +205,5 @@\n     </div>\r\n   );\r\n }\r\n \r\n-export default LeadersVoice;\r\n+export default LeadersVoice;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700733136703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import Slider from \"react-slick\";\r\n+import \"slick-carousel/slick/slick.css\";\r\n+import \"slick-carousel/slick/slick-theme.css\";\r\n+import braneback from \"../../assets/swril-blue-thick.svg\";\r\n+import arrow from \"../../assets/uparrow.svg\";\r\n+\r\n+// Custom arrow components\r\n+const PrevArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-prev-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Previous\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const NextArrow = (props) => {\r\n+  const { className, style, onClick } = props;\r\n+  return (\r\n+    <div\r\n+      className={`${className} custom-arrow custom-next-arrow`}\r\n+      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n+      onClick={onClick}\r\n+    >\r\n+      <img src={arrow} alt=\"Next\" />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+function LeadersVoice({ homepage_leaders_voice, updateVideoRef }) {\r\n+  const [currentSlide, setCurrentSlide] = useState(0);\r\n+  const videoRefs = useRef([]);\r\n+  const sliderRef = useRef(null);\r\n+  const autoplayManager = useRef(null);\r\n+  const [activeSlide, setActiveSlide] = useState(0);\r\n+  const [rotation, setRotation] = useState(\r\n+    Array(homepage_leaders_voice.length).fill(false)\r\n+  );\r\n+  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n+\r\n+  const handleSlideChange = (index) => {\r\n+    setCurrentSlide(index);\r\n+  };\r\n+\r\n+  const handleBeforeChange = (oldIndex, newIndex) => {\r\n+    // Check if the slider is transitioning from the last slide to the first slide\r\n+    const isWrappingToStart =\r\n+      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n+    // Check if the slider is transitioning from the first slide to the last slide\r\n+    const isWrappingToEnd =\r\n+      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n+\r\n+    // Determine the direction of the slide change with wrap-around logic\r\n+    if (isWrappingToStart) {\r\n+      setDirection(\"up\");\r\n+    } else if (isWrappingToEnd) {\r\n+      setDirection(\"down\");\r\n+    } else {\r\n+      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n+    }\r\n+\r\n+    // Pause the video in the old slide when changing slides\r\n+    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n+      videoRefs.current[oldIndex].pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleAfterChange = (current) => {\r\n+    // Set the rotation state to true for the current slide\r\n+    setActiveSlide(current);\r\n+    setCurrentSlide(current);\r\n+     // Update the video reference for the active slide\r\n+     updateVideoRef('leadersVoiceVideo', videoRefs.current[current]);\r\n+    const newRotation = [...rotation];\r\n+    newRotation[current] = true; // Only the current slide will have the rotation state true\r\n+    setRotation(newRotation);\r\n+  };\r\n+\r\n+  const handleVideoPlay = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.pause();\r\n+    }\r\n+  };\r\n+\r\n+  const handleVideoPause = () => {\r\n+    if (autoplayManager.current) {\r\n+      autoplayManager.current.play();\r\n+    }\r\n+  };\r\n+\r\n+  const sliderSettings = {\r\n+    autoplay: true,\r\n+    autoplaySpeed: 6000,\r\n+    infinite: true,\r\n+    speed: 1500,\r\n+    slidesToShow: 1,\r\n+    slidesToScroll: 1,\r\n+    vertical: true,\r\n+    verticalSwiping: true,\r\n+    centerPadding: \"0\",\r\n+    beforeChange: (oldIndex, newIndex) => {\r\n+      handleBeforeChange(oldIndex, newIndex);\r\n+      handleSlideChange(newIndex);\r\n+    },\r\n+    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n+    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n+    afterChange: handleAfterChange, // Use the new handler here\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    // Initialize the autoplay manager\r\n+    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n+\r\n+    // Add event listeners to each video element\r\n+    videoRefs.current.forEach((video) => {\r\n+      video.addEventListener(\"play\", handleVideoPlay);\r\n+      video.addEventListener(\"pause\", handleVideoPause);\r\n+    });\r\n+\r\n+    // Cleanup: remove event listeners when component unmounts\r\n+    return () => {\r\n+      videoRefs.current.forEach((video) => {\r\n+        if (video) {\r\n+          video.removeEventListener(\"play\", handleVideoPlay);\r\n+          video.removeEventListener(\"pause\", handleVideoPause);\r\n+        }\r\n+      });\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Function to split the quote into words and wrap each word with a span\r\n+  const renderQuote = (quote, slideIndex) => {\r\n+    // Split the quote into words and map over it to return an array of spans\r\n+    return quote.split(' ').map((word, index) => (\r\n+      <React.Fragment key={`${slideIndex}-${index}`}>\r\n+        <span\r\n+          style={{\r\n+            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n+            display: 'inline-block',\r\n+            opacity: 0,\r\n+            filter: 'blur(4px)',\r\n+            marginRight: '1px', // Add some space to the right of each word\r\n+          }}\r\n+        >\r\n+          {word}\r\n+        </span>{' '} {/* This space is important to keep words separate */}\r\n+      </React.Fragment>\r\n+    ));\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className=\"homepage__leadersvoice\">\r\n+      <div>\r\n+        <h1 className=\"heading\">Leader's Voice</h1>\r\n+      </div>\r\n+      <div className=\"leader-carousel-container\">\r\n+        <Slider ref={sliderRef} {...sliderSettings}>\r\n+          {homepage_leaders_voice.map((slide, index) => (\r\n+            <div key={slide.key}>\r\n+              <section className=\"content\">\r\n+                <div className=\"slide\">\r\n+                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n+                  <div className=\"videopart\">\r\n+                  <video\r\n+                    ref={(el) => {\r\n+                      videoRefs.current[index] = el; // Associate each video element with its ref\r\n+                      if (index === currentSlide) {\r\n+                        updateVideoRef('leadersVoiceVideo', el); // Update the ref for the current slide\r\n+                      }\r\n+                    }}\r\n+                    controls\r\n+                    poster={slide.content.thumbnail}\r\n+                  >\r\n+                    <source src={slide.content.video} type=\"video/mp4\" />\r\n+                  </video>\r\n+                    <p className=\"caption\">{slide.content.caption}</p>\r\n+\r\n+                  </div>\r\n+                  {/* <img\r\n+                    src={braneback}\r\n+                    className={`vertical-swirlblue \r\n+                      ${\r\n+                        index === currentSlide\r\n+                          ? `vertical-swirlblue-animate-${direction}`\r\n+                          : rotation[index]\r\n+                          ? \"vertical-swirlblue-rotated\"\r\n+                          : \"\"\r\n+                      }`\r\n+                    }\r\n+                    alt=\"swirl\"\r\n+                  /> */}\r\n+                </div>\r\n+                \r\n+              </section>\r\n+            </div>\r\n+          ))}\r\n+        </Slider>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default LeadersVoice;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1700655744317,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport braneback from \"../../assets/swril-blue-thick.svg\";\r\nimport arrow from \"../../assets/uparrow.svg\";\r\n\r\n// Custom arrow components\r\nconst PrevArrow = (props) => {\r\n  const { className, style, onClick } = props;\r\n  return (\r\n    <div\r\n      className={`${className} custom-arrow custom-prev-arrow`}\r\n      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n      onClick={onClick}\r\n    >\r\n      <img src={arrow} alt=\"Previous\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst NextArrow = (props) => {\r\n  const { className, style, onClick } = props;\r\n  return (\r\n    <div\r\n      className={`${className} custom-arrow custom-next-arrow`}\r\n      style={{ ...style, display: \"block\" }} // Ensure the custom arrow is displayed\r\n      onClick={onClick}\r\n    >\r\n      <img src={arrow} alt=\"Next\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction LeadersVoice({ homepage_leaders_voice }) {\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  const videoRefs = useRef([]);\r\n  const sliderRef = useRef(null);\r\n  const autoplayManager = useRef(null);\r\n  const [activeSlide, setActiveSlide] = useState(0);\r\n  const [rotation, setRotation] = useState(\r\n    Array(homepage_leaders_voice.length).fill(false)\r\n  );\r\n  const [direction, setDirection] = useState(\"up\"); // Default direction\r\n\r\n  const handleSlideChange = (index) => {\r\n    setCurrentSlide(index);\r\n  };\r\n\r\n  const handleBeforeChange = (oldIndex, newIndex) => {\r\n    // Check if the slider is transitioning from the last slide to the first slide\r\n    const isWrappingToStart =\r\n      oldIndex === homepage_leaders_voice.length - 1 && newIndex === 0;\r\n    // Check if the slider is transitioning from the first slide to the last slide\r\n    const isWrappingToEnd =\r\n      oldIndex === 0 && newIndex === homepage_leaders_voice.length - 1;\r\n\r\n    // Determine the direction of the slide change with wrap-around logic\r\n    if (isWrappingToStart) {\r\n      setDirection(\"up\");\r\n    } else if (isWrappingToEnd) {\r\n      setDirection(\"down\");\r\n    } else {\r\n      setDirection(newIndex > oldIndex ? \"up\" : \"down\");\r\n    }\r\n\r\n    // Pause the video in the old slide when changing slides\r\n    if (videoRefs.current[oldIndex] && !videoRefs.current[oldIndex].paused) {\r\n      videoRefs.current[oldIndex].pause();\r\n    }\r\n  };\r\n\r\n  const handleAfterChange = (current) => {\r\n    // Set the rotation state to true for the current slide\r\n    setActiveSlide(current);\r\n    const newRotation = [...rotation];\r\n    newRotation[current] = true; // Only the current slide will have the rotation state true\r\n    setRotation(newRotation);\r\n  };\r\n\r\n  const handleVideoPlay = () => {\r\n    if (autoplayManager.current) {\r\n      autoplayManager.current.pause();\r\n    }\r\n  };\r\n\r\n  const handleVideoPause = () => {\r\n    if (autoplayManager.current) {\r\n      autoplayManager.current.play();\r\n    }\r\n  };\r\n\r\n  const sliderSettings = {\r\n    autoplay: true,\r\n    autoplaySpeed: 6000,\r\n    infinite: true,\r\n    speed: 1500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    vertical: true,\r\n    verticalSwiping: true,\r\n    centerPadding: \"0\",\r\n    beforeChange: (oldIndex, newIndex) => {\r\n      handleBeforeChange(oldIndex, newIndex);\r\n      handleSlideChange(newIndex);\r\n    },\r\n    prevArrow: <PrevArrow />, // Use the custom previous arrow component\r\n    nextArrow: <NextArrow />, // Use the custom next arrow component\r\n    afterChange: handleAfterChange, // Use the new handler here\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initialize the autoplay manager\r\n    autoplayManager.current = sliderRef.current.innerSlider.autoPlay;\r\n\r\n    // Add event listeners to each video element\r\n    videoRefs.current.forEach((video) => {\r\n      video.addEventListener(\"play\", handleVideoPlay);\r\n      video.addEventListener(\"pause\", handleVideoPause);\r\n    });\r\n\r\n    // Cleanup: remove event listeners when component unmounts\r\n    return () => {\r\n      videoRefs.current.forEach((video) => {\r\n        if (video) {\r\n          video.removeEventListener(\"play\", handleVideoPlay);\r\n          video.removeEventListener(\"pause\", handleVideoPause);\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // Function to split the quote into words and wrap each word with a span\r\n  const renderQuote = (quote, slideIndex) => {\r\n    // Split the quote into words and map over it to return an array of spans\r\n    return quote.split(' ').map((word, index) => (\r\n      <React.Fragment key={`${slideIndex}-${index}`}>\r\n        <span\r\n          style={{\r\n            animation: `fade-in 0.8s ${0.1 * (index + 1)}s forwards cubic-bezier(0.11, 0, 0.5, 0)`,\r\n            display: 'inline-block',\r\n            opacity: 0,\r\n            filter: 'blur(4px)',\r\n            marginRight: '1px', // Add some space to the right of each word\r\n          }}\r\n        >\r\n          {word}\r\n        </span>{' '} {/* This space is important to keep words separate */}\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"homepage__leadersvoice\">\r\n      <div>\r\n        <h1 className=\"heading\">Leader's Voice</h1>\r\n      </div>\r\n      <div className=\"leader-carousel-container\">\r\n        <Slider ref={sliderRef} {...sliderSettings}>\r\n          {homepage_leaders_voice.map((slide, index) => (\r\n            <div key={slide.key}>\r\n              <section className=\"content\">\r\n                <div className=\"slide\">\r\n                  <h2 className=\"text\"> {renderQuote(slide.content.quote, currentSlide)}</h2>\r\n                  <div className=\"videopart\">\r\n                    <video\r\n                      ref={(el) => (videoRefs.current[index] = el)}\r\n                      controls\r\n                      poster={slide.content.thumbnail}\r\n                    >\r\n                      <source src={slide.content.video} type=\"video/mp4\" />\r\n                    </video>\r\n                    <p className=\"caption\">{slide.content.caption}</p>\r\n\r\n                  </div>\r\n                  {/* <img\r\n                    src={braneback}\r\n                    className={`vertical-swirlblue \r\n                      ${\r\n                        index === currentSlide\r\n                          ? `vertical-swirlblue-animate-${direction}`\r\n                          : rotation[index]\r\n                          ? \"vertical-swirlblue-rotated\"\r\n                          : \"\"\r\n                      }`\r\n                    }\r\n                    alt=\"swirl\"\r\n                  /> */}\r\n                </div>\r\n                \r\n              </section>\r\n            </div>\r\n          ))}\r\n        </Slider>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeadersVoice;"
        }
    ]
}