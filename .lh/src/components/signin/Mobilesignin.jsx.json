{
    "sourceFile": "src/components/signin/Mobilesignin.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1700736097991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700736149080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,13 +282,14 @@\n \r\n // Rest of your component code\r\n \r\n \r\n-  useEffect(() => {\r\n-    if (triggerLogin) {\r\n-      handleSubmit(); // Assuming handleSubmit is your login function\r\n-    }\r\n-  }, [triggerLogin]);\r\n+useEffect(() => {\r\n+  if (triggerLogin) {\r\n+    handleSubmit(); // Your existing login function\r\n+    setTriggerLogin(false); // Reset the trigger\r\n+  }\r\n+}, [triggerLogin]);\r\n \r\n   // Panda Animation Functions\r\n   const handleFocusPhoneNumber = () => {\r\n     document.querySelector(\".eyeball-l\").style.cssText =\r\n"
                },
                {
                    "date": 1700742109278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,13 +284,14 @@\n \r\n \r\n useEffect(() => {\r\n   if (triggerLogin) {\r\n-    handleSubmit(); // Your existing login function\r\n-    setTriggerLogin(false); // Reset the trigger\r\n+    handleSubmit(); // Call your login function\r\n+    // Reset the flag if necessary\r\n   }\r\n }, [triggerLogin]);\r\n \r\n+\r\n   // Panda Animation Functions\r\n   const handleFocusPhoneNumber = () => {\r\n     document.querySelector(\".eyeball-l\").style.cssText =\r\n       \"left: 0.75em; top: 1.12em;\";\r\n"
                },
                {
                    "date": 1700742287535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,10 @@\n     }\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n+  // Check if the event exists and prevent the default behavior\r\n+  if (e) e.preventDefault();\r\n     const phoneNumber = phoneNumberRef.current.value;\r\n     const password = passwordRef.current.value;\r\n \r\n     // Disable the button to prevent multiple clicks during API call\r\n"
                },
                {
                    "date": 1700742303079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,14 +284,15 @@\n \r\n \r\n useEffect(() => {\r\n   if (triggerLogin) {\r\n-    handleSubmit(); // Call your login function\r\n-    // Reset the flag if necessary\r\n+    handleSubmit();\r\n+    // Reset the triggerLogin flag here if necessary\r\n   }\r\n }, [triggerLogin]);\r\n \r\n \r\n+\r\n   // Panda Animation Functions\r\n   const handleFocusPhoneNumber = () => {\r\n     document.querySelector(\".eyeball-l\").style.cssText =\r\n       \"left: 0.75em; top: 1.12em;\";\r\n"
                },
                {
                    "date": 1700742677730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,12 +275,20 @@\n }, [phoneNumber, pin]);\r\n \r\n \r\n useEffect(() => {\r\n+  // Set the phone number and pin when the component mounts or props change\r\n   phoneNumberRef.current.value = phoneNumber;\r\n   passwordRef.current.value = pin;\r\n+\r\n+  return () => {\r\n+    // Clear the input fields or reset states when the component unmounts\r\n+    phoneNumberRef.current.value = '';\r\n+    passwordRef.current.value = '';\r\n+  };\r\n }, [phoneNumber, pin]);\r\n \r\n+\r\n // Rest of your component code\r\n \r\n \r\n useEffect(() => {\r\n"
                },
                {
                    "date": 1700742805544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,16 +275,20 @@\n }, [phoneNumber, pin]);\r\n \r\n \r\n useEffect(() => {\r\n-  // Set the phone number and pin when the component mounts or props change\r\n-  phoneNumberRef.current.value = phoneNumber;\r\n-  passwordRef.current.value = pin;\r\n+  // Only set values if refs are not null\r\n+  if (phoneNumberRef.current && passwordRef.current) {\r\n+    phoneNumberRef.current.value = phoneNumber;\r\n+    passwordRef.current.value = pin;\r\n+  }\r\n \r\n   return () => {\r\n-    // Clear the input fields or reset states when the component unmounts\r\n-    phoneNumberRef.current.value = '';\r\n-    passwordRef.current.value = '';\r\n+    // Clear the input fields when the component unmounts, if refs are not null\r\n+    if (phoneNumberRef.current && passwordRef.current) {\r\n+      phoneNumberRef.current.value = '';\r\n+      passwordRef.current.value = '';\r\n+    }\r\n   };\r\n }, [phoneNumber, pin]);\r\n \r\n \r\n"
                },
                {
                    "date": 1700743080706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,599 @@\n+// import React, { useRef, useState } from \"react\";\r\n+// import axios from \"axios\";\r\n+// import { useNavigate } from \"react-router-dom\";\r\n+// import CryptoJS from \"crypto-js\";\r\n+// import { encrypt_secrete_key } from \"../../constants/urls\";\r\n+// import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n+\r\n+// const MobileSignin = () => {\r\n+//   const navigate = useNavigate();\r\n+//   const { student, updateStudent } = StudentDetailsCustomHook();\r\n+//   const currentDate = new Date();\r\n+//   const currentHour = currentDate.getHours();\r\n+//   const greeting_message =\r\n+//     currentHour >= 7 && currentHour <= 11\r\n+//       ? \"Good Morning\"\r\n+//       : currentHour >= 12 && currentHour <= 16\r\n+//       ? \"Good Afternoon\"\r\n+//       : \"Good Evening\";\r\n+\r\n+//   const phoneNumberRef = useRef(null);\r\n+//   const passwordRef = useRef(null);\r\n+\r\n+//   const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n+//   const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n+//   const [loginStatus, setLoginStatus] = useState(\"\");\r\n+//   const [showPassword, setShowPassword] = useState(false);\r\n+//   const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n+\r\n+//   const speakout = window.speechSynthesis;\r\n+\r\n+//   const togglePasswordVisibility = () => {\r\n+//     setShowPassword(!showPassword);\r\n+//   };\r\n+\r\n+//   const handleFocus = () => {\r\n+//     setLoginStatus(\"\");\r\n+//   };\r\n+\r\n+//   const handleChange = (e) => {\r\n+//     const { name, value } = e.target;\r\n+\r\n+//     if (name === \"phoneNumber\") {\r\n+//       if (value.length !== 10) {\r\n+//         setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n+//       } else {\r\n+//         setPhonenoErrorStatus(\"\");\r\n+//       }\r\n+//     }\r\n+\r\n+//     if (name === \"password\") {\r\n+//       if (value.length !== 4) {\r\n+//         setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n+//       } else {\r\n+//         setPasswordErrorStatus(\"\");\r\n+//       }\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handleKeyPress = (e) => {\r\n+//     const digitPattern = /^[0-9]*$/;\r\n+//     const key = String.fromCharCode(e.which);\r\n+\r\n+//     if (!digitPattern.test(key)) {\r\n+//       e.preventDefault();\r\n+//     }\r\n+//     if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n+//       passwordRef.current.focus();\r\n+//     }\r\n+\r\n+//     if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n+//       e.preventDefault();\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handleSubmit = async (e) => {\r\n+//     e.preventDefault();\r\n+//     const phoneNumber = phoneNumberRef.current.value;\r\n+//     const password = passwordRef.current.value;\r\n+\r\n+//     // Disable the button to prevent multiple clicks during API call\r\n+//     setButtonDisabled(true);\r\n+\r\n+//     try {\r\n+//       const response = await axios.get(`http://localhost:8080/user-login`);\r\n+//       const userData = response.data;\r\n+\r\n+//       const user = userData.find(\r\n+//         (user) => user.parentsmobileno === phoneNumber\r\n+//       );\r\n+\r\n+//       if (!user) {\r\n+//         const speaking = new SpeechSynthesisUtterance(\"User not found\");\r\n+//         speakout.speak(speaking);\r\n+//         setLoginStatus(\"User not found!\");\r\n+//         return;\r\n+//       }\r\n+\r\n+//       if (password === user.parentspassword) {\r\n+//         setLoginStatus(\"Parent Login successful\");\r\n+//         const speaking = new SpeechSynthesisUtterance(\"Parent login successful\");\r\n+//         speakout.speak(speaking);\r\n+\r\n+//         // Navigate to parent's page\r\n+//         navigate(\"/parentspage\");\r\n+//       } else {\r\n+//         // Initialize child index to -1\r\n+//         let childIndex = -1;\r\n+\r\n+//         const matchingChild = user.child.find((child, index) => {\r\n+//           if (child.childpassword === password) {\r\n+//             childIndex = index; // Store the child index when found\r\n+//             return true;\r\n+//           }\r\n+//           return false;\r\n+//         });\r\n+\r\n+//         if (matchingChild) {\r\n+//           const profile_info = {\r\n+//             mobileno: user?.parentsmobileno,\r\n+//             student_name: matchingChild?.childname,\r\n+//             medium_of_instruction: matchingChild?.mediumofinstruction,\r\n+//             schooling: matchingChild?.childclass,\r\n+//             profile_img: matchingChild?.childimageurl,\r\n+//             curriculum: matchingChild?.childsyllabus,\r\n+//             childIndex: childIndex, // Pass the child index\r\n+//           };\r\n+//           updateStudent(profile_info);\r\n+//           const encryptedData = CryptoJS.AES.encrypt(\r\n+//             JSON.stringify(profile_info),\r\n+//             encrypt_secrete_key\r\n+//           ).toString();\r\n+//           window.localStorage.setItem(\"login_details\", encryptedData);\r\n+//           setLoginStatus(\"Login successful\");\r\n+\r\n+//           // Navigate to child's page\r\n+//           const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n+//           speakout.speak(speaking);\r\n+\r\n+//           setTimeout(() => {\r\n+//             const speaking = new SpeechSynthesisUtterance(\r\n+//               `${greeting_message} ${profile_info?.student_name}`\r\n+//             );\r\n+//             speakout.speak(speaking);\r\n+//           }, 3000);\r\n+//           navigate(\"/portfolio\");\r\n+//         } else {\r\n+//           const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n+//           speakout.speak(speaking);\r\n+//           setLoginStatus(\"Login failed!\");\r\n+//         }\r\n+//       }\r\n+//     } catch (error) {\r\n+//       console.error(\"Error occurred during login:\", error);\r\n+//       setLoginStatus(\"Error occurred during login\");\r\n+//     } finally {\r\n+//       // Enable the button after API call is complete\r\n+//       setButtonDisabled(false);\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handlePasswordKeyPress = (e) => {\r\n+//     if (e.key === \"Enter\") {\r\n+//       handleSubmit(e);\r\n+//     }\r\n+//   };\r\n+\r\n+//   return (\r\n+//     <div className=\"mobile__signin\" style={{ padding: \"1rem 0\" }}>\r\n+//       <div className=\"input-container\">\r\n+//         <i className=\"bi bi-telephone icon\"></i>\r\n+//         <input\r\n+//           className=\"input-field\"\r\n+//           type=\"tel\"\r\n+//           name=\"phoneNumber\"\r\n+//           placeholder=\"Mobile Number\"\r\n+//           onFocus={handleFocus}\r\n+//           onChange={handleChange}\r\n+//           onKeyPress={handleKeyPress}\r\n+//           ref={phoneNumberRef}\r\n+//         />\r\n+//       </div>\r\n+//       {PhonenoErrorStatus && (\r\n+//         <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n+//       )}\r\n+//       <div className=\"input-container\">\r\n+//         <i className=\"bi bi-lock-fill icon\"></i>\r\n+//         <input\r\n+//           className=\"signup__container__form__div__form__sec__input-container__input-field-password\"\r\n+//           type={showPassword ? \"text\" : \"password\"}\r\n+//           name=\"password\"\r\n+//           placeholder=\"4 Digit PIN\"\r\n+//           onChange={handleChange}\r\n+//           onKeyPress={handlePasswordKeyPress}\r\n+//           ref={passwordRef}\r\n+//           onFocus={handleFocus}\r\n+//         />\r\n+//         <i\r\n+//           className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n+//           onClick={togglePasswordVisibility}\r\n+//         ></i>\r\n+//       </div>\r\n+//       {PasswordErrorStatus && (\r\n+//         <small className=\"error-message\">{PasswordErrorStatus}</small>\r\n+//       )}\r\n+//       <button\r\n+//         className=\"loginform-btn\"\r\n+//         type=\"submit\"\r\n+//         onClick={handleSubmit}\r\n+//         disabled={isButtonDisabled}\r\n+//       >\r\n+//         {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n+//       </button>\r\n+//       {loginStatus && (\r\n+//         <div\r\n+//           style={{\r\n+//             fontSize: \"1rem\",\r\n+//             color: \"red\",\r\n+//             paddingTop: \"1rem\",\r\n+//           }}\r\n+//         >\r\n+//           {loginStatus}\r\n+//         </div>\r\n+//       )}\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// export default MobileSignin;\r\n+//\r\n+\r\n+import React, { useRef, useState, useEffect } from \"react\";\r\n+import axios from \"axios\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import CryptoJS from \"crypto-js\";\r\n+import { encrypt_secrete_key } from \"../../constants/urls\";\r\n+import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n+\r\n+const MobileSignin = ({ phoneNumber, pin, triggerLogin, updateLoginStatus }) => {\r\n+  const navigate = useNavigate();\r\n+  const { student, updateStudent } = StudentDetailsCustomHook();\r\n+  const currentDate = new Date();\r\n+  const currentHour = currentDate.getHours();\r\n+  const greeting_message =\r\n+    currentHour >= 7 && currentHour <= 11\r\n+      ? \"Good Morning\"\r\n+      : currentHour >= 12 && currentHour <= 16\r\n+      ? \"Good Afternoon\"\r\n+      : \"Good Evening\";\r\n+\r\n+  const phoneNumberRef = useRef(null);\r\n+  const passwordRef = useRef(null);\r\n+\r\n+  const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n+  const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n+  const [loginStatus, setLoginStatus] = useState(\"\");\r\n+  const [showPassword, setShowPassword] = useState(false);\r\n+  const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n+\r\n+  const speakout = window.speechSynthesis;\r\n+\r\n+  const togglePasswordVisibility = () => {\r\n+    setShowPassword(!showPassword);\r\n+  };\r\n+\r\n+  const handleFocus = () => {\r\n+    setLoginStatus(\"\");\r\n+  };\r\n+\r\n+\r\n+  // In MobileSignin component\r\n+useEffect(() => {\r\n+  // Assuming phoneNumber and pin are received as props\r\n+  phoneNumberRef.current.value = phoneNumber;\r\n+  passwordRef.current.value = pin;\r\n+}, [phoneNumber, pin]);\r\n+\r\n+\r\n+useEffect(() => {\r\n+  // Only set values if refs are not null\r\n+  if (phoneNumberRef.current && passwordRef.current) {\r\n+    phoneNumberRef.current.value = phoneNumber;\r\n+    passwordRef.current.value = pin;\r\n+  }\r\n+\r\n+  return () => {\r\n+        // Reset states when component unmounts\r\n+        setPhonenoErrorStatus(\"\");\r\n+        setPasswordErrorStatus(\"\");\r\n+        setLoginStatus(\"\");\r\n+        // Any other states that need to be reset\r\n+    // Clear the input fields when the component unmounts, if refs are not null\r\n+    if (phoneNumberRef.current && passwordRef.current) {\r\n+      phoneNumberRef.current.value = '';\r\n+      passwordRef.current.value = '';\r\n+    }\r\n+  };\r\n+}, [phoneNumber, pin]);\r\n+\r\n+\r\n+// Rest of your component code\r\n+\r\n+\r\n+useEffect(() => {\r\n+  if (triggerLogin) {\r\n+    handleSubmit();\r\n+    // Reset the triggerLogin flag here if necessary\r\n+  }\r\n+}, [triggerLogin]);\r\n+\r\n+\r\n+\r\n+  // Panda Animation Functions\r\n+  const handleFocusPhoneNumber = () => {\r\n+    document.querySelector(\".eyeball-l\").style.cssText =\r\n+      \"left: 0.75em; top: 1.12em;\";\r\n+    document.querySelector(\".eyeball-r\").style.cssText =\r\n+      \"right: 0.75em; top: 1.12em;\";\r\n+    normalHandStyle();\r\n+  };\r\n+\r\n+  const handleFocusPassword = () => {\r\n+    document.querySelector(\".hand-l\").style.cssText =\r\n+      \"height: 6.56em; top: 3.87em; left: 11.75em; transform: rotate(-155deg);\";\r\n+    document.querySelector(\".hand-r\").style.cssText =\r\n+      \"height: 6.56em; top: 3.87em; right: 11.75em; transform: rotate(155deg);\";\r\n+    normalEyeStyle();\r\n+  };\r\n+\r\n+  const handleClickOutside = (e) => {\r\n+    if (\r\n+      e.target !== phoneNumberRef.current &&\r\n+      e.target !== passwordRef.current\r\n+    ) {\r\n+      normalEyeStyle();\r\n+      normalHandStyle();\r\n+    }\r\n+  };\r\n+\r\n+  const normalEyeStyle = () => {\r\n+    document.querySelector(\".eyeball-l\").style.cssText =\r\n+      \"left: 0.6em; top: 0.6em;\";\r\n+    document.querySelector(\".eyeball-r\").style.cssText =\r\n+      \"right: 0.6em; top: 0.6em;\";\r\n+  };\r\n+\r\n+  const normalHandStyle = () => {\r\n+    document.querySelector(\".hand-l\").style.cssText =\r\n+      \"height: 2.81em; top: 8.4em; left: 7.5em; transform: rotate(0deg);\";\r\n+    document.querySelector(\".hand-r\").style.cssText =\r\n+      \"height: 2.81em; top: 8.4em; right: 7.5em; transform: rotate(0deg);\";\r\n+  };\r\n+\r\n+  const handleChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+\r\n+    if (name === \"phoneNumber\") {\r\n+      if (value.length !== 10) {\r\n+        setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n+      } else {\r\n+        setPhonenoErrorStatus(\"\");\r\n+      }\r\n+    }\r\n+\r\n+    if (name === \"password\") {\r\n+      if (value.length !== 4) {\r\n+        setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n+      } else {\r\n+        setPasswordErrorStatus(\"\");\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleKeyPress = (e) => {\r\n+    const digitPattern = /^[0-9]*$/;\r\n+    const key = String.fromCharCode(e.which);\r\n+\r\n+    if (!digitPattern.test(key)) {\r\n+      e.preventDefault();\r\n+    }\r\n+    if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n+      passwordRef.current.focus();\r\n+    }\r\n+\r\n+    if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n+      e.preventDefault();\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+  // Check if the event exists and prevent the default behavior\r\n+  if (e) e.preventDefault();\r\n+    const phoneNumber = phoneNumberRef.current.value;\r\n+    const password = passwordRef.current.value;\r\n+\r\n+    // Disable the button to prevent multiple clicks during API call\r\n+    setButtonDisabled(true);\r\n+\r\n+    try {\r\n+      const response = await axios.get(`http://localhost:8080/user-login`);\r\n+      const userData = response.data;\r\n+\r\n+      const user = userData.find(\r\n+        (user) => user.parentsmobileno === phoneNumber\r\n+      );\r\n+\r\n+      if (!user) {\r\n+        const speaking = new SpeechSynthesisUtterance(\"Invalid Credentials\");\r\n+        speakout.speak(speaking);\r\n+        setLoginStatus(\"Invalid Credentials!\");\r\n+        return;\r\n+      }\r\n+\r\n+      if (password === user.parentspassword) {\r\n+        setLoginStatus(\"Parent Login successful\");\r\n+        const speaking = new SpeechSynthesisUtterance(\r\n+          \"Parent login successful\"\r\n+        );\r\n+        speakout.speak(speaking);\r\n+\r\n+        // Navigate to parent's page\r\n+        navigate(\"/parentspage\");\r\n+      } else {\r\n+        // Initialize child index to -1\r\n+        let childIndex = -1;\r\n+\r\n+        const matchingChild = user.child.find((child, index) => {\r\n+          if (child.childpassword === password) {\r\n+            childIndex = index; // Store the child index when found\r\n+            return true;\r\n+          }\r\n+          return false;\r\n+        });\r\n+\r\n+        if (matchingChild) {\r\n+          const profile_info = {\r\n+            mobileno: user?.parentsmobileno,\r\n+            student_name: matchingChild?.childname,\r\n+            medium_of_instruction: matchingChild?.mediumofinstruction,\r\n+            schooling: matchingChild?.childclass,\r\n+            profile_img: matchingChild?.childimageurl,\r\n+            curriculum: matchingChild?.childsyllabus,\r\n+            childIndex: childIndex, // Pass the child index\r\n+          };\r\n+          updateStudent(profile_info);\r\n+          const encryptedData = CryptoJS.AES.encrypt(\r\n+            JSON.stringify(profile_info),\r\n+            encrypt_secrete_key\r\n+          ).toString();\r\n+          window.localStorage.setItem(\"login_details\", encryptedData);\r\n+          setLoginStatus(\"Login successful\");\r\n+          updateLoginStatus(true); // Update login status on successful login\r\n+\r\n+\r\n+          // Navigate to child's page\r\n+          const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n+          speakout.speak(speaking);\r\n+\r\n+          setTimeout(() => {\r\n+            const speaking = new SpeechSynthesisUtterance(\r\n+              `${greeting_message} ${profile_info?.student_name}`\r\n+            );\r\n+            speakout.speak(speaking);\r\n+          }, 3000);\r\n+          navigate(\"/portfolio\");\r\n+        } else {\r\n+          const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n+          speakout.speak(speaking);\r\n+          setLoginStatus(\"Login failed!\");\r\n+          updateLoginStatus(false); // Update login status on failure\r\n+        }\r\n+      }\r\n+    } catch (error) {\r\n+      console.error(\"Error occurred during login:\", error);\r\n+      setLoginStatus(\"Error occurred during login\");\r\n+    } finally {\r\n+      // Enable the button after API call is complete\r\n+      setButtonDisabled(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handlePasswordKeyPress = (e) => {\r\n+    if (e.key === \"Enter\") {\r\n+      handleSubmit(e);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"pandacontainer\" onClick={handleClickOutside}>\r\n+      {/* Existing form elements */}\r\n+      <div className=\"mobile__signin\" style={{ padding: \"1.5rem 0\" }}>\r\n+  <div className=\"input-container\">\r\n+    <i className=\"bi bi-telephone icon\"></i>\r\n+    <input\r\n+      className=\"input-field\"\r\n+      type=\"tel\"\r\n+      name=\"phoneNumber\"\r\n+      placeholder=\"Mobile Number\"\r\n+      maxLength={10}\r\n+      onFocus={() => {\r\n+        handleFocus();\r\n+        handleFocusPhoneNumber();\r\n+        const speaking = new SpeechSynthesisUtterance(\"Enter Mobile Number\");\r\n+        speakout.speak(speaking);\r\n+      }}\r\n+      onChange={handleChange}\r\n+      onKeyPress={handleKeyPress}\r\n+      ref={phoneNumberRef}\r\n+    />\r\n+  </div>\r\n+  {PhonenoErrorStatus && (\r\n+    <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n+  )}\r\n+  <div className=\"input-container\">\r\n+    <i className=\"bi bi-lock-fill icon\"></i>\r\n+    <input\r\n+      className=\"input-field\"\r\n+      type={showPassword ? \"text\" : \"password\"}\r\n+      name=\"password\"\r\n+      placeholder=\"4 Digit PIN\"\r\n+      onChange={handleChange}\r\n+      onKeyPress={handlePasswordKeyPress}\r\n+      ref={passwordRef}\r\n+      maxLength={4}\r\n+      onFocus={() => {\r\n+        handleFocus();\r\n+        handleFocusPassword();\r\n+        const speaking = new SpeechSynthesisUtterance(\"I am very honest,i'm not seeing your password\");\r\n+        speakout.speak(speaking);\r\n+\r\n+      }}\r\n+    />\r\n+    <i\r\n+      className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n+      onClick={togglePasswordVisibility}\r\n+    ></i>\r\n+  </div>\r\n+  {PasswordErrorStatus && (\r\n+    <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n+  )}\r\n+  {/* <button\r\n+    className=\"loginform-btn\"\r\n+    type=\"submit\"\r\n+    onClick={handleSubmit}\r\n+    disabled={isButtonDisabled}\r\n+  >\r\n+    {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n+  </button> */}\r\n+\r\n+<button\r\n+  className=\"loginform-btn\"\r\n+  type=\"submit\"\r\n+  onClick={handleSubmit}\r\n+  disabled={isButtonDisabled}\r\n+>\r\n+  <span className=\"transition\"></span>\r\n+  <span className=\"gradient\"></span>\r\n+  <span className=\"label\">{isButtonDisabled ? \"Logging in...\" : \"Login\"}</span>\r\n+</button>\r\n+\r\n+  {loginStatus && (\r\n+    <div\r\n+      style={{\r\n+        fontSize: \".8rem\",\r\n+        color: \"white\",\r\n+        padding: \"0.1rem 0.8rem\",\r\n+        backgroundColor: \"#ff0000b8\",\r\n+        position: \"absolute\",\r\n+        borderRadius:\"1rem\",\r\n+        top:\"14.56rem\",\r\n+      }}\r\n+    >\r\n+      {loginStatus}\r\n+    </div>\r\n+  )}\r\n+</div>\r\n+      {/* Panda Markup */}\r\n+      <div className=\"ear-l\"></div>\r\n+      <div className=\"ear-r\"></div>\r\n+      <div className=\"panda-face\">\r\n+        <div className=\"blush-l\"></div>\r\n+        <div className=\"blush-r\"></div>\r\n+        <div className=\"eye-l\">\r\n+          <div className=\"eyeball-l\"></div>\r\n+        </div>\r\n+        <div className=\"eye-r\">\r\n+          <div className=\"eyeball-r\"></div>\r\n+        </div>\r\n+        <div className=\"nose\"></div>\r\n+        <div className=\"mouth\"></div>\r\n+      </div>\r\n+      <div className=\"hand-l\"></div>\r\n+      <div className=\"hand-r\"></div>\r\n+      <div className=\"paw-l\"></div>\r\n+      <div className=\"paw-r\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default MobileSignin;\r\n"
                },
                {
                    "date": 1700743284482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,610 @@\n+// import React, { useRef, useState } from \"react\";\r\n+// import axios from \"axios\";\r\n+// import { useNavigate } from \"react-router-dom\";\r\n+// import CryptoJS from \"crypto-js\";\r\n+// import { encrypt_secrete_key } from \"../../constants/urls\";\r\n+// import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n+\r\n+// const MobileSignin = () => {\r\n+//   const navigate = useNavigate();\r\n+//   const { student, updateStudent } = StudentDetailsCustomHook();\r\n+//   const currentDate = new Date();\r\n+//   const currentHour = currentDate.getHours();\r\n+//   const greeting_message =\r\n+//     currentHour >= 7 && currentHour <= 11\r\n+//       ? \"Good Morning\"\r\n+//       : currentHour >= 12 && currentHour <= 16\r\n+//       ? \"Good Afternoon\"\r\n+//       : \"Good Evening\";\r\n+\r\n+//   const phoneNumberRef = useRef(null);\r\n+//   const passwordRef = useRef(null);\r\n+\r\n+//   const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n+//   const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n+//   const [loginStatus, setLoginStatus] = useState(\"\");\r\n+//   const [showPassword, setShowPassword] = useState(false);\r\n+//   const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n+\r\n+//   const speakout = window.speechSynthesis;\r\n+\r\n+//   const togglePasswordVisibility = () => {\r\n+//     setShowPassword(!showPassword);\r\n+//   };\r\n+\r\n+//   const handleFocus = () => {\r\n+//     setLoginStatus(\"\");\r\n+//   };\r\n+\r\n+//   const handleChange = (e) => {\r\n+//     const { name, value } = e.target;\r\n+\r\n+//     if (name === \"phoneNumber\") {\r\n+//       if (value.length !== 10) {\r\n+//         setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n+//       } else {\r\n+//         setPhonenoErrorStatus(\"\");\r\n+//       }\r\n+//     }\r\n+\r\n+//     if (name === \"password\") {\r\n+//       if (value.length !== 4) {\r\n+//         setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n+//       } else {\r\n+//         setPasswordErrorStatus(\"\");\r\n+//       }\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handleKeyPress = (e) => {\r\n+//     const digitPattern = /^[0-9]*$/;\r\n+//     const key = String.fromCharCode(e.which);\r\n+\r\n+//     if (!digitPattern.test(key)) {\r\n+//       e.preventDefault();\r\n+//     }\r\n+//     if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n+//       passwordRef.current.focus();\r\n+//     }\r\n+\r\n+//     if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n+//       e.preventDefault();\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handleSubmit = async (e) => {\r\n+//     e.preventDefault();\r\n+//     const phoneNumber = phoneNumberRef.current.value;\r\n+//     const password = passwordRef.current.value;\r\n+\r\n+//     // Disable the button to prevent multiple clicks during API call\r\n+//     setButtonDisabled(true);\r\n+\r\n+//     try {\r\n+//       const response = await axios.get(`http://localhost:8080/user-login`);\r\n+//       const userData = response.data;\r\n+\r\n+//       const user = userData.find(\r\n+//         (user) => user.parentsmobileno === phoneNumber\r\n+//       );\r\n+\r\n+//       if (!user) {\r\n+//         const speaking = new SpeechSynthesisUtterance(\"User not found\");\r\n+//         speakout.speak(speaking);\r\n+//         setLoginStatus(\"User not found!\");\r\n+//         return;\r\n+//       }\r\n+\r\n+//       if (password === user.parentspassword) {\r\n+//         setLoginStatus(\"Parent Login successful\");\r\n+//         const speaking = new SpeechSynthesisUtterance(\"Parent login successful\");\r\n+//         speakout.speak(speaking);\r\n+\r\n+//         // Navigate to parent's page\r\n+//         navigate(\"/parentspage\");\r\n+//       } else {\r\n+//         // Initialize child index to -1\r\n+//         let childIndex = -1;\r\n+\r\n+//         const matchingChild = user.child.find((child, index) => {\r\n+//           if (child.childpassword === password) {\r\n+//             childIndex = index; // Store the child index when found\r\n+//             return true;\r\n+//           }\r\n+//           return false;\r\n+//         });\r\n+\r\n+//         if (matchingChild) {\r\n+//           const profile_info = {\r\n+//             mobileno: user?.parentsmobileno,\r\n+//             student_name: matchingChild?.childname,\r\n+//             medium_of_instruction: matchingChild?.mediumofinstruction,\r\n+//             schooling: matchingChild?.childclass,\r\n+//             profile_img: matchingChild?.childimageurl,\r\n+//             curriculum: matchingChild?.childsyllabus,\r\n+//             childIndex: childIndex, // Pass the child index\r\n+//           };\r\n+//           updateStudent(profile_info);\r\n+//           const encryptedData = CryptoJS.AES.encrypt(\r\n+//             JSON.stringify(profile_info),\r\n+//             encrypt_secrete_key\r\n+//           ).toString();\r\n+//           window.localStorage.setItem(\"login_details\", encryptedData);\r\n+//           setLoginStatus(\"Login successful\");\r\n+\r\n+//           // Navigate to child's page\r\n+//           const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n+//           speakout.speak(speaking);\r\n+\r\n+//           setTimeout(() => {\r\n+//             const speaking = new SpeechSynthesisUtterance(\r\n+//               `${greeting_message} ${profile_info?.student_name}`\r\n+//             );\r\n+//             speakout.speak(speaking);\r\n+//           }, 3000);\r\n+//           navigate(\"/portfolio\");\r\n+//         } else {\r\n+//           const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n+//           speakout.speak(speaking);\r\n+//           setLoginStatus(\"Login failed!\");\r\n+//         }\r\n+//       }\r\n+//     } catch (error) {\r\n+//       console.error(\"Error occurred during login:\", error);\r\n+//       setLoginStatus(\"Error occurred during login\");\r\n+//     } finally {\r\n+//       // Enable the button after API call is complete\r\n+//       setButtonDisabled(false);\r\n+//     }\r\n+//   };\r\n+\r\n+//   const handlePasswordKeyPress = (e) => {\r\n+//     if (e.key === \"Enter\") {\r\n+//       handleSubmit(e);\r\n+//     }\r\n+//   };\r\n+\r\n+//   return (\r\n+//     <div className=\"mobile__signin\" style={{ padding: \"1rem 0\" }}>\r\n+//       <div className=\"input-container\">\r\n+//         <i className=\"bi bi-telephone icon\"></i>\r\n+//         <input\r\n+//           className=\"input-field\"\r\n+//           type=\"tel\"\r\n+//           name=\"phoneNumber\"\r\n+//           placeholder=\"Mobile Number\"\r\n+//           onFocus={handleFocus}\r\n+//           onChange={handleChange}\r\n+//           onKeyPress={handleKeyPress}\r\n+//           ref={phoneNumberRef}\r\n+//         />\r\n+//       </div>\r\n+//       {PhonenoErrorStatus && (\r\n+//         <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n+//       )}\r\n+//       <div className=\"input-container\">\r\n+//         <i className=\"bi bi-lock-fill icon\"></i>\r\n+//         <input\r\n+//           className=\"signup__container__form__div__form__sec__input-container__input-field-password\"\r\n+//           type={showPassword ? \"text\" : \"password\"}\r\n+//           name=\"password\"\r\n+//           placeholder=\"4 Digit PIN\"\r\n+//           onChange={handleChange}\r\n+//           onKeyPress={handlePasswordKeyPress}\r\n+//           ref={passwordRef}\r\n+//           onFocus={handleFocus}\r\n+//         />\r\n+//         <i\r\n+//           className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n+//           onClick={togglePasswordVisibility}\r\n+//         ></i>\r\n+//       </div>\r\n+//       {PasswordErrorStatus && (\r\n+//         <small className=\"error-message\">{PasswordErrorStatus}</small>\r\n+//       )}\r\n+//       <button\r\n+//         className=\"loginform-btn\"\r\n+//         type=\"submit\"\r\n+//         onClick={handleSubmit}\r\n+//         disabled={isButtonDisabled}\r\n+//       >\r\n+//         {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n+//       </button>\r\n+//       {loginStatus && (\r\n+//         <div\r\n+//           style={{\r\n+//             fontSize: \"1rem\",\r\n+//             color: \"red\",\r\n+//             paddingTop: \"1rem\",\r\n+//           }}\r\n+//         >\r\n+//           {loginStatus}\r\n+//         </div>\r\n+//       )}\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// export default MobileSignin;\r\n+//\r\n+\r\n+import React, { useRef, useState, useEffect } from \"react\";\r\n+import axios from \"axios\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import CryptoJS from \"crypto-js\";\r\n+import { encrypt_secrete_key } from \"../../constants/urls\";\r\n+import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n+\r\n+const MobileSignin = ({ phoneNumber, pin, triggerLogin, updateLoginStatus }) => {\r\n+  const navigate = useNavigate();\r\n+  const { student, updateStudent } = StudentDetailsCustomHook();\r\n+  const currentDate = new Date();\r\n+  const currentHour = currentDate.getHours();\r\n+  const greeting_message =\r\n+    currentHour >= 7 && currentHour <= 11\r\n+      ? \"Good Morning\"\r\n+      : currentHour >= 12 && currentHour <= 16\r\n+      ? \"Good Afternoon\"\r\n+      : \"Good Evening\";\r\n+\r\n+  const phoneNumberRef = useRef(null);\r\n+  const passwordRef = useRef(null);\r\n+\r\n+  const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n+  const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n+  const [loginStatus, setLoginStatus] = useState(\"\");\r\n+  const [showPassword, setShowPassword] = useState(false);\r\n+  const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n+\r\n+  const speakout = window.speechSynthesis;\r\n+\r\n+  const togglePasswordVisibility = () => {\r\n+    setShowPassword(!showPassword);\r\n+  };\r\n+\r\n+  const handleFocus = () => {\r\n+    setLoginStatus(\"\");\r\n+  };\r\n+\r\n+\r\n+  // In MobileSignin component\r\n+useEffect(() => {\r\n+  // Assuming phoneNumber and pin are received as props\r\n+  phoneNumberRef.current.value = phoneNumber;\r\n+  passwordRef.current.value = pin;\r\n+}, [phoneNumber, pin]);\r\n+\r\n+\r\n+useEffect(() => {\r\n+  // Only set values if refs are not null\r\n+  if (phoneNumberRef.current && passwordRef.current) {\r\n+    phoneNumberRef.current.value = phoneNumber;\r\n+    passwordRef.current.value = pin;\r\n+  }\r\n+\r\n+  return () => {\r\n+        // Reset states when component unmounts\r\n+        setPhonenoErrorStatus(\"\");\r\n+        setPasswordErrorStatus(\"\");\r\n+        setLoginStatus(\"\");\r\n+        // Any other states that need to be reset\r\n+    // Clear the input fields when the component unmounts, if refs are not null\r\n+    if (phoneNumberRef.current && passwordRef.current) {\r\n+      phoneNumberRef.current.value = '';\r\n+      passwordRef.current.value = '';\r\n+    }\r\n+  };\r\n+}, [phoneNumber, pin]);\r\n+\r\n+\r\n+// New function to reset login details\r\n+const resetLoginDetails = () => {\r\n+  phoneNumberRef.current.value = '';\r\n+  passwordRef.current.value = '';\r\n+  // Reset any other relevant state or props if necessary\r\n+};\r\n+\r\n+// useEffect to reset state when loginStatus changes to successful\r\n+useEffect(() => {\r\n+  if (loginStatus === \"Login successful\") {\r\n+    resetLoginDetails();\r\n+  }\r\n+}, [loginStatus]);\r\n+\r\n+useEffect(() => {\r\n+  if (triggerLogin) {\r\n+    handleSubmit();\r\n+    // Reset the triggerLogin flag here if necessary\r\n+  }\r\n+}, [triggerLogin]);\r\n+\r\n+\r\n+\r\n+  // Panda Animation Functions\r\n+  const handleFocusPhoneNumber = () => {\r\n+    document.querySelector(\".eyeball-l\").style.cssText =\r\n+      \"left: 0.75em; top: 1.12em;\";\r\n+    document.querySelector(\".eyeball-r\").style.cssText =\r\n+      \"right: 0.75em; top: 1.12em;\";\r\n+    normalHandStyle();\r\n+  };\r\n+\r\n+  const handleFocusPassword = () => {\r\n+    document.querySelector(\".hand-l\").style.cssText =\r\n+      \"height: 6.56em; top: 3.87em; left: 11.75em; transform: rotate(-155deg);\";\r\n+    document.querySelector(\".hand-r\").style.cssText =\r\n+      \"height: 6.56em; top: 3.87em; right: 11.75em; transform: rotate(155deg);\";\r\n+    normalEyeStyle();\r\n+  };\r\n+\r\n+  const handleClickOutside = (e) => {\r\n+    if (\r\n+      e.target !== phoneNumberRef.current &&\r\n+      e.target !== passwordRef.current\r\n+    ) {\r\n+      normalEyeStyle();\r\n+      normalHandStyle();\r\n+    }\r\n+  };\r\n+\r\n+  const normalEyeStyle = () => {\r\n+    document.querySelector(\".eyeball-l\").style.cssText =\r\n+      \"left: 0.6em; top: 0.6em;\";\r\n+    document.querySelector(\".eyeball-r\").style.cssText =\r\n+      \"right: 0.6em; top: 0.6em;\";\r\n+  };\r\n+\r\n+  const normalHandStyle = () => {\r\n+    document.querySelector(\".hand-l\").style.cssText =\r\n+      \"height: 2.81em; top: 8.4em; left: 7.5em; transform: rotate(0deg);\";\r\n+    document.querySelector(\".hand-r\").style.cssText =\r\n+      \"height: 2.81em; top: 8.4em; right: 7.5em; transform: rotate(0deg);\";\r\n+  };\r\n+\r\n+  const handleChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+\r\n+    if (name === \"phoneNumber\") {\r\n+      if (value.length !== 10) {\r\n+        setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n+      } else {\r\n+        setPhonenoErrorStatus(\"\");\r\n+      }\r\n+    }\r\n+\r\n+    if (name === \"password\") {\r\n+      if (value.length !== 4) {\r\n+        setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n+      } else {\r\n+        setPasswordErrorStatus(\"\");\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleKeyPress = (e) => {\r\n+    const digitPattern = /^[0-9]*$/;\r\n+    const key = String.fromCharCode(e.which);\r\n+\r\n+    if (!digitPattern.test(key)) {\r\n+      e.preventDefault();\r\n+    }\r\n+    if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n+      passwordRef.current.focus();\r\n+    }\r\n+\r\n+    if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n+      e.preventDefault();\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+  // Check if the event exists and prevent the default behavior\r\n+  if (e) e.preventDefault();\r\n+    const phoneNumber = phoneNumberRef.current.value;\r\n+    const password = passwordRef.current.value;\r\n+\r\n+    // Disable the button to prevent multiple clicks during API call\r\n+    setButtonDisabled(true);\r\n+\r\n+    try {\r\n+      const response = await axios.get(`http://localhost:8080/user-login`);\r\n+      const userData = response.data;\r\n+\r\n+      const user = userData.find(\r\n+        (user) => user.parentsmobileno === phoneNumber\r\n+      );\r\n+\r\n+      if (!user) {\r\n+        const speaking = new SpeechSynthesisUtterance(\"Invalid Credentials\");\r\n+        speakout.speak(speaking);\r\n+        setLoginStatus(\"Invalid Credentials!\");\r\n+        return;\r\n+      }\r\n+\r\n+      if (password === user.parentspassword) {\r\n+        setLoginStatus(\"Parent Login successful\");\r\n+        const speaking = new SpeechSynthesisUtterance(\r\n+          \"Parent login successful\"\r\n+        );\r\n+        speakout.speak(speaking);\r\n+\r\n+        // Navigate to parent's page\r\n+        navigate(\"/parentspage\");\r\n+      } else {\r\n+        // Initialize child index to -1\r\n+        let childIndex = -1;\r\n+\r\n+        const matchingChild = user.child.find((child, index) => {\r\n+          if (child.childpassword === password) {\r\n+            childIndex = index; // Store the child index when found\r\n+            return true;\r\n+          }\r\n+          return false;\r\n+        });\r\n+\r\n+        if (matchingChild) {\r\n+          const profile_info = {\r\n+            mobileno: user?.parentsmobileno,\r\n+            student_name: matchingChild?.childname,\r\n+            medium_of_instruction: matchingChild?.mediumofinstruction,\r\n+            schooling: matchingChild?.childclass,\r\n+            profile_img: matchingChild?.childimageurl,\r\n+            curriculum: matchingChild?.childsyllabus,\r\n+            childIndex: childIndex, // Pass the child index\r\n+          };\r\n+          updateStudent(profile_info);\r\n+          const encryptedData = CryptoJS.AES.encrypt(\r\n+            JSON.stringify(profile_info),\r\n+            encrypt_secrete_key\r\n+          ).toString();\r\n+          window.localStorage.setItem(\"login_details\", encryptedData);\r\n+          setLoginStatus(\"Login successful\");\r\n+          updateLoginStatus(true); // Update login status on successful login\r\n+\r\n+\r\n+          // Navigate to child's page\r\n+          const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n+          speakout.speak(speaking);\r\n+\r\n+          setTimeout(() => {\r\n+            const speaking = new SpeechSynthesisUtterance(\r\n+              `${greeting_message} ${profile_info?.student_name}`\r\n+            );\r\n+            speakout.speak(speaking);\r\n+          }, 3000);\r\n+          navigate(\"/portfolio\");\r\n+        } else {\r\n+          const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n+          speakout.speak(speaking);\r\n+          setLoginStatus(\"Login failed!\");\r\n+          updateLoginStatus(false); // Update login status on failure\r\n+        }\r\n+      }\r\n+    } catch (error) {\r\n+      console.error(\"Error occurred during login:\", error);\r\n+      setLoginStatus(\"Error occurred during login\");\r\n+    } finally {\r\n+      // Enable the button after API call is complete\r\n+      setButtonDisabled(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handlePasswordKeyPress = (e) => {\r\n+    if (e.key === \"Enter\") {\r\n+      handleSubmit(e);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"pandacontainer\" onClick={handleClickOutside}>\r\n+      {/* Existing form elements */}\r\n+      <div className=\"mobile__signin\" style={{ padding: \"1.5rem 0\" }}>\r\n+  <div className=\"input-container\">\r\n+    <i className=\"bi bi-telephone icon\"></i>\r\n+    <input\r\n+      className=\"input-field\"\r\n+      type=\"tel\"\r\n+      name=\"phoneNumber\"\r\n+      placeholder=\"Mobile Number\"\r\n+      maxLength={10}\r\n+      onFocus={() => {\r\n+        handleFocus();\r\n+        handleFocusPhoneNumber();\r\n+        const speaking = new SpeechSynthesisUtterance(\"Enter Mobile Number\");\r\n+        speakout.speak(speaking);\r\n+      }}\r\n+      onChange={handleChange}\r\n+      onKeyPress={handleKeyPress}\r\n+      ref={phoneNumberRef}\r\n+    />\r\n+  </div>\r\n+  {PhonenoErrorStatus && (\r\n+    <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n+  )}\r\n+  <div className=\"input-container\">\r\n+    <i className=\"bi bi-lock-fill icon\"></i>\r\n+    <input\r\n+      className=\"input-field\"\r\n+      type={showPassword ? \"text\" : \"password\"}\r\n+      name=\"password\"\r\n+      placeholder=\"4 Digit PIN\"\r\n+      onChange={handleChange}\r\n+      onKeyPress={handlePasswordKeyPress}\r\n+      ref={passwordRef}\r\n+      maxLength={4}\r\n+      onFocus={() => {\r\n+        handleFocus();\r\n+        handleFocusPassword();\r\n+        const speaking = new SpeechSynthesisUtterance(\"I am very honest,i'm not seeing your password\");\r\n+        speakout.speak(speaking);\r\n+\r\n+      }}\r\n+    />\r\n+    <i\r\n+      className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n+      onClick={togglePasswordVisibility}\r\n+    ></i>\r\n+  </div>\r\n+  {PasswordErrorStatus && (\r\n+    <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n+  )}\r\n+  {/* <button\r\n+    className=\"loginform-btn\"\r\n+    type=\"submit\"\r\n+    onClick={handleSubmit}\r\n+    disabled={isButtonDisabled}\r\n+  >\r\n+    {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n+  </button> */}\r\n+\r\n+<button\r\n+  className=\"loginform-btn\"\r\n+  type=\"submit\"\r\n+  onClick={handleSubmit}\r\n+  disabled={isButtonDisabled}\r\n+>\r\n+  <span className=\"transition\"></span>\r\n+  <span className=\"gradient\"></span>\r\n+  <span className=\"label\">{isButtonDisabled ? \"Logging in...\" : \"Login\"}</span>\r\n+</button>\r\n+\r\n+  {loginStatus && (\r\n+    <div\r\n+      style={{\r\n+        fontSize: \".8rem\",\r\n+        color: \"white\",\r\n+        padding: \"0.1rem 0.8rem\",\r\n+        backgroundColor: \"#ff0000b8\",\r\n+        position: \"absolute\",\r\n+        borderRadius:\"1rem\",\r\n+        top:\"14.56rem\",\r\n+      }}\r\n+    >\r\n+      {loginStatus}\r\n+    </div>\r\n+  )}\r\n+</div>\r\n+      {/* Panda Markup */}\r\n+      <div className=\"ear-l\"></div>\r\n+      <div className=\"ear-r\"></div>\r\n+      <div className=\"panda-face\">\r\n+        <div className=\"blush-l\"></div>\r\n+        <div className=\"blush-r\"></div>\r\n+        <div className=\"eye-l\">\r\n+          <div className=\"eyeball-l\"></div>\r\n+        </div>\r\n+        <div className=\"eye-r\">\r\n+          <div className=\"eyeball-r\"></div>\r\n+        </div>\r\n+        <div className=\"nose\"></div>\r\n+        <div className=\"mouth\"></div>\r\n+      </div>\r\n+      <div className=\"hand-l\"></div>\r\n+      <div className=\"hand-r\"></div>\r\n+      <div className=\"paw-l\"></div>\r\n+      <div className=\"paw-r\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default MobileSignin;\r\n"
                },
                {
                    "date": 1700743331589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,14 @@\n import CryptoJS from \"crypto-js\";\r\n import { encrypt_secrete_key } from \"../../constants/urls\";\r\n import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n \r\n-const MobileSignin = ({ phoneNumber, pin, triggerLogin, updateLoginStatus }) => {\r\n+const MobileSignin = ({\r\n+  phoneNumber,\r\n+  pin,\r\n+  triggerLogin,\r\n+  updateLoginStatus,\r\n+}) => {\r\n   const navigate = useNavigate();\r\n   const { student, updateStudent } = StudentDetailsCustomHook();\r\n   const currentDate = new Date();\r\n   const currentHour = currentDate.getHours();\r\n@@ -265,661 +270,57 @@\n   const handleFocus = () => {\r\n     setLoginStatus(\"\");\r\n   };\r\n \r\n-\r\n   // In MobileSignin component\r\n-useEffect(() => {\r\n-  // Assuming phoneNumber and pin are received as props\r\n-  phoneNumberRef.current.value = phoneNumber;\r\n-  passwordRef.current.value = pin;\r\n-}, [phoneNumber, pin]);\r\n-\r\n-\r\n-useEffect(() => {\r\n-  // Only set values if refs are not null\r\n-  if (phoneNumberRef.current && passwordRef.current) {\r\n+  useEffect(() => {\r\n+    // Assuming phoneNumber and pin are received as props\r\n     phoneNumberRef.current.value = phoneNumber;\r\n     passwordRef.current.value = pin;\r\n-  }\r\n+  }, [phoneNumber, pin]);\r\n \r\n-  return () => {\r\n-        // Reset states when component unmounts\r\n-        setPhonenoErrorStatus(\"\");\r\n-        setPasswordErrorStatus(\"\");\r\n-        setLoginStatus(\"\");\r\n-        // Any other states that need to be reset\r\n-    // Clear the input fields when the component unmounts, if refs are not null\r\n+  useEffect(() => {\r\n+    // Only set values if refs are not null\r\n     if (phoneNumberRef.current && passwordRef.current) {\r\n-      phoneNumberRef.current.value = '';\r\n-      passwordRef.current.value = '';\r\n+      phoneNumberRef.current.value = phoneNumber;\r\n+      passwordRef.current.value = pin;\r\n     }\r\n-  };\r\n-}, [phoneNumber, pin]);\r\n \r\n-\r\n-// New function to reset login details\r\n-const resetLoginDetails = () => {\r\n-  phoneNumberRef.current.value = '';\r\n-  passwordRef.current.value = '';\r\n-  // Reset any other relevant state or props if necessary\r\n-};\r\n-\r\n-// useEffect to reset state when loginStatus changes to successful\r\n-useEffect(() => {\r\n-  if (loginStatus === \"Login successful\") {\r\n-    resetLoginDetails();\r\n-  }\r\n-}, [loginStatus]);\r\n-\r\n-useEffect(() => {\r\n-  if (triggerLogin) {\r\n-    handleSubmit();\r\n-    // Reset the triggerLogin flag here if necessary\r\n-  }\r\n-}, [triggerLogin]);\r\n-\r\n-\r\n-\r\n-  // Panda Animation Functions\r\n-  const handleFocusPhoneNumber = () => {\r\n-    document.querySelector(\".eyeball-l\").style.cssText =\r\n-      \"left: 0.75em; top: 1.12em;\";\r\n-    document.querySelector(\".eyeball-r\").style.cssText =\r\n-      \"right: 0.75em; top: 1.12em;\";\r\n-    normalHandStyle();\r\n-  };\r\n-\r\n-  const handleFocusPassword = () => {\r\n-    document.querySelector(\".hand-l\").style.cssText =\r\n-      \"height: 6.56em; top: 3.87em; left: 11.75em; transform: rotate(-155deg);\";\r\n-    document.querySelector(\".hand-r\").style.cssText =\r\n-      \"height: 6.56em; top: 3.87em; right: 11.75em; transform: rotate(155deg);\";\r\n-    normalEyeStyle();\r\n-  };\r\n-\r\n-  const handleClickOutside = (e) => {\r\n-    if (\r\n-      e.target !== phoneNumberRef.current &&\r\n-      e.target !== passwordRef.current\r\n-    ) {\r\n-      normalEyeStyle();\r\n-      normalHandStyle();\r\n-    }\r\n-  };\r\n-\r\n-  const normalEyeStyle = () => {\r\n-    document.querySelector(\".eyeball-l\").style.cssText =\r\n-      \"left: 0.6em; top: 0.6em;\";\r\n-    document.querySelector(\".eyeball-r\").style.cssText =\r\n-      \"right: 0.6em; top: 0.6em;\";\r\n-  };\r\n-\r\n-  const normalHandStyle = () => {\r\n-    document.querySelector(\".hand-l\").style.cssText =\r\n-      \"height: 2.81em; top: 8.4em; left: 7.5em; transform: rotate(0deg);\";\r\n-    document.querySelector(\".hand-r\").style.cssText =\r\n-      \"height: 2.81em; top: 8.4em; right: 7.5em; transform: rotate(0deg);\";\r\n-  };\r\n-\r\n-  const handleChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-\r\n-    if (name === \"phoneNumber\") {\r\n-      if (value.length !== 10) {\r\n-        setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n-      } else {\r\n-        setPhonenoErrorStatus(\"\");\r\n+    return () => {\r\n+      // Reset states when component unmounts\r\n+      setPhonenoErrorStatus(\"\");\r\n+      setPasswordErrorStatus(\"\");\r\n+      setLoginStatus(\"\");\r\n+      // Any other states that need to be reset\r\n+      // Clear the input fields when the component unmounts, if refs are not null\r\n+      if (phoneNumberRef.current && passwordRef.current) {\r\n+        phoneNumberRef.current.value = \"\";\r\n+        passwordRef.current.value = \"\";\r\n       }\r\n-    }\r\n+    };\r\n+  }, [phoneNumber, pin]);\r\n \r\n-    if (name === \"password\") {\r\n-      if (value.length !== 4) {\r\n-        setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n-      } else {\r\n-        setPasswordErrorStatus(\"\");\r\n-      }\r\n-    }\r\n+  // New function to reset login details\r\n+  const resetLoginDetails = () => {\r\n+    phoneNumberRef.current.value = \"\";\r\n+    passwordRef.current.value = \"\";\r\n+    // Reset any other relevant state or props if necessary\r\n   };\r\n \r\n-  const handleKeyPress = (e) => {\r\n-    const digitPattern = /^[0-9]*$/;\r\n-    const key = String.fromCharCode(e.which);\r\n-\r\n-    if (!digitPattern.test(key)) {\r\n-      e.preventDefault();\r\n+  // useEffect to reset state when loginStatus changes to successful\r\n+  useEffect(() => {\r\n+    if (loginStatus === \"Login successful\") {\r\n+      resetLoginDetails();\r\n     }\r\n-    if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n-      passwordRef.current.focus();\r\n-    }\r\n+  }, [loginStatus]);\r\n \r\n-    if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n-      e.preventDefault();\r\n+  useEffect(() => {\r\n+    if (triggerLogin) {\r\n+      handleSubmit();\r\n+      // Reset the triggerLogin flag here if necessary\r\n     }\r\n-  };\r\n+  }, [triggerLogin]);\r\n \r\n-  const handleSubmit = async (e) => {\r\n-  // Check if the event exists and prevent the default behavior\r\n-  if (e) e.preventDefault();\r\n-    const phoneNumber = phoneNumberRef.current.value;\r\n-    const password = passwordRef.current.value;\r\n-\r\n-    // Disable the button to prevent multiple clicks during API call\r\n-    setButtonDisabled(true);\r\n-\r\n-    try {\r\n-      const response = await axios.get(`http://localhost:8080/user-login`);\r\n-      const userData = response.data;\r\n-\r\n-      const user = userData.find(\r\n-        (user) => user.parentsmobileno === phoneNumber\r\n-      );\r\n-\r\n-      if (!user) {\r\n-        const speaking = new SpeechSynthesisUtterance(\"Invalid Credentials\");\r\n-        speakout.speak(speaking);\r\n-        setLoginStatus(\"Invalid Credentials!\");\r\n-        return;\r\n-      }\r\n-\r\n-      if (password === user.parentspassword) {\r\n-        setLoginStatus(\"Parent Login successful\");\r\n-        const speaking = new SpeechSynthesisUtterance(\r\n-          \"Parent login successful\"\r\n-        );\r\n-        speakout.speak(speaking);\r\n-\r\n-        // Navigate to parent's page\r\n-        navigate(\"/parentspage\");\r\n-      } else {\r\n-        // Initialize child index to -1\r\n-        let childIndex = -1;\r\n-\r\n-        const matchingChild = user.child.find((child, index) => {\r\n-          if (child.childpassword === password) {\r\n-            childIndex = index; // Store the child index when found\r\n-            return true;\r\n-          }\r\n-          return false;\r\n-        });\r\n-\r\n-        if (matchingChild) {\r\n-          const profile_info = {\r\n-            mobileno: user?.parentsmobileno,\r\n-            student_name: matchingChild?.childname,\r\n-            medium_of_instruction: matchingChild?.mediumofinstruction,\r\n-            schooling: matchingChild?.childclass,\r\n-            profile_img: matchingChild?.childimageurl,\r\n-            curriculum: matchingChild?.childsyllabus,\r\n-            childIndex: childIndex, // Pass the child index\r\n-          };\r\n-          updateStudent(profile_info);\r\n-          const encryptedData = CryptoJS.AES.encrypt(\r\n-            JSON.stringify(profile_info),\r\n-            encrypt_secrete_key\r\n-          ).toString();\r\n-          window.localStorage.setItem(\"login_details\", encryptedData);\r\n-          setLoginStatus(\"Login successful\");\r\n-          updateLoginStatus(true); // Update login status on successful login\r\n-\r\n-\r\n-          // Navigate to child's page\r\n-          const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n-          speakout.speak(speaking);\r\n-\r\n-          setTimeout(() => {\r\n-            const speaking = new SpeechSynthesisUtterance(\r\n-              `${greeting_message} ${profile_info?.student_name}`\r\n-            );\r\n-            speakout.speak(speaking);\r\n-          }, 3000);\r\n-          navigate(\"/portfolio\");\r\n-        } else {\r\n-          const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n-          speakout.speak(speaking);\r\n-          setLoginStatus(\"Login failed!\");\r\n-          updateLoginStatus(false); // Update login status on failure\r\n-        }\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error occurred during login:\", error);\r\n-      setLoginStatus(\"Error occurred during login\");\r\n-    } finally {\r\n-      // Enable the button after API call is complete\r\n-      setButtonDisabled(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handlePasswordKeyPress = (e) => {\r\n-    if (e.key === \"Enter\") {\r\n-      handleSubmit(e);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"pandacontainer\" onClick={handleClickOutside}>\r\n-      {/* Existing form elements */}\r\n-      <div className=\"mobile__signin\" style={{ padding: \"1.5rem 0\" }}>\r\n-  <div className=\"input-container\">\r\n-    <i className=\"bi bi-telephone icon\"></i>\r\n-    <input\r\n-      className=\"input-field\"\r\n-      type=\"tel\"\r\n-      name=\"phoneNumber\"\r\n-      placeholder=\"Mobile Number\"\r\n-      maxLength={10}\r\n-      onFocus={() => {\r\n-        handleFocus();\r\n-        handleFocusPhoneNumber();\r\n-        const speaking = new SpeechSynthesisUtterance(\"Enter Mobile Number\");\r\n-        speakout.speak(speaking);\r\n-      }}\r\n-      onChange={handleChange}\r\n-      onKeyPress={handleKeyPress}\r\n-      ref={phoneNumberRef}\r\n-    />\r\n-  </div>\r\n-  {PhonenoErrorStatus && (\r\n-    <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n-  )}\r\n-  <div className=\"input-container\">\r\n-    <i className=\"bi bi-lock-fill icon\"></i>\r\n-    <input\r\n-      className=\"input-field\"\r\n-      type={showPassword ? \"text\" : \"password\"}\r\n-      name=\"password\"\r\n-      placeholder=\"4 Digit PIN\"\r\n-      onChange={handleChange}\r\n-      onKeyPress={handlePasswordKeyPress}\r\n-      ref={passwordRef}\r\n-      maxLength={4}\r\n-      onFocus={() => {\r\n-        handleFocus();\r\n-        handleFocusPassword();\r\n-        const speaking = new SpeechSynthesisUtterance(\"I am very honest,i'm not seeing your password\");\r\n-        speakout.speak(speaking);\r\n-\r\n-      }}\r\n-    />\r\n-    <i\r\n-      className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n-      onClick={togglePasswordVisibility}\r\n-    ></i>\r\n-  </div>\r\n-  {PasswordErrorStatus && (\r\n-    <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n-  )}\r\n-  {/* <button\r\n-    className=\"loginform-btn\"\r\n-    type=\"submit\"\r\n-    onClick={handleSubmit}\r\n-    disabled={isButtonDisabled}\r\n-  >\r\n-    {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n-  </button> */}\r\n-\r\n-<button\r\n-  className=\"loginform-btn\"\r\n-  type=\"submit\"\r\n-  onClick={handleSubmit}\r\n-  disabled={isButtonDisabled}\r\n->\r\n-  <span className=\"transition\"></span>\r\n-  <span className=\"gradient\"></span>\r\n-  <span className=\"label\">{isButtonDisabled ? \"Logging in...\" : \"Login\"}</span>\r\n-</button>\r\n-\r\n-  {loginStatus && (\r\n-    <div\r\n-      style={{\r\n-        fontSize: \".8rem\",\r\n-        color: \"white\",\r\n-        padding: \"0.1rem 0.8rem\",\r\n-        backgroundColor: \"#ff0000b8\",\r\n-        position: \"absolute\",\r\n-        borderRadius:\"1rem\",\r\n-        top:\"14.56rem\",\r\n-      }}\r\n-    >\r\n-      {loginStatus}\r\n-    </div>\r\n-  )}\r\n-</div>\r\n-      {/* Panda Markup */}\r\n-      <div className=\"ear-l\"></div>\r\n-      <div className=\"ear-r\"></div>\r\n-      <div className=\"panda-face\">\r\n-        <div className=\"blush-l\"></div>\r\n-        <div className=\"blush-r\"></div>\r\n-        <div className=\"eye-l\">\r\n-          <div className=\"eyeball-l\"></div>\r\n-        </div>\r\n-        <div className=\"eye-r\">\r\n-          <div className=\"eyeball-r\"></div>\r\n-        </div>\r\n-        <div className=\"nose\"></div>\r\n-        <div className=\"mouth\"></div>\r\n-      </div>\r\n-      <div className=\"hand-l\"></div>\r\n-      <div className=\"hand-r\"></div>\r\n-      <div className=\"paw-l\"></div>\r\n-      <div className=\"paw-r\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default MobileSignin;\r\n-// import React, { useRef, useState } from \"react\";\r\n-// import axios from \"axios\";\r\n-// import { useNavigate } from \"react-router-dom\";\r\n-// import CryptoJS from \"crypto-js\";\r\n-// import { encrypt_secrete_key } from \"../../constants/urls\";\r\n-// import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n-\r\n-// const MobileSignin = () => {\r\n-//   const navigate = useNavigate();\r\n-//   const { student, updateStudent } = StudentDetailsCustomHook();\r\n-//   const currentDate = new Date();\r\n-//   const currentHour = currentDate.getHours();\r\n-//   const greeting_message =\r\n-//     currentHour >= 7 && currentHour <= 11\r\n-//       ? \"Good Morning\"\r\n-//       : currentHour >= 12 && currentHour <= 16\r\n-//       ? \"Good Afternoon\"\r\n-//       : \"Good Evening\";\r\n-\r\n-//   const phoneNumberRef = useRef(null);\r\n-//   const passwordRef = useRef(null);\r\n-\r\n-//   const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n-//   const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n-//   const [loginStatus, setLoginStatus] = useState(\"\");\r\n-//   const [showPassword, setShowPassword] = useState(false);\r\n-//   const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n-\r\n-//   const speakout = window.speechSynthesis;\r\n-\r\n-//   const togglePasswordVisibility = () => {\r\n-//     setShowPassword(!showPassword);\r\n-//   };\r\n-\r\n-//   const handleFocus = () => {\r\n-//     setLoginStatus(\"\");\r\n-//   };\r\n-\r\n-//   const handleChange = (e) => {\r\n-//     const { name, value } = e.target;\r\n-\r\n-//     if (name === \"phoneNumber\") {\r\n-//       if (value.length !== 10) {\r\n-//         setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n-//       } else {\r\n-//         setPhonenoErrorStatus(\"\");\r\n-//       }\r\n-//     }\r\n-\r\n-//     if (name === \"password\") {\r\n-//       if (value.length !== 4) {\r\n-//         setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n-//       } else {\r\n-//         setPasswordErrorStatus(\"\");\r\n-//       }\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handleKeyPress = (e) => {\r\n-//     const digitPattern = /^[0-9]*$/;\r\n-//     const key = String.fromCharCode(e.which);\r\n-\r\n-//     if (!digitPattern.test(key)) {\r\n-//       e.preventDefault();\r\n-//     }\r\n-//     if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n-//       passwordRef.current.focus();\r\n-//     }\r\n-\r\n-//     if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n-//       e.preventDefault();\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handleSubmit = async (e) => {\r\n-//     e.preventDefault();\r\n-//     const phoneNumber = phoneNumberRef.current.value;\r\n-//     const password = passwordRef.current.value;\r\n-\r\n-//     // Disable the button to prevent multiple clicks during API call\r\n-//     setButtonDisabled(true);\r\n-\r\n-//     try {\r\n-//       const response = await axios.get(`http://localhost:8080/user-login`);\r\n-//       const userData = response.data;\r\n-\r\n-//       const user = userData.find(\r\n-//         (user) => user.parentsmobileno === phoneNumber\r\n-//       );\r\n-\r\n-//       if (!user) {\r\n-//         const speaking = new SpeechSynthesisUtterance(\"User not found\");\r\n-//         speakout.speak(speaking);\r\n-//         setLoginStatus(\"User not found!\");\r\n-//         return;\r\n-//       }\r\n-\r\n-//       if (password === user.parentspassword) {\r\n-//         setLoginStatus(\"Parent Login successful\");\r\n-//         const speaking = new SpeechSynthesisUtterance(\"Parent login successful\");\r\n-//         speakout.speak(speaking);\r\n-\r\n-//         // Navigate to parent's page\r\n-//         navigate(\"/parentspage\");\r\n-//       } else {\r\n-//         // Initialize child index to -1\r\n-//         let childIndex = -1;\r\n-\r\n-//         const matchingChild = user.child.find((child, index) => {\r\n-//           if (child.childpassword === password) {\r\n-//             childIndex = index; // Store the child index when found\r\n-//             return true;\r\n-//           }\r\n-//           return false;\r\n-//         });\r\n-\r\n-//         if (matchingChild) {\r\n-//           const profile_info = {\r\n-//             mobileno: user?.parentsmobileno,\r\n-//             student_name: matchingChild?.childname,\r\n-//             medium_of_instruction: matchingChild?.mediumofinstruction,\r\n-//             schooling: matchingChild?.childclass,\r\n-//             profile_img: matchingChild?.childimageurl,\r\n-//             curriculum: matchingChild?.childsyllabus,\r\n-//             childIndex: childIndex, // Pass the child index\r\n-//           };\r\n-//           updateStudent(profile_info);\r\n-//           const encryptedData = CryptoJS.AES.encrypt(\r\n-//             JSON.stringify(profile_info),\r\n-//             encrypt_secrete_key\r\n-//           ).toString();\r\n-//           window.localStorage.setItem(\"login_details\", encryptedData);\r\n-//           setLoginStatus(\"Login successful\");\r\n-\r\n-//           // Navigate to child's page\r\n-//           const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n-//           speakout.speak(speaking);\r\n-\r\n-//           setTimeout(() => {\r\n-//             const speaking = new SpeechSynthesisUtterance(\r\n-//               `${greeting_message} ${profile_info?.student_name}`\r\n-//             );\r\n-//             speakout.speak(speaking);\r\n-//           }, 3000);\r\n-//           navigate(\"/portfolio\");\r\n-//         } else {\r\n-//           const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n-//           speakout.speak(speaking);\r\n-//           setLoginStatus(\"Login failed!\");\r\n-//         }\r\n-//       }\r\n-//     } catch (error) {\r\n-//       console.error(\"Error occurred during login:\", error);\r\n-//       setLoginStatus(\"Error occurred during login\");\r\n-//     } finally {\r\n-//       // Enable the button after API call is complete\r\n-//       setButtonDisabled(false);\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handlePasswordKeyPress = (e) => {\r\n-//     if (e.key === \"Enter\") {\r\n-//       handleSubmit(e);\r\n-//     }\r\n-//   };\r\n-\r\n-//   return (\r\n-//     <div className=\"mobile__signin\" style={{ padding: \"1rem 0\" }}>\r\n-//       <div className=\"input-container\">\r\n-//         <i className=\"bi bi-telephone icon\"></i>\r\n-//         <input\r\n-//           className=\"input-field\"\r\n-//           type=\"tel\"\r\n-//           name=\"phoneNumber\"\r\n-//           placeholder=\"Mobile Number\"\r\n-//           onFocus={handleFocus}\r\n-//           onChange={handleChange}\r\n-//           onKeyPress={handleKeyPress}\r\n-//           ref={phoneNumberRef}\r\n-//         />\r\n-//       </div>\r\n-//       {PhonenoErrorStatus && (\r\n-//         <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n-//       )}\r\n-//       <div className=\"input-container\">\r\n-//         <i className=\"bi bi-lock-fill icon\"></i>\r\n-//         <input\r\n-//           className=\"signup__container__form__div__form__sec__input-container__input-field-password\"\r\n-//           type={showPassword ? \"text\" : \"password\"}\r\n-//           name=\"password\"\r\n-//           placeholder=\"4 Digit PIN\"\r\n-//           onChange={handleChange}\r\n-//           onKeyPress={handlePasswordKeyPress}\r\n-//           ref={passwordRef}\r\n-//           onFocus={handleFocus}\r\n-//         />\r\n-//         <i\r\n-//           className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n-//           onClick={togglePasswordVisibility}\r\n-//         ></i>\r\n-//       </div>\r\n-//       {PasswordErrorStatus && (\r\n-//         <small className=\"error-message\">{PasswordErrorStatus}</small>\r\n-//       )}\r\n-//       <button\r\n-//         className=\"loginform-btn\"\r\n-//         type=\"submit\"\r\n-//         onClick={handleSubmit}\r\n-//         disabled={isButtonDisabled}\r\n-//       >\r\n-//         {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n-//       </button>\r\n-//       {loginStatus && (\r\n-//         <div\r\n-//           style={{\r\n-//             fontSize: \"1rem\",\r\n-//             color: \"red\",\r\n-//             paddingTop: \"1rem\",\r\n-//           }}\r\n-//         >\r\n-//           {loginStatus}\r\n-//         </div>\r\n-//       )}\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// export default MobileSignin;\r\n-//\r\n-\r\n-import React, { useRef, useState, useEffect } from \"react\";\r\n-import axios from \"axios\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-import CryptoJS from \"crypto-js\";\r\n-import { encrypt_secrete_key } from \"../../constants/urls\";\r\n-import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n-\r\n-const MobileSignin = ({ phoneNumber, pin, triggerLogin, updateLoginStatus }) => {\r\n-  const navigate = useNavigate();\r\n-  const { student, updateStudent } = StudentDetailsCustomHook();\r\n-  const currentDate = new Date();\r\n-  const currentHour = currentDate.getHours();\r\n-  const greeting_message =\r\n-    currentHour >= 7 && currentHour <= 11\r\n-      ? \"Good Morning\"\r\n-      : currentHour >= 12 && currentHour <= 16\r\n-      ? \"Good Afternoon\"\r\n-      : \"Good Evening\";\r\n-\r\n-  const phoneNumberRef = useRef(null);\r\n-  const passwordRef = useRef(null);\r\n-\r\n-  const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n-  const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n-  const [loginStatus, setLoginStatus] = useState(\"\");\r\n-  const [showPassword, setShowPassword] = useState(false);\r\n-  const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n-\r\n-  const speakout = window.speechSynthesis;\r\n-\r\n-  const togglePasswordVisibility = () => {\r\n-    setShowPassword(!showPassword);\r\n-  };\r\n-\r\n-  const handleFocus = () => {\r\n-    setLoginStatus(\"\");\r\n-  };\r\n-\r\n-\r\n-  // In MobileSignin component\r\n-useEffect(() => {\r\n-  // Assuming phoneNumber and pin are received as props\r\n-  phoneNumberRef.current.value = phoneNumber;\r\n-  passwordRef.current.value = pin;\r\n-}, [phoneNumber, pin]);\r\n-\r\n-\r\n-useEffect(() => {\r\n-  // Only set values if refs are not null\r\n-  if (phoneNumberRef.current && passwordRef.current) {\r\n-    phoneNumberRef.current.value = phoneNumber;\r\n-    passwordRef.current.value = pin;\r\n-  }\r\n-\r\n-  return () => {\r\n-        // Reset states when component unmounts\r\n-        setPhonenoErrorStatus(\"\");\r\n-        setPasswordErrorStatus(\"\");\r\n-        setLoginStatus(\"\");\r\n-        // Any other states that need to be reset\r\n-    // Clear the input fields when the component unmounts, if refs are not null\r\n-    if (phoneNumberRef.current && passwordRef.current) {\r\n-      phoneNumberRef.current.value = '';\r\n-      passwordRef.current.value = '';\r\n-    }\r\n-  };\r\n-}, [phoneNumber, pin]);\r\n-\r\n-\r\n-// Rest of your component code\r\n-\r\n-\r\n-useEffect(() => {\r\n-  if (triggerLogin) {\r\n-    handleSubmit();\r\n-    // Reset the triggerLogin flag here if necessary\r\n-  }\r\n-}, [triggerLogin]);\r\n-\r\n-\r\n-\r\n   // Panda Animation Functions\r\n   const handleFocusPhoneNumber = () => {\r\n     document.querySelector(\".eyeball-l\").style.cssText =\r\n       \"left: 0.75em; top: 1.12em;\";\r\n@@ -996,10 +397,10 @@\n     }\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-  // Check if the event exists and prevent the default behavior\r\n-  if (e) e.preventDefault();\r\n+    // Check if the event exists and prevent the default behavior\r\n+    if (e) e.preventDefault();\r\n     const phoneNumber = phoneNumberRef.current.value;\r\n     const password = passwordRef.current.value;\r\n \r\n     // Disable the button to prevent multiple clicks during API call\r\n@@ -1059,9 +460,8 @@\n           window.localStorage.setItem(\"login_details\", encryptedData);\r\n           setLoginStatus(\"Login successful\");\r\n           updateLoginStatus(true); // Update login status on successful login\r\n \r\n-\r\n           // Navigate to child's page\r\n           const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n           speakout.speak(speaking);\r\n \r\n@@ -1071,8 +471,10 @@\n             );\r\n             speakout.speak(speaking);\r\n           }, 3000);\r\n           navigate(\"/portfolio\");\r\n+          // Reset phoneNumber and pin here after successful login\r\n+          resetLoginDetails();\r\n         } else {\r\n           const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n           speakout.speak(speaking);\r\n           setLoginStatus(\"Login failed!\");\r\n@@ -1097,687 +499,98 @@\n   return (\r\n     <div className=\"pandacontainer\" onClick={handleClickOutside}>\r\n       {/* Existing form elements */}\r\n       <div className=\"mobile__signin\" style={{ padding: \"1.5rem 0\" }}>\r\n-  <div className=\"input-container\">\r\n-    <i className=\"bi bi-telephone icon\"></i>\r\n-    <input\r\n-      className=\"input-field\"\r\n-      type=\"tel\"\r\n-      name=\"phoneNumber\"\r\n-      placeholder=\"Mobile Number\"\r\n-      maxLength={10}\r\n-      onFocus={() => {\r\n-        handleFocus();\r\n-        handleFocusPhoneNumber();\r\n-        const speaking = new SpeechSynthesisUtterance(\"Enter Mobile Number\");\r\n-        speakout.speak(speaking);\r\n-      }}\r\n-      onChange={handleChange}\r\n-      onKeyPress={handleKeyPress}\r\n-      ref={phoneNumberRef}\r\n-    />\r\n-  </div>\r\n-  {PhonenoErrorStatus && (\r\n-    <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n-  )}\r\n-  <div className=\"input-container\">\r\n-    <i className=\"bi bi-lock-fill icon\"></i>\r\n-    <input\r\n-      className=\"input-field\"\r\n-      type={showPassword ? \"text\" : \"password\"}\r\n-      name=\"password\"\r\n-      placeholder=\"4 Digit PIN\"\r\n-      onChange={handleChange}\r\n-      onKeyPress={handlePasswordKeyPress}\r\n-      ref={passwordRef}\r\n-      maxLength={4}\r\n-      onFocus={() => {\r\n-        handleFocus();\r\n-        handleFocusPassword();\r\n-        const speaking = new SpeechSynthesisUtterance(\"I am very honest,i'm not seeing your password\");\r\n-        speakout.speak(speaking);\r\n-\r\n-      }}\r\n-    />\r\n-    <i\r\n-      className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n-      onClick={togglePasswordVisibility}\r\n-    ></i>\r\n-  </div>\r\n-  {PasswordErrorStatus && (\r\n-    <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n-  )}\r\n-  {/* <button\r\n-    className=\"loginform-btn\"\r\n-    type=\"submit\"\r\n-    onClick={handleSubmit}\r\n-    disabled={isButtonDisabled}\r\n-  >\r\n-    {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n-  </button> */}\r\n-\r\n-<button\r\n-  className=\"loginform-btn\"\r\n-  type=\"submit\"\r\n-  onClick={handleSubmit}\r\n-  disabled={isButtonDisabled}\r\n->\r\n-  <span className=\"transition\"></span>\r\n-  <span className=\"gradient\"></span>\r\n-  <span className=\"label\">{isButtonDisabled ? \"Logging in...\" : \"Login\"}</span>\r\n-</button>\r\n-\r\n-  {loginStatus && (\r\n-    <div\r\n-      style={{\r\n-        fontSize: \".8rem\",\r\n-        color: \"white\",\r\n-        padding: \"0.1rem 0.8rem\",\r\n-        backgroundColor: \"#ff0000b8\",\r\n-        position: \"absolute\",\r\n-        borderRadius:\"1rem\",\r\n-        top:\"14.56rem\",\r\n-      }}\r\n-    >\r\n-      {loginStatus}\r\n-    </div>\r\n-  )}\r\n-</div>\r\n-      {/* Panda Markup */}\r\n-      <div className=\"ear-l\"></div>\r\n-      <div className=\"ear-r\"></div>\r\n-      <div className=\"panda-face\">\r\n-        <div className=\"blush-l\"></div>\r\n-        <div className=\"blush-r\"></div>\r\n-        <div className=\"eye-l\">\r\n-          <div className=\"eyeball-l\"></div>\r\n+        <div className=\"input-container\">\r\n+          <i className=\"bi bi-telephone icon\"></i>\r\n+          <input\r\n+            className=\"input-field\"\r\n+            type=\"tel\"\r\n+            name=\"phoneNumber\"\r\n+            placeholder=\"Mobile Number\"\r\n+            maxLength={10}\r\n+            onFocus={() => {\r\n+              handleFocus();\r\n+              handleFocusPhoneNumber();\r\n+              const speaking = new SpeechSynthesisUtterance(\r\n+                \"Enter Mobile Number\"\r\n+              );\r\n+              speakout.speak(speaking);\r\n+            }}\r\n+            onChange={handleChange}\r\n+            onKeyPress={handleKeyPress}\r\n+            ref={phoneNumberRef}\r\n+          />\r\n         </div>\r\n-        <div className=\"eye-r\">\r\n-          <div className=\"eyeball-r\"></div>\r\n+        {PhonenoErrorStatus && (\r\n+          <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n+        )}\r\n+        <div className=\"input-container\">\r\n+          <i className=\"bi bi-lock-fill icon\"></i>\r\n+          <input\r\n+            className=\"input-field\"\r\n+            type={showPassword ? \"text\" : \"password\"}\r\n+            name=\"password\"\r\n+            placeholder=\"4 Digit PIN\"\r\n+            onChange={handleChange}\r\n+            onKeyPress={handlePasswordKeyPress}\r\n+            ref={passwordRef}\r\n+            maxLength={4}\r\n+            onFocus={() => {\r\n+              handleFocus();\r\n+              handleFocusPassword();\r\n+              const speaking = new SpeechSynthesisUtterance(\r\n+                \"I am very honest,i'm not seeing your password\"\r\n+              );\r\n+              speakout.speak(speaking);\r\n+            }}\r\n+          />\r\n+          <i\r\n+            className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n+            onClick={togglePasswordVisibility}\r\n+          ></i>\r\n         </div>\r\n-        <div className=\"nose\"></div>\r\n-        <div className=\"mouth\"></div>\r\n-      </div>\r\n-      <div className=\"hand-l\"></div>\r\n-      <div className=\"hand-r\"></div>\r\n-      <div className=\"paw-l\"></div>\r\n-      <div className=\"paw-r\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default MobileSignin;\r\n-// import React, { useRef, useState } from \"react\";\r\n-// import axios from \"axios\";\r\n-// import { useNavigate } from \"react-router-dom\";\r\n-// import CryptoJS from \"crypto-js\";\r\n-// import { encrypt_secrete_key } from \"../../constants/urls\";\r\n-// import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n-\r\n-// const MobileSignin = () => {\r\n-//   const navigate = useNavigate();\r\n-//   const { student, updateStudent } = StudentDetailsCustomHook();\r\n-//   const currentDate = new Date();\r\n-//   const currentHour = currentDate.getHours();\r\n-//   const greeting_message =\r\n-//     currentHour >= 7 && currentHour <= 11\r\n-//       ? \"Good Morning\"\r\n-//       : currentHour >= 12 && currentHour <= 16\r\n-//       ? \"Good Afternoon\"\r\n-//       : \"Good Evening\";\r\n-\r\n-//   const phoneNumberRef = useRef(null);\r\n-//   const passwordRef = useRef(null);\r\n-\r\n-//   const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n-//   const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n-//   const [loginStatus, setLoginStatus] = useState(\"\");\r\n-//   const [showPassword, setShowPassword] = useState(false);\r\n-//   const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n-\r\n-//   const speakout = window.speechSynthesis;\r\n-\r\n-//   const togglePasswordVisibility = () => {\r\n-//     setShowPassword(!showPassword);\r\n-//   };\r\n-\r\n-//   const handleFocus = () => {\r\n-//     setLoginStatus(\"\");\r\n-//   };\r\n-\r\n-//   const handleChange = (e) => {\r\n-//     const { name, value } = e.target;\r\n-\r\n-//     if (name === \"phoneNumber\") {\r\n-//       if (value.length !== 10) {\r\n-//         setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n-//       } else {\r\n-//         setPhonenoErrorStatus(\"\");\r\n-//       }\r\n-//     }\r\n-\r\n-//     if (name === \"password\") {\r\n-//       if (value.length !== 4) {\r\n-//         setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n-//       } else {\r\n-//         setPasswordErrorStatus(\"\");\r\n-//       }\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handleKeyPress = (e) => {\r\n-//     const digitPattern = /^[0-9]*$/;\r\n-//     const key = String.fromCharCode(e.which);\r\n-\r\n-//     if (!digitPattern.test(key)) {\r\n-//       e.preventDefault();\r\n-//     }\r\n-//     if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n-//       passwordRef.current.focus();\r\n-//     }\r\n-\r\n-//     if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n-//       e.preventDefault();\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handleSubmit = async (e) => {\r\n-//     e.preventDefault();\r\n-//     const phoneNumber = phoneNumberRef.current.value;\r\n-//     const password = passwordRef.current.value;\r\n-\r\n-//     // Disable the button to prevent multiple clicks during API call\r\n-//     setButtonDisabled(true);\r\n-\r\n-//     try {\r\n-//       const response = await axios.get(`http://localhost:8080/user-login`);\r\n-//       const userData = response.data;\r\n-\r\n-//       const user = userData.find(\r\n-//         (user) => user.parentsmobileno === phoneNumber\r\n-//       );\r\n-\r\n-//       if (!user) {\r\n-//         const speaking = new SpeechSynthesisUtterance(\"User not found\");\r\n-//         speakout.speak(speaking);\r\n-//         setLoginStatus(\"User not found!\");\r\n-//         return;\r\n-//       }\r\n-\r\n-//       if (password === user.parentspassword) {\r\n-//         setLoginStatus(\"Parent Login successful\");\r\n-//         const speaking = new SpeechSynthesisUtterance(\"Parent login successful\");\r\n-//         speakout.speak(speaking);\r\n-\r\n-//         // Navigate to parent's page\r\n-//         navigate(\"/parentspage\");\r\n-//       } else {\r\n-//         // Initialize child index to -1\r\n-//         let childIndex = -1;\r\n-\r\n-//         const matchingChild = user.child.find((child, index) => {\r\n-//           if (child.childpassword === password) {\r\n-//             childIndex = index; // Store the child index when found\r\n-//             return true;\r\n-//           }\r\n-//           return false;\r\n-//         });\r\n-\r\n-//         if (matchingChild) {\r\n-//           const profile_info = {\r\n-//             mobileno: user?.parentsmobileno,\r\n-//             student_name: matchingChild?.childname,\r\n-//             medium_of_instruction: matchingChild?.mediumofinstruction,\r\n-//             schooling: matchingChild?.childclass,\r\n-//             profile_img: matchingChild?.childimageurl,\r\n-//             curriculum: matchingChild?.childsyllabus,\r\n-//             childIndex: childIndex, // Pass the child index\r\n-//           };\r\n-//           updateStudent(profile_info);\r\n-//           const encryptedData = CryptoJS.AES.encrypt(\r\n-//             JSON.stringify(profile_info),\r\n-//             encrypt_secrete_key\r\n-//           ).toString();\r\n-//           window.localStorage.setItem(\"login_details\", encryptedData);\r\n-//           setLoginStatus(\"Login successful\");\r\n-\r\n-//           // Navigate to child's page\r\n-//           const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n-//           speakout.speak(speaking);\r\n-\r\n-//           setTimeout(() => {\r\n-//             const speaking = new SpeechSynthesisUtterance(\r\n-//               `${greeting_message} ${profile_info?.student_name}`\r\n-//             );\r\n-//             speakout.speak(speaking);\r\n-//           }, 3000);\r\n-//           navigate(\"/portfolio\");\r\n-//         } else {\r\n-//           const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n-//           speakout.speak(speaking);\r\n-//           setLoginStatus(\"Login failed!\");\r\n-//         }\r\n-//       }\r\n-//     } catch (error) {\r\n-//       console.error(\"Error occurred during login:\", error);\r\n-//       setLoginStatus(\"Error occurred during login\");\r\n-//     } finally {\r\n-//       // Enable the button after API call is complete\r\n-//       setButtonDisabled(false);\r\n-//     }\r\n-//   };\r\n-\r\n-//   const handlePasswordKeyPress = (e) => {\r\n-//     if (e.key === \"Enter\") {\r\n-//       handleSubmit(e);\r\n-//     }\r\n-//   };\r\n-\r\n-//   return (\r\n-//     <div className=\"mobile__signin\" style={{ padding: \"1rem 0\" }}>\r\n-//       <div className=\"input-container\">\r\n-//         <i className=\"bi bi-telephone icon\"></i>\r\n-//         <input\r\n-//           className=\"input-field\"\r\n-//           type=\"tel\"\r\n-//           name=\"phoneNumber\"\r\n-//           placeholder=\"Mobile Number\"\r\n-//           onFocus={handleFocus}\r\n-//           onChange={handleChange}\r\n-//           onKeyPress={handleKeyPress}\r\n-//           ref={phoneNumberRef}\r\n-//         />\r\n-//       </div>\r\n-//       {PhonenoErrorStatus && (\r\n-//         <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n-//       )}\r\n-//       <div className=\"input-container\">\r\n-//         <i className=\"bi bi-lock-fill icon\"></i>\r\n-//         <input\r\n-//           className=\"signup__container__form__div__form__sec__input-container__input-field-password\"\r\n-//           type={showPassword ? \"text\" : \"password\"}\r\n-//           name=\"password\"\r\n-//           placeholder=\"4 Digit PIN\"\r\n-//           onChange={handleChange}\r\n-//           onKeyPress={handlePasswordKeyPress}\r\n-//           ref={passwordRef}\r\n-//           onFocus={handleFocus}\r\n-//         />\r\n-//         <i\r\n-//           className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n-//           onClick={togglePasswordVisibility}\r\n-//         ></i>\r\n-//       </div>\r\n-//       {PasswordErrorStatus && (\r\n-//         <small className=\"error-message\">{PasswordErrorStatus}</small>\r\n-//       )}\r\n-//       <button\r\n-//         className=\"loginform-btn\"\r\n-//         type=\"submit\"\r\n-//         onClick={handleSubmit}\r\n-//         disabled={isButtonDisabled}\r\n-//       >\r\n-//         {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n-//       </button>\r\n-//       {loginStatus && (\r\n-//         <div\r\n-//           style={{\r\n-//             fontSize: \"1rem\",\r\n-//             color: \"red\",\r\n-//             paddingTop: \"1rem\",\r\n-//           }}\r\n-//         >\r\n-//           {loginStatus}\r\n-//         </div>\r\n-//       )}\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// export default MobileSignin;\r\n-//\r\n-\r\n-import React, { useRef, useState, useEffect } from \"react\";\r\n-import axios from \"axios\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-import CryptoJS from \"crypto-js\";\r\n-import { encrypt_secrete_key } from \"../../constants/urls\";\r\n-import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n-\r\n-const MobileSignin = ({ phoneNumber, pin, triggerLogin, updateLoginStatus }) => {\r\n-  const navigate = useNavigate();\r\n-  const { student, updateStudent } = StudentDetailsCustomHook();\r\n-  const currentDate = new Date();\r\n-  const currentHour = currentDate.getHours();\r\n-  const greeting_message =\r\n-    currentHour >= 7 && currentHour <= 11\r\n-      ? \"Good Morning\"\r\n-      : currentHour >= 12 && currentHour <= 16\r\n-      ? \"Good Afternoon\"\r\n-      : \"Good Evening\";\r\n-\r\n-  const phoneNumberRef = useRef(null);\r\n-  const passwordRef = useRef(null);\r\n-\r\n-  const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n-  const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n-  const [loginStatus, setLoginStatus] = useState(\"\");\r\n-  const [showPassword, setShowPassword] = useState(false);\r\n-  const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n-\r\n-  const speakout = window.speechSynthesis;\r\n-\r\n-  const togglePasswordVisibility = () => {\r\n-    setShowPassword(!showPassword);\r\n-  };\r\n-\r\n-  const handleFocus = () => {\r\n-    setLoginStatus(\"\");\r\n-  };\r\n-\r\n-\r\n-  // In MobileSignin component\r\n-useEffect(() => {\r\n-  // Assuming phoneNumber and pin are received as props\r\n-  phoneNumberRef.current.value = phoneNumber;\r\n-  passwordRef.current.value = pin;\r\n-}, [phoneNumber, pin]);\r\n-\r\n-\r\n-useEffect(() => {\r\n-  // Only set values if refs are not null\r\n-  if (phoneNumberRef.current && passwordRef.current) {\r\n-    phoneNumberRef.current.value = phoneNumber;\r\n-    passwordRef.current.value = pin;\r\n-  }\r\n-\r\n-  return () => {\r\n-    // Clear the input fields when the component unmounts, if refs are not null\r\n-    if (phoneNumberRef.current && passwordRef.current) {\r\n-      phoneNumberRef.current.value = '';\r\n-      passwordRef.current.value = '';\r\n-    }\r\n-  };\r\n-}, [phoneNumber, pin]);\r\n-\r\n-\r\n-// Rest of your component code\r\n-\r\n-\r\n-useEffect(() => {\r\n-  if (triggerLogin) {\r\n-    handleSubmit();\r\n-    // Reset the triggerLogin flag here if necessary\r\n-  }\r\n-}, [triggerLogin]);\r\n-\r\n-\r\n-\r\n-  // Panda Animation Functions\r\n-  const handleFocusPhoneNumber = () => {\r\n-    document.querySelector(\".eyeball-l\").style.cssText =\r\n-      \"left: 0.75em; top: 1.12em;\";\r\n-    document.querySelector(\".eyeball-r\").style.cssText =\r\n-      \"right: 0.75em; top: 1.12em;\";\r\n-    normalHandStyle();\r\n-  };\r\n-\r\n-  const handleFocusPassword = () => {\r\n-    document.querySelector(\".hand-l\").style.cssText =\r\n-      \"height: 6.56em; top: 3.87em; left: 11.75em; transform: rotate(-155deg);\";\r\n-    document.querySelector(\".hand-r\").style.cssText =\r\n-      \"height: 6.56em; top: 3.87em; right: 11.75em; transform: rotate(155deg);\";\r\n-    normalEyeStyle();\r\n-  };\r\n-\r\n-  const handleClickOutside = (e) => {\r\n-    if (\r\n-      e.target !== phoneNumberRef.current &&\r\n-      e.target !== passwordRef.current\r\n-    ) {\r\n-      normalEyeStyle();\r\n-      normalHandStyle();\r\n-    }\r\n-  };\r\n-\r\n-  const normalEyeStyle = () => {\r\n-    document.querySelector(\".eyeball-l\").style.cssText =\r\n-      \"left: 0.6em; top: 0.6em;\";\r\n-    document.querySelector(\".eyeball-r\").style.cssText =\r\n-      \"right: 0.6em; top: 0.6em;\";\r\n-  };\r\n-\r\n-  const normalHandStyle = () => {\r\n-    document.querySelector(\".hand-l\").style.cssText =\r\n-      \"height: 2.81em; top: 8.4em; left: 7.5em; transform: rotate(0deg);\";\r\n-    document.querySelector(\".hand-r\").style.cssText =\r\n-      \"height: 2.81em; top: 8.4em; right: 7.5em; transform: rotate(0deg);\";\r\n-  };\r\n-\r\n-  const handleChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-\r\n-    if (name === \"phoneNumber\") {\r\n-      if (value.length !== 10) {\r\n-        setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n-      } else {\r\n-        setPhonenoErrorStatus(\"\");\r\n-      }\r\n-    }\r\n-\r\n-    if (name === \"password\") {\r\n-      if (value.length !== 4) {\r\n-        setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n-      } else {\r\n-        setPasswordErrorStatus(\"\");\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleKeyPress = (e) => {\r\n-    const digitPattern = /^[0-9]*$/;\r\n-    const key = String.fromCharCode(e.which);\r\n-\r\n-    if (!digitPattern.test(key)) {\r\n-      e.preventDefault();\r\n-    }\r\n-    if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n-      passwordRef.current.focus();\r\n-    }\r\n-\r\n-    if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n-      e.preventDefault();\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-  // Check if the event exists and prevent the default behavior\r\n-  if (e) e.preventDefault();\r\n-    const phoneNumber = phoneNumberRef.current.value;\r\n-    const password = passwordRef.current.value;\r\n-\r\n-    // Disable the button to prevent multiple clicks during API call\r\n-    setButtonDisabled(true);\r\n-\r\n-    try {\r\n-      const response = await axios.get(`http://localhost:8080/user-login`);\r\n-      const userData = response.data;\r\n-\r\n-      const user = userData.find(\r\n-        (user) => user.parentsmobileno === phoneNumber\r\n-      );\r\n-\r\n-      if (!user) {\r\n-        const speaking = new SpeechSynthesisUtterance(\"Invalid Credentials\");\r\n-        speakout.speak(speaking);\r\n-        setLoginStatus(\"Invalid Credentials!\");\r\n-        return;\r\n-      }\r\n-\r\n-      if (password === user.parentspassword) {\r\n-        setLoginStatus(\"Parent Login successful\");\r\n-        const speaking = new SpeechSynthesisUtterance(\r\n-          \"Parent login successful\"\r\n-        );\r\n-        speakout.speak(speaking);\r\n-\r\n-        // Navigate to parent's page\r\n-        navigate(\"/parentspage\");\r\n-      } else {\r\n-        // Initialize child index to -1\r\n-        let childIndex = -1;\r\n-\r\n-        const matchingChild = user.child.find((child, index) => {\r\n-          if (child.childpassword === password) {\r\n-            childIndex = index; // Store the child index when found\r\n-            return true;\r\n-          }\r\n-          return false;\r\n-        });\r\n-\r\n-        if (matchingChild) {\r\n-          const profile_info = {\r\n-            mobileno: user?.parentsmobileno,\r\n-            student_name: matchingChild?.childname,\r\n-            medium_of_instruction: matchingChild?.mediumofinstruction,\r\n-            schooling: matchingChild?.childclass,\r\n-            profile_img: matchingChild?.childimageurl,\r\n-            curriculum: matchingChild?.childsyllabus,\r\n-            childIndex: childIndex, // Pass the child index\r\n-          };\r\n-          updateStudent(profile_info);\r\n-          const encryptedData = CryptoJS.AES.encrypt(\r\n-            JSON.stringify(profile_info),\r\n-            encrypt_secrete_key\r\n-          ).toString();\r\n-          window.localStorage.setItem(\"login_details\", encryptedData);\r\n-          setLoginStatus(\"Login successful\");\r\n-          updateLoginStatus(true); // Update login status on successful login\r\n-\r\n-\r\n-          // Navigate to child's page\r\n-          const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n-          speakout.speak(speaking);\r\n-\r\n-          setTimeout(() => {\r\n-            const speaking = new SpeechSynthesisUtterance(\r\n-              `${greeting_message} ${profile_info?.student_name}`\r\n-            );\r\n-            speakout.speak(speaking);\r\n-          }, 3000);\r\n-          navigate(\"/portfolio\");\r\n-        } else {\r\n-          const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n-          speakout.speak(speaking);\r\n-          setLoginStatus(\"Login failed!\");\r\n-          updateLoginStatus(false); // Update login status on failure\r\n-        }\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error occurred during login:\", error);\r\n-      setLoginStatus(\"Error occurred during login\");\r\n-    } finally {\r\n-      // Enable the button after API call is complete\r\n-      setButtonDisabled(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handlePasswordKeyPress = (e) => {\r\n-    if (e.key === \"Enter\") {\r\n-      handleSubmit(e);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"pandacontainer\" onClick={handleClickOutside}>\r\n-      {/* Existing form elements */}\r\n-      <div className=\"mobile__signin\" style={{ padding: \"1.5rem 0\" }}>\r\n-  <div className=\"input-container\">\r\n-    <i className=\"bi bi-telephone icon\"></i>\r\n-    <input\r\n-      className=\"input-field\"\r\n-      type=\"tel\"\r\n-      name=\"phoneNumber\"\r\n-      placeholder=\"Mobile Number\"\r\n-      maxLength={10}\r\n-      onFocus={() => {\r\n-        handleFocus();\r\n-        handleFocusPhoneNumber();\r\n-        const speaking = new SpeechSynthesisUtterance(\"Enter Mobile Number\");\r\n-        speakout.speak(speaking);\r\n-      }}\r\n-      onChange={handleChange}\r\n-      onKeyPress={handleKeyPress}\r\n-      ref={phoneNumberRef}\r\n-    />\r\n-  </div>\r\n-  {PhonenoErrorStatus && (\r\n-    <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n-  )}\r\n-  <div className=\"input-container\">\r\n-    <i className=\"bi bi-lock-fill icon\"></i>\r\n-    <input\r\n-      className=\"input-field\"\r\n-      type={showPassword ? \"text\" : \"password\"}\r\n-      name=\"password\"\r\n-      placeholder=\"4 Digit PIN\"\r\n-      onChange={handleChange}\r\n-      onKeyPress={handlePasswordKeyPress}\r\n-      ref={passwordRef}\r\n-      maxLength={4}\r\n-      onFocus={() => {\r\n-        handleFocus();\r\n-        handleFocusPassword();\r\n-        const speaking = new SpeechSynthesisUtterance(\"I am very honest,i'm not seeing your password\");\r\n-        speakout.speak(speaking);\r\n-\r\n-      }}\r\n-    />\r\n-    <i\r\n-      className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n-      onClick={togglePasswordVisibility}\r\n-    ></i>\r\n-  </div>\r\n-  {PasswordErrorStatus && (\r\n-    <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n-  )}\r\n-  {/* <button\r\n+        {PasswordErrorStatus && (\r\n+          <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n+        )}\r\n+        {/* <button\r\n     className=\"loginform-btn\"\r\n     type=\"submit\"\r\n     onClick={handleSubmit}\r\n     disabled={isButtonDisabled}\r\n   >\r\n     {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n   </button> */}\r\n \r\n-<button\r\n-  className=\"loginform-btn\"\r\n-  type=\"submit\"\r\n-  onClick={handleSubmit}\r\n-  disabled={isButtonDisabled}\r\n->\r\n-  <span className=\"transition\"></span>\r\n-  <span className=\"gradient\"></span>\r\n-  <span className=\"label\">{isButtonDisabled ? \"Logging in...\" : \"Login\"}</span>\r\n-</button>\r\n+        <button\r\n+          className=\"loginform-btn\"\r\n+          type=\"submit\"\r\n+          onClick={handleSubmit}\r\n+          disabled={isButtonDisabled}\r\n+        >\r\n+          <span className=\"transition\"></span>\r\n+          <span className=\"gradient\"></span>\r\n+          <span className=\"label\">\r\n+            {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n+          </span>\r\n+        </button>\r\n \r\n-  {loginStatus && (\r\n-    <div\r\n-      style={{\r\n-        fontSize: \".8rem\",\r\n-        color: \"white\",\r\n-        padding: \"0.1rem 0.8rem\",\r\n-        backgroundColor: \"#ff0000b8\",\r\n-        position: \"absolute\",\r\n-        borderRadius:\"1rem\",\r\n-        top:\"14.56rem\",\r\n-      }}\r\n-    >\r\n-      {loginStatus}\r\n-    </div>\r\n-  )}\r\n-</div>\r\n+        {loginStatus && (\r\n+          <div\r\n+            style={{\r\n+              fontSize: \".8rem\",\r\n+              color: \"white\",\r\n+              padding: \"0.1rem 0.8rem\",\r\n+              backgroundColor: \"#ff0000b8\",\r\n+              position: \"absolute\",\r\n+              borderRadius: \"1rem\",\r\n+              top: \"14.56rem\",\r\n+            }}\r\n+          >\r\n+            {loginStatus}\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n       {/* Panda Markup */}\r\n       <div className=\"ear-l\"></div>\r\n       <div className=\"ear-r\"></div>\r\n       <div className=\"panda-face\">\r\n"
                },
                {
                    "date": 1700802892354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,14 +234,9 @@\n import CryptoJS from \"crypto-js\";\r\n import { encrypt_secrete_key } from \"../../constants/urls\";\r\n import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n \r\n-const MobileSignin = ({\r\n-  phoneNumber,\r\n-  pin,\r\n-  triggerLogin,\r\n-  updateLoginStatus,\r\n-}) => {\r\n+const MobileSignin = ({ phoneNumber, pin, triggerLogin, updateLoginStatus }) => {\r\n   const navigate = useNavigate();\r\n   const { student, updateStudent } = StudentDetailsCustomHook();\r\n   const currentDate = new Date();\r\n   const currentHour = currentDate.getHours();\r\n@@ -270,57 +265,33 @@\n   const handleFocus = () => {\r\n     setLoginStatus(\"\");\r\n   };\r\n \r\n+\r\n   // In MobileSignin component\r\n-  useEffect(() => {\r\n-    // Assuming phoneNumber and pin are received as props\r\n-    phoneNumberRef.current.value = phoneNumber;\r\n-    passwordRef.current.value = pin;\r\n-  }, [phoneNumber, pin]);\r\n+useEffect(() => {\r\n+  // Assuming phoneNumber and pin are received as props\r\n+  phoneNumberRef.current.value = phoneNumber;\r\n+  passwordRef.current.value = pin;\r\n+}, [phoneNumber, pin]);\r\n \r\n-  useEffect(() => {\r\n-    // Only set values if refs are not null\r\n-    if (phoneNumberRef.current && passwordRef.current) {\r\n-      phoneNumberRef.current.value = phoneNumber;\r\n-      passwordRef.current.value = pin;\r\n-    }\r\n \r\n-    return () => {\r\n-      // Reset states when component unmounts\r\n-      setPhonenoErrorStatus(\"\");\r\n-      setPasswordErrorStatus(\"\");\r\n-      setLoginStatus(\"\");\r\n-      // Any other states that need to be reset\r\n-      // Clear the input fields when the component unmounts, if refs are not null\r\n-      if (phoneNumberRef.current && passwordRef.current) {\r\n-        phoneNumberRef.current.value = \"\";\r\n-        passwordRef.current.value = \"\";\r\n-      }\r\n-    };\r\n-  }, [phoneNumber, pin]);\r\n+useEffect(() => {\r\n+  phoneNumberRef.current.value = phoneNumber;\r\n+  passwordRef.current.value = pin;\r\n+}, [phoneNumber, pin]);\r\n \r\n-  // New function to reset login details\r\n-  const resetLoginDetails = () => {\r\n-    phoneNumberRef.current.value = \"\";\r\n-    passwordRef.current.value = \"\";\r\n-    // Reset any other relevant state or props if necessary\r\n-  };\r\n+// Rest of your component code\r\n \r\n-  // useEffect to reset state when loginStatus changes to successful\r\n-  useEffect(() => {\r\n-    if (loginStatus === \"Login successful\") {\r\n-      resetLoginDetails();\r\n-    }\r\n-  }, [loginStatus]);\r\n \r\n-  useEffect(() => {\r\n-    if (triggerLogin) {\r\n-      handleSubmit();\r\n-      // Reset the triggerLogin flag here if necessary\r\n-    }\r\n-  }, [triggerLogin]);\r\n+useEffect(() => {\r\n+  if (triggerLogin) {\r\n+    handleSubmit(); // Call your login function\r\n+    // Reset the flag if necessary\r\n+  }\r\n+}, [triggerLogin]);\r\n \r\n+\r\n   // Panda Animation Functions\r\n   const handleFocusPhoneNumber = () => {\r\n     document.querySelector(\".eyeball-l\").style.cssText =\r\n       \"left: 0.75em; top: 1.12em;\";\r\n@@ -397,10 +368,9 @@\n     }\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-    // Check if the event exists and prevent the default behavior\r\n-    if (e) e.preventDefault();\r\n+    e.preventDefault();\r\n     const phoneNumber = phoneNumberRef.current.value;\r\n     const password = passwordRef.current.value;\r\n \r\n     // Disable the button to prevent multiple clicks during API call\r\n@@ -460,8 +430,9 @@\n           window.localStorage.setItem(\"login_details\", encryptedData);\r\n           setLoginStatus(\"Login successful\");\r\n           updateLoginStatus(true); // Update login status on successful login\r\n \r\n+\r\n           // Navigate to child's page\r\n           const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n           speakout.speak(speaking);\r\n \r\n@@ -471,10 +442,8 @@\n             );\r\n             speakout.speak(speaking);\r\n           }, 3000);\r\n           navigate(\"/portfolio\");\r\n-          // Reset phoneNumber and pin here after successful login\r\n-          resetLoginDetails();\r\n         } else {\r\n           const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n           speakout.speak(speaking);\r\n           setLoginStatus(\"Login failed!\");\r\n@@ -499,98 +468,93 @@\n   return (\r\n     <div className=\"pandacontainer\" onClick={handleClickOutside}>\r\n       {/* Existing form elements */}\r\n       <div className=\"mobile__signin\" style={{ padding: \"1.5rem 0\" }}>\r\n-        <div className=\"input-container\">\r\n-          <i className=\"bi bi-telephone icon\"></i>\r\n-          <input\r\n-            className=\"input-field\"\r\n-            type=\"tel\"\r\n-            name=\"phoneNumber\"\r\n-            placeholder=\"Mobile Number\"\r\n-            maxLength={10}\r\n-            onFocus={() => {\r\n-              handleFocus();\r\n-              handleFocusPhoneNumber();\r\n-              const speaking = new SpeechSynthesisUtterance(\r\n-                \"Enter Mobile Number\"\r\n-              );\r\n-              speakout.speak(speaking);\r\n-            }}\r\n-            onChange={handleChange}\r\n-            onKeyPress={handleKeyPress}\r\n-            ref={phoneNumberRef}\r\n-          />\r\n-        </div>\r\n-        {PhonenoErrorStatus && (\r\n-          <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n-        )}\r\n-        <div className=\"input-container\">\r\n-          <i className=\"bi bi-lock-fill icon\"></i>\r\n-          <input\r\n-            className=\"input-field\"\r\n-            type={showPassword ? \"text\" : \"password\"}\r\n-            name=\"password\"\r\n-            placeholder=\"4 Digit PIN\"\r\n-            onChange={handleChange}\r\n-            onKeyPress={handlePasswordKeyPress}\r\n-            ref={passwordRef}\r\n-            maxLength={4}\r\n-            onFocus={() => {\r\n-              handleFocus();\r\n-              handleFocusPassword();\r\n-              const speaking = new SpeechSynthesisUtterance(\r\n-                \"I am very honest,i'm not seeing your password\"\r\n-              );\r\n-              speakout.speak(speaking);\r\n-            }}\r\n-          />\r\n-          <i\r\n-            className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n-            onClick={togglePasswordVisibility}\r\n-          ></i>\r\n-        </div>\r\n-        {PasswordErrorStatus && (\r\n-          <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n-        )}\r\n-        {/* <button\r\n+  <div className=\"input-container\">\r\n+    <i className=\"bi bi-telephone icon\"></i>\r\n+    <input\r\n+      className=\"input-field\"\r\n+      type=\"tel\"\r\n+      name=\"phoneNumber\"\r\n+      placeholder=\"Mobile Number\"\r\n+      maxLength={10}\r\n+      onFocus={() => {\r\n+        handleFocus();\r\n+        handleFocusPhoneNumber();\r\n+        const speaking = new SpeechSynthesisUtterance(\"Enter Mobile Number\");\r\n+        speakout.speak(speaking);\r\n+      }}\r\n+      onChange={handleChange}\r\n+      onKeyPress={handleKeyPress}\r\n+      ref={phoneNumberRef}\r\n+    />\r\n+  </div>\r\n+  {PhonenoErrorStatus && (\r\n+    <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n+  )}\r\n+  <div className=\"input-container\">\r\n+    <i className=\"bi bi-lock-fill icon\"></i>\r\n+    <input\r\n+      className=\"input-field\"\r\n+      type={showPassword ? \"text\" : \"password\"}\r\n+      name=\"password\"\r\n+      placeholder=\"4 Digit PIN\"\r\n+      onChange={handleChange}\r\n+      onKeyPress={handlePasswordKeyPress}\r\n+      ref={passwordRef}\r\n+      maxLength={4}\r\n+      onFocus={() => {\r\n+        handleFocus();\r\n+        handleFocusPassword();\r\n+        const speaking = new SpeechSynthesisUtterance(\"I am very honest,i'm not seeing your password\");\r\n+        speakout.speak(speaking);\r\n+\r\n+      }}\r\n+    />\r\n+    <i\r\n+      className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n+      onClick={togglePasswordVisibility}\r\n+    ></i>\r\n+  </div>\r\n+  {PasswordErrorStatus && (\r\n+    <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n+  )}\r\n+  {/* <button\r\n     className=\"loginform-btn\"\r\n     type=\"submit\"\r\n     onClick={handleSubmit}\r\n     disabled={isButtonDisabled}\r\n   >\r\n     {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n   </button> */}\r\n \r\n-        <button\r\n-          className=\"loginform-btn\"\r\n-          type=\"submit\"\r\n-          onClick={handleSubmit}\r\n-          disabled={isButtonDisabled}\r\n-        >\r\n-          <span className=\"transition\"></span>\r\n-          <span className=\"gradient\"></span>\r\n-          <span className=\"label\">\r\n-            {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n-          </span>\r\n-        </button>\r\n+<button\r\n+  className=\"loginform-btn\"\r\n+  type=\"submit\"\r\n+  onClick={handleSubmit}\r\n+  disabled={isButtonDisabled}\r\n+>\r\n+  <span className=\"transition\"></span>\r\n+  <span className=\"gradient\"></span>\r\n+  <span className=\"label\">{isButtonDisabled ? \"Logging in...\" : \"Login\"}</span>\r\n+</button>\r\n \r\n-        {loginStatus && (\r\n-          <div\r\n-            style={{\r\n-              fontSize: \".8rem\",\r\n-              color: \"white\",\r\n-              padding: \"0.1rem 0.8rem\",\r\n-              backgroundColor: \"#ff0000b8\",\r\n-              position: \"absolute\",\r\n-              borderRadius: \"1rem\",\r\n-              top: \"14.56rem\",\r\n-            }}\r\n-          >\r\n-            {loginStatus}\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n+  {loginStatus && (\r\n+    <div\r\n+      style={{\r\n+        fontSize: \".8rem\",\r\n+        color: \"white\",\r\n+        padding: \"0.1rem 0.8rem\",\r\n+        backgroundColor: \"#ff0000b8\",\r\n+        position: \"absolute\",\r\n+        borderRadius:\"1rem\",\r\n+        top:\"14.56rem\",\r\n+      }}\r\n+    >\r\n+      {loginStatus}\r\n+    </div>\r\n+  )}\r\n+</div>\r\n       {/* Panda Markup */}\r\n       <div className=\"ear-l\"></div>\r\n       <div className=\"ear-r\"></div>\r\n       <div className=\"panda-face\">\r\n@@ -612,5 +576,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default MobileSignin;\r\n+export default MobileSignin;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1700802960213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,10 @@\n     }\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n+  // Check if the event exists and prevent the default behavior\r\n+  if (e) e.preventDefault();\r\n     const phoneNumber = phoneNumberRef.current.value;\r\n     const password = passwordRef.current.value;\r\n \r\n     // Disable the button to prevent multiple clicks during API call\r\n"
                },
                {
                    "date": 1700802977266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,10 +284,10 @@\n \r\n \r\n useEffect(() => {\r\n   if (triggerLogin) {\r\n-    handleSubmit(); // Call your login function\r\n-    // Reset the flag if necessary\r\n+    handleSubmit();\r\n+    // Reset the triggerLogin flag here if necessary\r\n   }\r\n }, [triggerLogin]);\r\n \r\n \r\n"
                }
            ],
            "date": 1700736097991,
            "name": "Commit-0",
            "content": "// import React, { useRef, useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import CryptoJS from \"crypto-js\";\r\n// import { encrypt_secrete_key } from \"../../constants/urls\";\r\n// import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n\r\n// const MobileSignin = () => {\r\n//   const navigate = useNavigate();\r\n//   const { student, updateStudent } = StudentDetailsCustomHook();\r\n//   const currentDate = new Date();\r\n//   const currentHour = currentDate.getHours();\r\n//   const greeting_message =\r\n//     currentHour >= 7 && currentHour <= 11\r\n//       ? \"Good Morning\"\r\n//       : currentHour >= 12 && currentHour <= 16\r\n//       ? \"Good Afternoon\"\r\n//       : \"Good Evening\";\r\n\r\n//   const phoneNumberRef = useRef(null);\r\n//   const passwordRef = useRef(null);\r\n\r\n//   const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n//   const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n//   const [loginStatus, setLoginStatus] = useState(\"\");\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n\r\n//   const speakout = window.speechSynthesis;\r\n\r\n//   const togglePasswordVisibility = () => {\r\n//     setShowPassword(!showPassword);\r\n//   };\r\n\r\n//   const handleFocus = () => {\r\n//     setLoginStatus(\"\");\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n\r\n//     if (name === \"phoneNumber\") {\r\n//       if (value.length !== 10) {\r\n//         setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n//       } else {\r\n//         setPhonenoErrorStatus(\"\");\r\n//       }\r\n//     }\r\n\r\n//     if (name === \"password\") {\r\n//       if (value.length !== 4) {\r\n//         setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n//       } else {\r\n//         setPasswordErrorStatus(\"\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleKeyPress = (e) => {\r\n//     const digitPattern = /^[0-9]*$/;\r\n//     const key = String.fromCharCode(e.which);\r\n\r\n//     if (!digitPattern.test(key)) {\r\n//       e.preventDefault();\r\n//     }\r\n//     if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n//       passwordRef.current.focus();\r\n//     }\r\n\r\n//     if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n//       e.preventDefault();\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const phoneNumber = phoneNumberRef.current.value;\r\n//     const password = passwordRef.current.value;\r\n\r\n//     // Disable the button to prevent multiple clicks during API call\r\n//     setButtonDisabled(true);\r\n\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:8080/user-login`);\r\n//       const userData = response.data;\r\n\r\n//       const user = userData.find(\r\n//         (user) => user.parentsmobileno === phoneNumber\r\n//       );\r\n\r\n//       if (!user) {\r\n//         const speaking = new SpeechSynthesisUtterance(\"User not found\");\r\n//         speakout.speak(speaking);\r\n//         setLoginStatus(\"User not found!\");\r\n//         return;\r\n//       }\r\n\r\n//       if (password === user.parentspassword) {\r\n//         setLoginStatus(\"Parent Login successful\");\r\n//         const speaking = new SpeechSynthesisUtterance(\"Parent login successful\");\r\n//         speakout.speak(speaking);\r\n\r\n//         // Navigate to parent's page\r\n//         navigate(\"/parentspage\");\r\n//       } else {\r\n//         // Initialize child index to -1\r\n//         let childIndex = -1;\r\n\r\n//         const matchingChild = user.child.find((child, index) => {\r\n//           if (child.childpassword === password) {\r\n//             childIndex = index; // Store the child index when found\r\n//             return true;\r\n//           }\r\n//           return false;\r\n//         });\r\n\r\n//         if (matchingChild) {\r\n//           const profile_info = {\r\n//             mobileno: user?.parentsmobileno,\r\n//             student_name: matchingChild?.childname,\r\n//             medium_of_instruction: matchingChild?.mediumofinstruction,\r\n//             schooling: matchingChild?.childclass,\r\n//             profile_img: matchingChild?.childimageurl,\r\n//             curriculum: matchingChild?.childsyllabus,\r\n//             childIndex: childIndex, // Pass the child index\r\n//           };\r\n//           updateStudent(profile_info);\r\n//           const encryptedData = CryptoJS.AES.encrypt(\r\n//             JSON.stringify(profile_info),\r\n//             encrypt_secrete_key\r\n//           ).toString();\r\n//           window.localStorage.setItem(\"login_details\", encryptedData);\r\n//           setLoginStatus(\"Login successful\");\r\n\r\n//           // Navigate to child's page\r\n//           const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n//           speakout.speak(speaking);\r\n\r\n//           setTimeout(() => {\r\n//             const speaking = new SpeechSynthesisUtterance(\r\n//               `${greeting_message} ${profile_info?.student_name}`\r\n//             );\r\n//             speakout.speak(speaking);\r\n//           }, 3000);\r\n//           navigate(\"/portfolio\");\r\n//         } else {\r\n//           const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n//           speakout.speak(speaking);\r\n//           setLoginStatus(\"Login failed!\");\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error occurred during login:\", error);\r\n//       setLoginStatus(\"Error occurred during login\");\r\n//     } finally {\r\n//       // Enable the button after API call is complete\r\n//       setButtonDisabled(false);\r\n//     }\r\n//   };\r\n\r\n//   const handlePasswordKeyPress = (e) => {\r\n//     if (e.key === \"Enter\") {\r\n//       handleSubmit(e);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"mobile__signin\" style={{ padding: \"1rem 0\" }}>\r\n//       <div className=\"input-container\">\r\n//         <i className=\"bi bi-telephone icon\"></i>\r\n//         <input\r\n//           className=\"input-field\"\r\n//           type=\"tel\"\r\n//           name=\"phoneNumber\"\r\n//           placeholder=\"Mobile Number\"\r\n//           onFocus={handleFocus}\r\n//           onChange={handleChange}\r\n//           onKeyPress={handleKeyPress}\r\n//           ref={phoneNumberRef}\r\n//         />\r\n//       </div>\r\n//       {PhonenoErrorStatus && (\r\n//         <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n//       )}\r\n//       <div className=\"input-container\">\r\n//         <i className=\"bi bi-lock-fill icon\"></i>\r\n//         <input\r\n//           className=\"signup__container__form__div__form__sec__input-container__input-field-password\"\r\n//           type={showPassword ? \"text\" : \"password\"}\r\n//           name=\"password\"\r\n//           placeholder=\"4 Digit PIN\"\r\n//           onChange={handleChange}\r\n//           onKeyPress={handlePasswordKeyPress}\r\n//           ref={passwordRef}\r\n//           onFocus={handleFocus}\r\n//         />\r\n//         <i\r\n//           className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n//           onClick={togglePasswordVisibility}\r\n//         ></i>\r\n//       </div>\r\n//       {PasswordErrorStatus && (\r\n//         <small className=\"error-message\">{PasswordErrorStatus}</small>\r\n//       )}\r\n//       <button\r\n//         className=\"loginform-btn\"\r\n//         type=\"submit\"\r\n//         onClick={handleSubmit}\r\n//         disabled={isButtonDisabled}\r\n//       >\r\n//         {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n//       </button>\r\n//       {loginStatus && (\r\n//         <div\r\n//           style={{\r\n//             fontSize: \"1rem\",\r\n//             color: \"red\",\r\n//             paddingTop: \"1rem\",\r\n//           }}\r\n//         >\r\n//           {loginStatus}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MobileSignin;\r\n//\r\n\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { encrypt_secrete_key } from \"../../constants/urls\";\r\nimport StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n\r\nconst MobileSignin = ({ phoneNumber, pin, triggerLogin, updateLoginStatus }) => {\r\n  const navigate = useNavigate();\r\n  const { student, updateStudent } = StudentDetailsCustomHook();\r\n  const currentDate = new Date();\r\n  const currentHour = currentDate.getHours();\r\n  const greeting_message =\r\n    currentHour >= 7 && currentHour <= 11\r\n      ? \"Good Morning\"\r\n      : currentHour >= 12 && currentHour <= 16\r\n      ? \"Good Afternoon\"\r\n      : \"Good Evening\";\r\n\r\n  const phoneNumberRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  const [PhonenoErrorStatus, setPhonenoErrorStatus] = useState(\"\");\r\n  const [PasswordErrorStatus, setPasswordErrorStatus] = useState(\"\");\r\n  const [loginStatus, setLoginStatus] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n\r\n  const speakout = window.speechSynthesis;\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    setLoginStatus(\"\");\r\n  };\r\n\r\n\r\n  // In MobileSignin component\r\nuseEffect(() => {\r\n  // Assuming phoneNumber and pin are received as props\r\n  phoneNumberRef.current.value = phoneNumber;\r\n  passwordRef.current.value = pin;\r\n}, [phoneNumber, pin]);\r\n\r\n\r\nuseEffect(() => {\r\n  phoneNumberRef.current.value = phoneNumber;\r\n  passwordRef.current.value = pin;\r\n}, [phoneNumber, pin]);\r\n\r\n// Rest of your component code\r\n\r\n\r\n  useEffect(() => {\r\n    if (triggerLogin) {\r\n      handleSubmit(); // Assuming handleSubmit is your login function\r\n    }\r\n  }, [triggerLogin]);\r\n\r\n  // Panda Animation Functions\r\n  const handleFocusPhoneNumber = () => {\r\n    document.querySelector(\".eyeball-l\").style.cssText =\r\n      \"left: 0.75em; top: 1.12em;\";\r\n    document.querySelector(\".eyeball-r\").style.cssText =\r\n      \"right: 0.75em; top: 1.12em;\";\r\n    normalHandStyle();\r\n  };\r\n\r\n  const handleFocusPassword = () => {\r\n    document.querySelector(\".hand-l\").style.cssText =\r\n      \"height: 6.56em; top: 3.87em; left: 11.75em; transform: rotate(-155deg);\";\r\n    document.querySelector(\".hand-r\").style.cssText =\r\n      \"height: 6.56em; top: 3.87em; right: 11.75em; transform: rotate(155deg);\";\r\n    normalEyeStyle();\r\n  };\r\n\r\n  const handleClickOutside = (e) => {\r\n    if (\r\n      e.target !== phoneNumberRef.current &&\r\n      e.target !== passwordRef.current\r\n    ) {\r\n      normalEyeStyle();\r\n      normalHandStyle();\r\n    }\r\n  };\r\n\r\n  const normalEyeStyle = () => {\r\n    document.querySelector(\".eyeball-l\").style.cssText =\r\n      \"left: 0.6em; top: 0.6em;\";\r\n    document.querySelector(\".eyeball-r\").style.cssText =\r\n      \"right: 0.6em; top: 0.6em;\";\r\n  };\r\n\r\n  const normalHandStyle = () => {\r\n    document.querySelector(\".hand-l\").style.cssText =\r\n      \"height: 2.81em; top: 8.4em; left: 7.5em; transform: rotate(0deg);\";\r\n    document.querySelector(\".hand-r\").style.cssText =\r\n      \"height: 2.81em; top: 8.4em; right: 7.5em; transform: rotate(0deg);\";\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"phoneNumber\") {\r\n      if (value.length !== 10) {\r\n        setPhonenoErrorStatus(\"Mobile number must be 10 digits.\");\r\n      } else {\r\n        setPhonenoErrorStatus(\"\");\r\n      }\r\n    }\r\n\r\n    if (name === \"password\") {\r\n      if (value.length !== 4) {\r\n        setPasswordErrorStatus(\"PIN must be 4 digits.\");\r\n      } else {\r\n        setPasswordErrorStatus(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    const digitPattern = /^[0-9]*$/;\r\n    const key = String.fromCharCode(e.which);\r\n\r\n    if (!digitPattern.test(key)) {\r\n      e.preventDefault();\r\n    }\r\n    if (e.target.name === \"phoneNumber\" && e.target.value.length === 10) {\r\n      passwordRef.current.focus();\r\n    }\r\n\r\n    if (e.target.name === \"password\" && e.target.value.length >= 4) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const phoneNumber = phoneNumberRef.current.value;\r\n    const password = passwordRef.current.value;\r\n\r\n    // Disable the button to prevent multiple clicks during API call\r\n    setButtonDisabled(true);\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/user-login`);\r\n      const userData = response.data;\r\n\r\n      const user = userData.find(\r\n        (user) => user.parentsmobileno === phoneNumber\r\n      );\r\n\r\n      if (!user) {\r\n        const speaking = new SpeechSynthesisUtterance(\"Invalid Credentials\");\r\n        speakout.speak(speaking);\r\n        setLoginStatus(\"Invalid Credentials!\");\r\n        return;\r\n      }\r\n\r\n      if (password === user.parentspassword) {\r\n        setLoginStatus(\"Parent Login successful\");\r\n        const speaking = new SpeechSynthesisUtterance(\r\n          \"Parent login successful\"\r\n        );\r\n        speakout.speak(speaking);\r\n\r\n        // Navigate to parent's page\r\n        navigate(\"/parentspage\");\r\n      } else {\r\n        // Initialize child index to -1\r\n        let childIndex = -1;\r\n\r\n        const matchingChild = user.child.find((child, index) => {\r\n          if (child.childpassword === password) {\r\n            childIndex = index; // Store the child index when found\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n\r\n        if (matchingChild) {\r\n          const profile_info = {\r\n            mobileno: user?.parentsmobileno,\r\n            student_name: matchingChild?.childname,\r\n            medium_of_instruction: matchingChild?.mediumofinstruction,\r\n            schooling: matchingChild?.childclass,\r\n            profile_img: matchingChild?.childimageurl,\r\n            curriculum: matchingChild?.childsyllabus,\r\n            childIndex: childIndex, // Pass the child index\r\n          };\r\n          updateStudent(profile_info);\r\n          const encryptedData = CryptoJS.AES.encrypt(\r\n            JSON.stringify(profile_info),\r\n            encrypt_secrete_key\r\n          ).toString();\r\n          window.localStorage.setItem(\"login_details\", encryptedData);\r\n          setLoginStatus(\"Login successful\");\r\n          updateLoginStatus(true); // Update login status on successful login\r\n\r\n\r\n          // Navigate to child's page\r\n          const speaking = new SpeechSynthesisUtterance(\"Login successful\");\r\n          speakout.speak(speaking);\r\n\r\n          setTimeout(() => {\r\n            const speaking = new SpeechSynthesisUtterance(\r\n              `${greeting_message} ${profile_info?.student_name}`\r\n            );\r\n            speakout.speak(speaking);\r\n          }, 3000);\r\n          navigate(\"/portfolio\");\r\n        } else {\r\n          const speaking = new SpeechSynthesisUtterance(\"Login Failed\");\r\n          speakout.speak(speaking);\r\n          setLoginStatus(\"Login failed!\");\r\n          updateLoginStatus(false); // Update login status on failure\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error occurred during login:\", error);\r\n      setLoginStatus(\"Error occurred during login\");\r\n    } finally {\r\n      // Enable the button after API call is complete\r\n      setButtonDisabled(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pandacontainer\" onClick={handleClickOutside}>\r\n      {/* Existing form elements */}\r\n      <div className=\"mobile__signin\" style={{ padding: \"1.5rem 0\" }}>\r\n  <div className=\"input-container\">\r\n    <i className=\"bi bi-telephone icon\"></i>\r\n    <input\r\n      className=\"input-field\"\r\n      type=\"tel\"\r\n      name=\"phoneNumber\"\r\n      placeholder=\"Mobile Number\"\r\n      maxLength={10}\r\n      onFocus={() => {\r\n        handleFocus();\r\n        handleFocusPhoneNumber();\r\n        const speaking = new SpeechSynthesisUtterance(\"Enter Mobile Number\");\r\n        speakout.speak(speaking);\r\n      }}\r\n      onChange={handleChange}\r\n      onKeyPress={handleKeyPress}\r\n      ref={phoneNumberRef}\r\n    />\r\n  </div>\r\n  {PhonenoErrorStatus && (\r\n    <small className=\"error-message\">{PhonenoErrorStatus}</small>\r\n  )}\r\n  <div className=\"input-container\">\r\n    <i className=\"bi bi-lock-fill icon\"></i>\r\n    <input\r\n      className=\"input-field\"\r\n      type={showPassword ? \"text\" : \"password\"}\r\n      name=\"password\"\r\n      placeholder=\"4 Digit PIN\"\r\n      onChange={handleChange}\r\n      onKeyPress={handlePasswordKeyPress}\r\n      ref={passwordRef}\r\n      maxLength={4}\r\n      onFocus={() => {\r\n        handleFocus();\r\n        handleFocusPassword();\r\n        const speaking = new SpeechSynthesisUtterance(\"I am very honest,i'm not seeing your password\");\r\n        speakout.speak(speaking);\r\n\r\n      }}\r\n    />\r\n    <i\r\n      className={`bi bi-eye${showPassword ? \"-slash\" : \"\"} password-icon`}\r\n      onClick={togglePasswordVisibility}\r\n    ></i>\r\n  </div>\r\n  {PasswordErrorStatus && (\r\n    <small className=\"pass-error-message\">{PasswordErrorStatus}</small>\r\n  )}\r\n  {/* <button\r\n    className=\"loginform-btn\"\r\n    type=\"submit\"\r\n    onClick={handleSubmit}\r\n    disabled={isButtonDisabled}\r\n  >\r\n    {isButtonDisabled ? \"Logging in...\" : \"Login\"}\r\n  </button> */}\r\n\r\n<button\r\n  className=\"loginform-btn\"\r\n  type=\"submit\"\r\n  onClick={handleSubmit}\r\n  disabled={isButtonDisabled}\r\n>\r\n  <span className=\"transition\"></span>\r\n  <span className=\"gradient\"></span>\r\n  <span className=\"label\">{isButtonDisabled ? \"Logging in...\" : \"Login\"}</span>\r\n</button>\r\n\r\n  {loginStatus && (\r\n    <div\r\n      style={{\r\n        fontSize: \".8rem\",\r\n        color: \"white\",\r\n        padding: \"0.1rem 0.8rem\",\r\n        backgroundColor: \"#ff0000b8\",\r\n        position: \"absolute\",\r\n        borderRadius:\"1rem\",\r\n        top:\"14.56rem\",\r\n      }}\r\n    >\r\n      {loginStatus}\r\n    </div>\r\n  )}\r\n</div>\r\n      {/* Panda Markup */}\r\n      <div className=\"ear-l\"></div>\r\n      <div className=\"ear-r\"></div>\r\n      <div className=\"panda-face\">\r\n        <div className=\"blush-l\"></div>\r\n        <div className=\"blush-r\"></div>\r\n        <div className=\"eye-l\">\r\n          <div className=\"eyeball-l\"></div>\r\n        </div>\r\n        <div className=\"eye-r\">\r\n          <div className=\"eyeball-r\"></div>\r\n        </div>\r\n        <div className=\"nose\"></div>\r\n        <div className=\"mouth\"></div>\r\n      </div>\r\n      <div className=\"hand-l\"></div>\r\n      <div className=\"hand-r\"></div>\r\n      <div className=\"paw-l\"></div>\r\n      <div className=\"paw-r\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MobileSignin;\r\n"
        }
    ]
}