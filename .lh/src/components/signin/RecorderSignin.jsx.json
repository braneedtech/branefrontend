{
    "sourceFile": "src/components/signin/RecorderSignin.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1700811407794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700811435713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,8 +152,15 @@\n     );\r\n     speakout.speak(speaking);\r\n   };\r\n \r\n+    // Effect to listen for the triggerRecord change\r\n+    useEffect(() => {\r\n+      if (triggerRecord) {\r\n+        startRecording();\r\n+      }\r\n+    }, [triggerRecord]);\r\n+\r\n   return (\r\n     <div\r\n       style={{\r\n         textAlign: \"center\",\r\n"
                },
                {
                    "date": 1700818005917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,14 +152,14 @@\n     );\r\n     speakout.speak(speaking);\r\n   };\r\n \r\n-    // Effect to listen for the triggerRecord change\r\n-    useEffect(() => {\r\n-      if (triggerRecord) {\r\n-        startRecording();\r\n-      }\r\n-    }, [triggerRecord]);\r\n+  useEffect(() => {\r\n+    if (props.triggerRecord) {\r\n+      startRecording();\r\n+    }\r\n+  }, [props.triggerRecord]);\r\n+  \r\n \r\n   return (\r\n     <div\r\n       style={{\r\n"
                },
                {
                    "date": 1700818015398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,12 +153,12 @@\n     speakout.speak(speaking);\r\n   };\r\n \r\n   useEffect(() => {\r\n-    if (props.triggerRecord) {\r\n+    if (triggerRecord) {\r\n       startRecording();\r\n     }\r\n-  }, [props.triggerRecord]);\r\n+  }, [triggerRecord]);\r\n   \r\n \r\n   return (\r\n     <div\r\n"
                },
                {
                    "date": 1700818905668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,12 @@\n     mediaRecorderRef.current.ondataavailable = (event) => {\r\n       if (event.data.size > 0) {\r\n         audioChunks.push(event.data);\r\n       }\r\n+      // Resetting the trigger\r\n+      if (props.setTriggerRecordAudio) {\r\n+        props.setTriggerRecordAudio(false);\r\n+      }\r\n     };\r\n \r\n     mediaRecorderRef.current.onstop = () => {\r\n       const audioBlob = new Blob(audioChunks, { type: \"audio/wav\" });\r\n@@ -157,9 +161,8 @@\n     if (triggerRecord) {\r\n       startRecording();\r\n     }\r\n   }, [triggerRecord]);\r\n-  \r\n \r\n   return (\r\n     <div\r\n       style={{\r\n"
                },
                {
                    "date": 1700818940212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,10 @@\n       if (event.data.size > 0) {\r\n         audioChunks.push(event.data);\r\n       }\r\n       // Resetting the trigger\r\n-      if (props.setTriggerRecordAudio) {\r\n-        props.setTriggerRecordAudio(false);\r\n+      if (setTriggerRecordAudio) {\r\n+        setTriggerRecordAudio(false);\r\n       }\r\n     };\r\n \r\n     mediaRecorderRef.current.onstop = () => {\r\n"
                },
                {
                    "date": 1700818985182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,420 @@\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import axios from \"axios\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import CryptoJS from \"crypto-js\";\r\n+import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n+import { encrypt_secrete_key } from \"../../constants/urls\";\r\n+import voicegif from \"../../assets/waveanim.gif\";\r\n+import loadingGif from \"../../assets/loading.gif\";\r\n+import successGif from \"../../assets/successful.gif\";\r\n+import failGif from \"../../assets/failed.gif\";\r\n+\r\n+const AudioRecorderSignin = ({ updateLoginStatus, triggerRecord }) => {\r\n+  const { updateStudent } = StudentDetailsCustomHook();\r\n+  const [audioBase64, setAudioBase64] = useState(null);\r\n+  const [verificationStatus, setVerificationStatus] = useState(\"\");\r\n+  const [showRecordButton, setShowRecordButton] = useState(true); // Initialize to true\r\n+  const mediaRecorderRef = useRef(null);\r\n+  const navigate = useNavigate();\r\n+  const speakout = window.speechSynthesis;\r\n+  const [showGif, setShowGif] = useState(false);\r\n+  const [showSuccessGif, setShowSuccessGif] = useState(false);\r\n+  const [showFailGif, setShowFailGif] = useState(false);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [apiResponse, setApiResponse] = useState(null);\r\n+\r\n+  const startRecording = async () => {\r\n+    setShowFailGif(false); // Hide the fail GIF\r\n+    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n+\r\n+    mediaRecorderRef.current = new MediaRecorder(stream);\r\n+    let audioChunks = [];\r\n+\r\n+    mediaRecorderRef.current.ondataavailable = (event) => {\r\n+      if (event.data.size > 0) {\r\n+        audioChunks.push(event.data);\r\n+      }\r\n+    };\r\n+\r\n+    mediaRecorderRef.current.onstop = () => {\r\n+      const audioBlob = new Blob(audioChunks, { type: \"audio/wav\" });\r\n+\r\n+      const reader = new FileReader();\r\n+      reader.onloadend = () => {\r\n+        const base64Data = reader.result.split(\",\")[1];\r\n+        setAudioBase64(base64Data);\r\n+        sendAudioBase64ToAPI(base64Data);\r\n+      };\r\n+      reader.readAsDataURL(audioBlob);\r\n+\r\n+      stream.getTracks().forEach((track) => track.stop());\r\n+    };\r\n+\r\n+    mediaRecorderRef.current.start();\r\n+    setShowRecordButton(false);\r\n+    // Show the GIF exactly when the record button hides\r\n+    setShowGif(true);\r\n+    setTimeout(() => {\r\n+      stopRecording();\r\n+    }, 7000); // Stop recording after 7 seconds\r\n+  };\r\n+\r\n+  const stopRecording = () => {\r\n+    if (\r\n+      mediaRecorderRef.current &&\r\n+      mediaRecorderRef.current.state !== \"inactive\"\r\n+    ) {\r\n+      mediaRecorderRef.current.stop();\r\n+    }\r\n+    // Hide the recording GIF and show the record button\r\n+    setShowGif(false);\r\n+    setShowRecordButton(true);\r\n+  };\r\n+\r\n+  const recordAgain = () => {\r\n+    setVerificationStatus(\"\");\r\n+    setAudioBase64(null);\r\n+    setShowFailGif(false); // Hide the fail GIF\r\n+    startRecording();\r\n+  };\r\n+\r\n+  const sendAudioBase64ToAPI = async (base64Data) => {\r\n+    setLoading(true); // Show loading GIF while waiting for the server\r\n+    const formData = new FormData();\r\n+    formData.append(\"audio_file\", base64Data);\r\n+\r\n+    try {\r\n+      const response = await axios.post(\r\n+        \"http://3.109.144.62:8001/signin/\",\r\n+        formData,\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"multipart/form-data\",\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      setApiResponse(response.data.success);\r\n+      if (response.data.success) {\r\n+        setVerificationStatus(\"Login Success\");\r\n+        updateLoginStatus(true);\r\n+        const profile_info = {\r\n+          student_name: response.data?.student_name,\r\n+          medium_of_instruction: response.data?.medium_of_instruction,\r\n+          schooling: response.data?.grade,\r\n+          profile_img: response.data?.profile_img,\r\n+          curriculum: response.data?.curriculum,\r\n+          mobileno: response.data?.mobileno,\r\n+          childIndex: response.data?.childIndex,\r\n+        };\r\n+        updateStudent(profile_info);\r\n+        const encryptedData = CryptoJS.AES.encrypt(\r\n+          JSON.stringify(profile_info),\r\n+          encrypt_secrete_key\r\n+        ).toString();\r\n+        window.localStorage.setItem(\"login_details\", encryptedData);\r\n+        setShowSuccessGif(true);\r\n+        setLoading(false); // Hide loading GIF after successful login\r\n+        speakLoginSuccess(profile_info);\r\n+        navigate(`/portfolio`);\r\n+      } else {\r\n+        setVerificationStatus(\"Login Fail\");\r\n+        updateLoginStatus(false);\r\n+        setShowFailGif(true);\r\n+        setLoading(false); // Hide loading GIF after failed login\r\n+        speakLoginFail();\r\n+        setShowRecordButton(true); // Show \"Record Again\" button after login failure\r\n+      }\r\n+    } catch (error) {\r\n+      console.error(\"Error uploading audio:\", error);\r\n+      setVerificationStatus(\"Login Failed server error\");\r\n+      setShowFailGif(true);\r\n+      updateLoginStatus(false);\r\n+      setLoading(false);\r\n+      speakLoginFail();\r\n+      setShowRecordButton(true);\r\n+    }\r\n+  };\r\n+\r\n+  const speakLoginSuccess = (profile_info) => {\r\n+    const greeting_message = `Good ${\r\n+      new Date().getHours() < 12 ? \"Morning\" : \"Afternoon\"\r\n+    } ${profile_info?.student_name}`;\r\n+    const speaking = new SpeechSynthesisUtterance(\r\n+      `${greeting_message}. Login successful`\r\n+    );\r\n+    speakout.speak(speaking);\r\n+  };\r\n+\r\n+  const speakLoginFail = () => {\r\n+    const speaking = new SpeechSynthesisUtterance(\r\n+      \"Login Failed. Please try again.\"\r\n+    );\r\n+    speakout.speak(speaking);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (triggerRecord) {\r\n+      startRecording();\r\n+    }\r\n+  }, [triggerRecord]);\r\n+  \r\n+\r\n+  return (\r\n+    <div\r\n+      style={{\r\n+        textAlign: \"center\",\r\n+        paddingTop: \"2rem\",\r\n+        height: \"13vw\",\r\n+        display: \"flex\",\r\n+        justifyContent: \"center\",\r\n+        alignItems: \"center\",\r\n+        flexDirection: \"column\",\r\n+      }}\r\n+    >\r\n+      {loading && (\r\n+        <img\r\n+          src={loadingGif}\r\n+          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n+          alt=\"Loading GIF\"\r\n+        />\r\n+      )}\r\n+      {showGif && !loading && (\r\n+        <img\r\n+          src={voicegif}\r\n+          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n+          alt=\"Recording GIF\"\r\n+        />\r\n+      )}\r\n+      {showSuccessGif && (\r\n+        <img\r\n+          src={successGif}\r\n+          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n+          alt=\"Success GIF\"\r\n+        />\r\n+      )}\r\n+      {showFailGif && (\r\n+        <img\r\n+          src={failGif}\r\n+          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n+          alt=\"Fail GIF\"\r\n+        />\r\n+      )}\r\n+      {showRecordButton && !loading && (\r\n+        <div>\r\n+          <button\r\n+            className=\"loginform-btn\"\r\n+            type=\"button\"\r\n+            onClick={startRecording}\r\n+          >\r\n+            <span className=\"transition\"></span>\r\n+            <span className=\"gradient\"></span>\r\n+            <span className=\"label\"> Record Audio</span>\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+      {verificationStatus === \"Login Success\" && !loading && (\r\n+        <div>\r\n+          <div>\r\n+            <audio controls src={`data:audio/wav;base64,${audioBase64}`} />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+      {verificationStatus === \"Login Fail\" && !loading && (\r\n+        <div>\r\n+          <div style={{ fontSize: \"1rem\", color: \"red\", paddingTop: \"1rem\" }}>\r\n+            Login Failed\r\n+          </div>\r\n+          <button\r\n+            className=\"signup__container__form__div__button\"\r\n+            type=\"button\"\r\n+            onClick={recordAgain}\r\n+          >\r\n+            Record Again\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AudioRecorderSignin;\r\n+\r\n+// import React, { useState, useRef } from \"react\";\r\n+// import axios from \"axios\";\r\n+// import { useNavigate } from \"react-router-dom\";\r\n+// import CryptoJS from \"crypto-js\";\r\n+// import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n+// import { encrypt_secrete_key } from \"../../constants/urls\";\r\n+// import voicegif from '../../assets/waveanim.gif';\r\n+// const AudioRecorderSignin = () => {\r\n+//   const { updateStudent } = StudentDetailsCustomHook();\r\n+//   const [recording, setRecording] = useState(false);\r\n+//   const [audioBase64, setAudioBase64] = useState(null);\r\n+//   const [apiResponse, setApiResponse] = useState(null);\r\n+//   const [uploadError, setUploadError] = useState(null);\r\n+//   const mediaRecorderRef = useRef(null);\r\n+//   const currentDate = new Date();\r\n+//   const currentHour = currentDate.getHours();\r\n+//   const greeting_message = currentHour >= 7 && currentHour <= 12 ? \"Good Morning\" : currentHour > 12 && currentHour <= 4 ? \"Good Afternoon\" : \"Good Evening\"\r\n+//   const navigate = useNavigate();\r\n+//   const [verificationStatus, setVerificationStatus] = useState(\"\");\r\n+//   const speakout = window.speechSynthesis;\r\n+//   const [showGif, setShowGif] = useState(false);\r\n+//   const startRecording = async () => {\r\n+//     setShowGif(true);\r\n+//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n+\r\n+//     mediaRecorderRef.current = new MediaRecorder(stream);\r\n+//     let audioChunks = [];\r\n+\r\n+//     mediaRecorderRef.current.ondataavailable = (event) => {\r\n+//       if (event.data.size > 0) {\r\n+//         audioChunks.push(event.data);\r\n+//       }\r\n+//     };\r\n+\r\n+//     mediaRecorderRef.current.onstop = () => {\r\n+//       const audioBlob = new Blob(audioChunks, { type: \"audio/wav\" });\r\n+\r\n+//       const reader = new FileReader();\r\n+//       reader.onloadend = () => {\r\n+//         const base64Data = reader.result.split(\",\")[1];\r\n+//         setAudioBase64(base64Data);\r\n+//         sendAudioBase64ToAPI(base64Data);\r\n+//       };\r\n+//       reader.readAsDataURL(audioBlob);\r\n+\r\n+//       stream.getTracks().forEach((track) => track.stop());\r\n+//     };\r\n+\r\n+//     mediaRecorderRef.current.start();\r\n+//     setTimeout(() => {\r\n+//       stopRecording();\r\n+//     }, 7000); // Stop recording after 5 seconds\r\n+//     setRecording(true);\r\n+//   };\r\n+\r\n+//   const stopRecording = () => {\r\n+//     setShowGif(false);\r\n+//     if (\r\n+//       mediaRecorderRef.current &&\r\n+//       mediaRecorderRef.current.state !== \"inactive\"\r\n+//     ) {\r\n+//       mediaRecorderRef.current.stop();\r\n+//       setRecording(false);\r\n+//     }\r\n+//   };\r\n+\r\n+//   const recordAgain = () => {\r\n+//     setVerificationStatus(\"\");\r\n+//     setAudioBase64(null);\r\n+//     setApiResponse(null);\r\n+//     setUploadError(null);\r\n+//     startRecording();\r\n+//   };\r\n+\r\n+//   const sendAudioBase64ToAPI = async (base64Data) => {\r\n+//     const formData = new FormData();\r\n+//     formData.append(\"audio_file\", base64Data);\r\n+\r\n+//     try {\r\n+//       const response = await axios.post(\r\n+//         \"http://65.2.149.64:8001/signin/\",\r\n+//         formData,\r\n+//         {\r\n+//           headers: {\r\n+//             \"Content-Type\": \"multipart/form-data\",\r\n+//           },\r\n+//         }\r\n+//       );\r\n+//       console.log(response)\r\n+//       setApiResponse(response.data.success);\r\n+//       const msg = response.data.success ? \"Login successful\" : \"Login Failed\";\r\n+//       const speaking = new SpeechSynthesisUtterance(msg);\r\n+//       speakout.speak(speaking);\r\n+//       if (response.data.success) {\r\n+//         setVerificationStatus(\"Login Sucess\");\r\n+//         const profile_info = {\r\n+//           student_name: response.data?.student_name,\r\n+//           medium_of_instruction: response.data?.medium_of_instruction,\r\n+//           schooling: response.data?.grade,\r\n+//           profile_img: response.data?.profile_img,\r\n+//           curriculum: response.data?.curriculum,\r\n+//           mobileno: response.data?.mobileno,\r\n+//           childIndex: response.data?.childIndex,\r\n+\r\n+//         };\r\n+//         updateStudent(profile_info);\r\n+//         const encryptedData = CryptoJS.AES.encrypt(\r\n+//           JSON.stringify(profile_info),\r\n+//           encrypt_secrete_key\r\n+//         ).toString();\r\n+//         window.localStorage.setItem(\"login_details\", encryptedData);\r\n+//         setTimeout(()=>{\r\n+//           const speaking = new SpeechSynthesisUtterance(`${greeting_message} ${profile_info?.student_name}`);\r\n+//           speakout.speak(speaking)\r\n+//         },4000)\r\n+//         navigate(`/portfolio`);\r\n+//       } else {\r\n+//         setVerificationStatus(\"Login Fail\");\r\n+//       }\r\n+//     } catch (error) {\r\n+//       console.error(\"Error uploading audio:\", error);\r\n+//       setVerificationStatus(\"Login Failed server error\");\r\n+//       setUploadError(\"Error audio signin. Please try again.\");\r\n+//     }\r\n+//   };\r\n+\r\n+//   return (\r\n+//     <div style={{ textAlign: \"center\", paddingTop: \"2rem\" }}>\r\n+//       {showGif && (\r\n+//         // <iframe\r\n+//         //   src=\"https://tenor.com/embed/23229777\"\r\n+//         //   className=\"giphy-embed\"\r\n+//         //   allowFullScreen\r\n+//         //   title=\"Sound GIF\"\r\n+//         // />\r\n+//         <img src={voicegif} style={{height:'8rem', marginLeft: '1rem'}}/>\r\n+//       )}\r\n+//       {audioBase64 ? (\r\n+//         <div>\r\n+//           <audio controls src={`data:audio/wav;base64,${audioBase64}`} />\r\n+//           <br />\r\n+//           <br />\r\n+//           <button\r\n+//             className=\"signup__container__form__div__button\"\r\n+//             type=\"button\"\r\n+//             onClick={recordAgain}\r\n+//           >\r\n+//             Record Again\r\n+//           </button>\r\n+//         </div>\r\n+//       ) : (\r\n+//         !recording && (\r\n+//         <button\r\n+//           className=\"signup__container__form__div__button1\"\r\n+//           type=\"button\"\r\n+//           onClick={startRecording}\r\n+//           disabled={recording}\r\n+//         >\r\n+//           {recording ? \"Recording...\" : \"Record Audio\"}\r\n+//         </button>\r\n+//         )\r\n+//       )}\r\n+//       {verificationStatus && (\r\n+//         <div\r\n+//           style={{\r\n+//             fontSize: \"1rem\",\r\n+//             color: \"red\",\r\n+//             paddingTop: \"1rem\",\r\n+//           }}\r\n+//         >\r\n+//           {verificationStatus}\r\n+//         </div>\r\n+//       )}\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// export default AudioRecorderSignin;\r\n"
                }
            ],
            "date": 1700811407794,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\nimport { encrypt_secrete_key } from \"../../constants/urls\";\r\nimport voicegif from \"../../assets/waveanim.gif\";\r\nimport loadingGif from \"../../assets/loading.gif\";\r\nimport successGif from \"../../assets/successful.gif\";\r\nimport failGif from \"../../assets/failed.gif\";\r\n\r\nconst AudioRecorderSignin = ({ updateLoginStatus, triggerRecord }) => {\r\n  const { updateStudent } = StudentDetailsCustomHook();\r\n  const [audioBase64, setAudioBase64] = useState(null);\r\n  const [verificationStatus, setVerificationStatus] = useState(\"\");\r\n  const [showRecordButton, setShowRecordButton] = useState(true); // Initialize to true\r\n  const mediaRecorderRef = useRef(null);\r\n  const navigate = useNavigate();\r\n  const speakout = window.speechSynthesis;\r\n  const [showGif, setShowGif] = useState(false);\r\n  const [showSuccessGif, setShowSuccessGif] = useState(false);\r\n  const [showFailGif, setShowFailGif] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [apiResponse, setApiResponse] = useState(null);\r\n\r\n  const startRecording = async () => {\r\n    setShowFailGif(false); // Hide the fail GIF\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n    mediaRecorderRef.current = new MediaRecorder(stream);\r\n    let audioChunks = [];\r\n\r\n    mediaRecorderRef.current.ondataavailable = (event) => {\r\n      if (event.data.size > 0) {\r\n        audioChunks.push(event.data);\r\n      }\r\n    };\r\n\r\n    mediaRecorderRef.current.onstop = () => {\r\n      const audioBlob = new Blob(audioChunks, { type: \"audio/wav\" });\r\n\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const base64Data = reader.result.split(\",\")[1];\r\n        setAudioBase64(base64Data);\r\n        sendAudioBase64ToAPI(base64Data);\r\n      };\r\n      reader.readAsDataURL(audioBlob);\r\n\r\n      stream.getTracks().forEach((track) => track.stop());\r\n    };\r\n\r\n    mediaRecorderRef.current.start();\r\n    setShowRecordButton(false);\r\n    // Show the GIF exactly when the record button hides\r\n    setShowGif(true);\r\n    setTimeout(() => {\r\n      stopRecording();\r\n    }, 7000); // Stop recording after 7 seconds\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (\r\n      mediaRecorderRef.current &&\r\n      mediaRecorderRef.current.state !== \"inactive\"\r\n    ) {\r\n      mediaRecorderRef.current.stop();\r\n    }\r\n    // Hide the recording GIF and show the record button\r\n    setShowGif(false);\r\n    setShowRecordButton(true);\r\n  };\r\n\r\n  const recordAgain = () => {\r\n    setVerificationStatus(\"\");\r\n    setAudioBase64(null);\r\n    setShowFailGif(false); // Hide the fail GIF\r\n    startRecording();\r\n  };\r\n\r\n  const sendAudioBase64ToAPI = async (base64Data) => {\r\n    setLoading(true); // Show loading GIF while waiting for the server\r\n    const formData = new FormData();\r\n    formData.append(\"audio_file\", base64Data);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://3.109.144.62:8001/signin/\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n\r\n      setApiResponse(response.data.success);\r\n      if (response.data.success) {\r\n        setVerificationStatus(\"Login Success\");\r\n        updateLoginStatus(true);\r\n        const profile_info = {\r\n          student_name: response.data?.student_name,\r\n          medium_of_instruction: response.data?.medium_of_instruction,\r\n          schooling: response.data?.grade,\r\n          profile_img: response.data?.profile_img,\r\n          curriculum: response.data?.curriculum,\r\n          mobileno: response.data?.mobileno,\r\n          childIndex: response.data?.childIndex,\r\n        };\r\n        updateStudent(profile_info);\r\n        const encryptedData = CryptoJS.AES.encrypt(\r\n          JSON.stringify(profile_info),\r\n          encrypt_secrete_key\r\n        ).toString();\r\n        window.localStorage.setItem(\"login_details\", encryptedData);\r\n        setShowSuccessGif(true);\r\n        setLoading(false); // Hide loading GIF after successful login\r\n        speakLoginSuccess(profile_info);\r\n        navigate(`/portfolio`);\r\n      } else {\r\n        setVerificationStatus(\"Login Fail\");\r\n        updateLoginStatus(false);\r\n        setShowFailGif(true);\r\n        setLoading(false); // Hide loading GIF after failed login\r\n        speakLoginFail();\r\n        setShowRecordButton(true); // Show \"Record Again\" button after login failure\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error uploading audio:\", error);\r\n      setVerificationStatus(\"Login Failed server error\");\r\n      setShowFailGif(true);\r\n      updateLoginStatus(false);\r\n      setLoading(false);\r\n      speakLoginFail();\r\n      setShowRecordButton(true);\r\n    }\r\n  };\r\n\r\n  const speakLoginSuccess = (profile_info) => {\r\n    const greeting_message = `Good ${\r\n      new Date().getHours() < 12 ? \"Morning\" : \"Afternoon\"\r\n    } ${profile_info?.student_name}`;\r\n    const speaking = new SpeechSynthesisUtterance(\r\n      `${greeting_message}. Login successful`\r\n    );\r\n    speakout.speak(speaking);\r\n  };\r\n\r\n  const speakLoginFail = () => {\r\n    const speaking = new SpeechSynthesisUtterance(\r\n      \"Login Failed. Please try again.\"\r\n    );\r\n    speakout.speak(speaking);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        textAlign: \"center\",\r\n        paddingTop: \"2rem\",\r\n        height: \"13vw\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      {loading && (\r\n        <img\r\n          src={loadingGif}\r\n          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n          alt=\"Loading GIF\"\r\n        />\r\n      )}\r\n      {showGif && !loading && (\r\n        <img\r\n          src={voicegif}\r\n          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n          alt=\"Recording GIF\"\r\n        />\r\n      )}\r\n      {showSuccessGif && (\r\n        <img\r\n          src={successGif}\r\n          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n          alt=\"Success GIF\"\r\n        />\r\n      )}\r\n      {showFailGif && (\r\n        <img\r\n          src={failGif}\r\n          style={{ height: \"8rem\", marginLeft: \"1rem\" }}\r\n          alt=\"Fail GIF\"\r\n        />\r\n      )}\r\n      {showRecordButton && !loading && (\r\n        <div>\r\n          <button\r\n            className=\"loginform-btn\"\r\n            type=\"button\"\r\n            onClick={startRecording}\r\n          >\r\n            <span className=\"transition\"></span>\r\n            <span className=\"gradient\"></span>\r\n            <span className=\"label\"> Record Audio</span>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {verificationStatus === \"Login Success\" && !loading && (\r\n        <div>\r\n          <div>\r\n            <audio controls src={`data:audio/wav;base64,${audioBase64}`} />\r\n          </div>\r\n        </div>\r\n      )}\r\n      {verificationStatus === \"Login Fail\" && !loading && (\r\n        <div>\r\n          <div style={{ fontSize: \"1rem\", color: \"red\", paddingTop: \"1rem\" }}>\r\n            Login Failed\r\n          </div>\r\n          <button\r\n            className=\"signup__container__form__div__button\"\r\n            type=\"button\"\r\n            onClick={recordAgain}\r\n          >\r\n            Record Again\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioRecorderSignin;\r\n\r\n// import React, { useState, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import CryptoJS from \"crypto-js\";\r\n// import StudentDetailsCustomHook from \"../context-api/StudentDetailsCustomHook\";\r\n// import { encrypt_secrete_key } from \"../../constants/urls\";\r\n// import voicegif from '../../assets/waveanim.gif';\r\n// const AudioRecorderSignin = () => {\r\n//   const { updateStudent } = StudentDetailsCustomHook();\r\n//   const [recording, setRecording] = useState(false);\r\n//   const [audioBase64, setAudioBase64] = useState(null);\r\n//   const [apiResponse, setApiResponse] = useState(null);\r\n//   const [uploadError, setUploadError] = useState(null);\r\n//   const mediaRecorderRef = useRef(null);\r\n//   const currentDate = new Date();\r\n//   const currentHour = currentDate.getHours();\r\n//   const greeting_message = currentHour >= 7 && currentHour <= 12 ? \"Good Morning\" : currentHour > 12 && currentHour <= 4 ? \"Good Afternoon\" : \"Good Evening\"\r\n//   const navigate = useNavigate();\r\n//   const [verificationStatus, setVerificationStatus] = useState(\"\");\r\n//   const speakout = window.speechSynthesis;\r\n//   const [showGif, setShowGif] = useState(false);\r\n//   const startRecording = async () => {\r\n//     setShowGif(true);\r\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n//     mediaRecorderRef.current = new MediaRecorder(stream);\r\n//     let audioChunks = [];\r\n\r\n//     mediaRecorderRef.current.ondataavailable = (event) => {\r\n//       if (event.data.size > 0) {\r\n//         audioChunks.push(event.data);\r\n//       }\r\n//     };\r\n\r\n//     mediaRecorderRef.current.onstop = () => {\r\n//       const audioBlob = new Blob(audioChunks, { type: \"audio/wav\" });\r\n\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         const base64Data = reader.result.split(\",\")[1];\r\n//         setAudioBase64(base64Data);\r\n//         sendAudioBase64ToAPI(base64Data);\r\n//       };\r\n//       reader.readAsDataURL(audioBlob);\r\n\r\n//       stream.getTracks().forEach((track) => track.stop());\r\n//     };\r\n\r\n//     mediaRecorderRef.current.start();\r\n//     setTimeout(() => {\r\n//       stopRecording();\r\n//     }, 7000); // Stop recording after 5 seconds\r\n//     setRecording(true);\r\n//   };\r\n\r\n//   const stopRecording = () => {\r\n//     setShowGif(false);\r\n//     if (\r\n//       mediaRecorderRef.current &&\r\n//       mediaRecorderRef.current.state !== \"inactive\"\r\n//     ) {\r\n//       mediaRecorderRef.current.stop();\r\n//       setRecording(false);\r\n//     }\r\n//   };\r\n\r\n//   const recordAgain = () => {\r\n//     setVerificationStatus(\"\");\r\n//     setAudioBase64(null);\r\n//     setApiResponse(null);\r\n//     setUploadError(null);\r\n//     startRecording();\r\n//   };\r\n\r\n//   const sendAudioBase64ToAPI = async (base64Data) => {\r\n//     const formData = new FormData();\r\n//     formData.append(\"audio_file\", base64Data);\r\n\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://65.2.149.64:8001/signin/\",\r\n//         formData,\r\n//         {\r\n//           headers: {\r\n//             \"Content-Type\": \"multipart/form-data\",\r\n//           },\r\n//         }\r\n//       );\r\n//       console.log(response)\r\n//       setApiResponse(response.data.success);\r\n//       const msg = response.data.success ? \"Login successful\" : \"Login Failed\";\r\n//       const speaking = new SpeechSynthesisUtterance(msg);\r\n//       speakout.speak(speaking);\r\n//       if (response.data.success) {\r\n//         setVerificationStatus(\"Login Sucess\");\r\n//         const profile_info = {\r\n//           student_name: response.data?.student_name,\r\n//           medium_of_instruction: response.data?.medium_of_instruction,\r\n//           schooling: response.data?.grade,\r\n//           profile_img: response.data?.profile_img,\r\n//           curriculum: response.data?.curriculum,\r\n//           mobileno: response.data?.mobileno,\r\n//           childIndex: response.data?.childIndex,\r\n\r\n//         };\r\n//         updateStudent(profile_info);\r\n//         const encryptedData = CryptoJS.AES.encrypt(\r\n//           JSON.stringify(profile_info),\r\n//           encrypt_secrete_key\r\n//         ).toString();\r\n//         window.localStorage.setItem(\"login_details\", encryptedData);\r\n//         setTimeout(()=>{\r\n//           const speaking = new SpeechSynthesisUtterance(`${greeting_message} ${profile_info?.student_name}`);\r\n//           speakout.speak(speaking)\r\n//         },4000)\r\n//         navigate(`/portfolio`);\r\n//       } else {\r\n//         setVerificationStatus(\"Login Fail\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error uploading audio:\", error);\r\n//       setVerificationStatus(\"Login Failed server error\");\r\n//       setUploadError(\"Error audio signin. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ textAlign: \"center\", paddingTop: \"2rem\" }}>\r\n//       {showGif && (\r\n//         // <iframe\r\n//         //   src=\"https://tenor.com/embed/23229777\"\r\n//         //   className=\"giphy-embed\"\r\n//         //   allowFullScreen\r\n//         //   title=\"Sound GIF\"\r\n//         // />\r\n//         <img src={voicegif} style={{height:'8rem', marginLeft: '1rem'}}/>\r\n//       )}\r\n//       {audioBase64 ? (\r\n//         <div>\r\n//           <audio controls src={`data:audio/wav;base64,${audioBase64}`} />\r\n//           <br />\r\n//           <br />\r\n//           <button\r\n//             className=\"signup__container__form__div__button\"\r\n//             type=\"button\"\r\n//             onClick={recordAgain}\r\n//           >\r\n//             Record Again\r\n//           </button>\r\n//         </div>\r\n//       ) : (\r\n//         !recording && (\r\n//         <button\r\n//           className=\"signup__container__form__div__button1\"\r\n//           type=\"button\"\r\n//           onClick={startRecording}\r\n//           disabled={recording}\r\n//         >\r\n//           {recording ? \"Recording...\" : \"Record Audio\"}\r\n//         </button>\r\n//         )\r\n//       )}\r\n//       {verificationStatus && (\r\n//         <div\r\n//           style={{\r\n//             fontSize: \"1rem\",\r\n//             color: \"red\",\r\n//             paddingTop: \"1rem\",\r\n//           }}\r\n//         >\r\n//           {verificationStatus}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AudioRecorderSignin;\r\n"
        }
    ]
}